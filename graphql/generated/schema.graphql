directive @defer(if: Boolean! = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type Address {
  AddressComponents(cursor: AddressComponentWhereUniqueInput, distinct: [AddressComponentScalarFieldEnum!], orderBy: [AddressComponentOrderByWithRelationInput!], skip: Int, take: Int, where: AddressComponentWhereInput): [AddressComponent!]!
  createdAt: DateTime!
  formattedAddress: String!
  id: ID!
  Location(cursor: LocationWhereUniqueInput, distinct: [LocationScalarFieldEnum!], orderBy: [LocationOrderByWithRelationInput!], skip: Int, take: Int, where: LocationWhereInput): [Location!]!
  updatedAt: DateTime!
}

type AddressComponent {
  Address: Address
  addressId: String
  h3Index15: String
  id: ID!
  long_name: String!
  short_name: String!
  types: [String!]!
}

input AddressComponentAvgOrderByAggregateInput {
  id: SortOrder
}

input AddressComponentCountOrderByAggregateInput {
  addressId: SortOrder
  h3Index15: SortOrder
  id: SortOrder
  long_name: SortOrder
  short_name: SortOrder
  types: SortOrder
}

input AddressComponentCreateInput {
  Address: AddressCreateNestedOneWithoutAddressComponentsInput
  h3Index15: String
  long_name: String!
  short_name: String!
  types: [String!]
}

input AddressComponentCreateManyAddressInput {
  h3Index15: String
  id: Int
  long_name: String!
  short_name: String!
  types: [String!]
}

input AddressComponentCreateManyAddressInputEnvelope {
  data: [AddressComponentCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input AddressComponentCreateManyInput {
  addressId: String
  h3Index15: String
  id: Int
  long_name: String!
  short_name: String!
  types: [String!]
}

input AddressComponentCreateNestedManyWithoutAddressInput {
  connect: [AddressComponentWhereUniqueInput!]
  connectOrCreate: [AddressComponentCreateOrConnectWithoutAddressInput!]
  create: AddressComponentCreateWithoutAddressInput
  createMany: AddressComponentCreateManyAddressInputEnvelope
}

input AddressComponentCreateOrConnectWithoutAddressInput {
  create: AddressComponentCreateWithoutAddressInput!
  where: AddressComponentWhereUniqueInput!
}

input AddressComponentCreatetypesInput {
  set: [String!]!
}

input AddressComponentCreateWithoutAddressInput {
  h3Index15: String
  long_name: String!
  short_name: String!
  types: [String!]
}

input AddressComponentListRelationFilter {
  every: AddressComponentWhereInput
  none: AddressComponentWhereInput
  some: AddressComponentWhereInput
}

input AddressComponentMaxOrderByAggregateInput {
  addressId: SortOrder
  h3Index15: SortOrder
  id: SortOrder
  long_name: SortOrder
  short_name: SortOrder
}

input AddressComponentMinOrderByAggregateInput {
  addressId: SortOrder
  h3Index15: SortOrder
  id: SortOrder
  long_name: SortOrder
  short_name: SortOrder
}

input AddressComponentOrderByRelationAggregateInput {
  _count: SortOrder
}

input AddressComponentOrderByWithAggregationInput {
  _avg: AddressComponentAvgOrderByAggregateInput
  _count: AddressComponentCountOrderByAggregateInput
  _max: AddressComponentMaxOrderByAggregateInput
  _min: AddressComponentMinOrderByAggregateInput
  _sum: AddressComponentSumOrderByAggregateInput
  addressId: SortOrder
  h3Index15: SortOrder
  id: SortOrder
  long_name: SortOrder
  short_name: SortOrder
  types: SortOrder
}

input AddressComponentOrderByWithRelationInput {
  Address: AddressOrderByWithRelationInput
  addressId: SortOrder
  h3Index15: SortOrder
  id: SortOrder
  long_name: SortOrder
  short_name: SortOrder
  types: SortOrder
}

enum AddressComponentScalarFieldEnum {
  addressId
  h3Index15
  id
  long_name
  short_name
  types
}

input AddressComponentScalarWhereInput {
  addressId: StringNullableFilter
  AND: [AddressComponentScalarWhereInput!]
  h3Index15: StringNullableFilter
  id: IntFilter
  long_name: StringFilter
  NOT: [AddressComponentScalarWhereInput!]
  OR: [AddressComponentScalarWhereInput!]
  short_name: StringFilter
  types: StringNullableListFilter
}

input AddressComponentScalarWhereWithAggregatesInput {
  addressId: StringNullableWithAggregatesFilter
  AND: [AddressComponentScalarWhereWithAggregatesInput!]
  h3Index15: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  long_name: StringWithAggregatesFilter
  NOT: [AddressComponentScalarWhereWithAggregatesInput!]
  OR: [AddressComponentScalarWhereWithAggregatesInput!]
  short_name: StringWithAggregatesFilter
  types: StringNullableListFilter
}

input AddressComponentSumOrderByAggregateInput {
  id: SortOrder
}

input AddressComponentUpdateInput {
  Address: AddressUpdateOneWithoutAddressComponentsNestedInput
  h3Index15: NullableStringFieldUpdateOperationsInput
  long_name: StringFieldUpdateOperationsInput
  short_name: StringFieldUpdateOperationsInput
  types: [String!]
}

input AddressComponentUpdateManyMutationInput {
  h3Index15: NullableStringFieldUpdateOperationsInput
  long_name: StringFieldUpdateOperationsInput
  short_name: StringFieldUpdateOperationsInput
  types: [String!]
}

input AddressComponentUpdateManyWithoutAddressNestedInput {
  connect: [AddressComponentWhereUniqueInput!]
  connectOrCreate: [AddressComponentCreateOrConnectWithoutAddressInput!]
  create: AddressComponentCreateWithoutAddressInput
  createMany: AddressComponentCreateManyAddressInputEnvelope
  delete: [AddressComponentWhereUniqueInput!]
  deleteMany: [AddressComponentScalarWhereInput!]
  disconnect: [AddressComponentWhereUniqueInput!]
  set: [AddressComponentWhereUniqueInput!]
  update: [AddressComponentUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [AddressComponentUpdateManyWithWhereWithoutAddressInput!]
  upsert: [AddressComponentUpsertWithWhereUniqueWithoutAddressInput!]
}

input AddressComponentUpdateManyWithWhereWithoutAddressInput {
  data: AddressComponentUpdateManyMutationInput!
  where: AddressComponentScalarWhereInput!
}

input AddressComponentUpdatetypesInput {
  push: [String!]
  set: [String!]
}

input AddressComponentUpdateWithoutAddressInput {
  h3Index15: NullableStringFieldUpdateOperationsInput
  long_name: StringFieldUpdateOperationsInput
  short_name: StringFieldUpdateOperationsInput
  types: [String!]
}

input AddressComponentUpdateWithWhereUniqueWithoutAddressInput {
  data: AddressComponentUpdateWithoutAddressInput!
  where: AddressComponentWhereUniqueInput!
}

input AddressComponentUpsertWithWhereUniqueWithoutAddressInput {
  create: AddressComponentCreateWithoutAddressInput!
  update: AddressComponentUpdateWithoutAddressInput!
  where: AddressComponentWhereUniqueInput!
}

input AddressComponentWhereInput {
  Address: AddressWhereInput
  addressId: StringNullableFilter
  AND: [AddressComponentWhereInput!]
  h3Index15: StringNullableFilter
  id: IntFilter
  long_name: StringFilter
  NOT: [AddressComponentWhereInput!]
  OR: [AddressComponentWhereInput!]
  short_name: StringFilter
  types: StringNullableListFilter
}

input AddressComponentWhereUniqueInput {
  id: Int
}

input AddressCountOrderByAggregateInput {
  createdAt: SortOrder
  formattedAddress: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input AddressCreateInput {
  AddressComponents: AddressComponentCreateNestedManyWithoutAddressInput
  createdAt: DateTime
  formattedAddress: String!
  id: String
  Location: LocationCreateNestedManyWithoutAddressInput
  updatedAt: DateTime
}

input AddressCreateManyInput {
  createdAt: DateTime
  formattedAddress: String!
  id: String
  updatedAt: DateTime
}

input AddressCreateNestedOneWithoutAddressComponentsInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutAddressComponentsInput
  create: AddressCreateWithoutAddressComponentsInput
}

input AddressCreateNestedOneWithoutLocationInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutLocationInput
  create: AddressCreateWithoutLocationInput
}

input AddressCreateOrConnectWithoutAddressComponentsInput {
  create: AddressCreateWithoutAddressComponentsInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateOrConnectWithoutLocationInput {
  create: AddressCreateWithoutLocationInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateWithoutAddressComponentsInput {
  createdAt: DateTime
  formattedAddress: String!
  id: String
  Location: LocationCreateNestedManyWithoutAddressInput
  updatedAt: DateTime
}

input AddressCreateWithoutLocationInput {
  AddressComponents: AddressComponentCreateNestedManyWithoutAddressInput
  createdAt: DateTime
  formattedAddress: String!
  id: String
  updatedAt: DateTime
}

input AddressMaxOrderByAggregateInput {
  createdAt: SortOrder
  formattedAddress: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input AddressMinOrderByAggregateInput {
  createdAt: SortOrder
  formattedAddress: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input AddressOrderByWithAggregationInput {
  _count: AddressCountOrderByAggregateInput
  _max: AddressMaxOrderByAggregateInput
  _min: AddressMinOrderByAggregateInput
  createdAt: SortOrder
  formattedAddress: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input AddressOrderByWithRelationInput {
  AddressComponents: AddressComponentOrderByRelationAggregateInput
  createdAt: SortOrder
  formattedAddress: SortOrder
  id: SortOrder
  Location: LocationOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

enum AddressScalarFieldEnum {
  createdAt
  formattedAddress
  id
  updatedAt
}

input AddressScalarWhereWithAggregatesInput {
  AND: [AddressScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  formattedAddress: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [AddressScalarWhereWithAggregatesInput!]
  OR: [AddressScalarWhereWithAggregatesInput!]
  updatedAt: DateTimeWithAggregatesFilter
}

input AddressUpdateInput {
  AddressComponents: AddressComponentUpdateManyWithoutAddressNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  formattedAddress: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Location: LocationUpdateManyWithoutAddressNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AddressUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  formattedAddress: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AddressUpdateOneWithoutAddressComponentsNestedInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutAddressComponentsInput
  create: AddressCreateWithoutAddressComponentsInput
  delete: Boolean
  disconnect: Boolean
  update: AddressUpdateWithoutAddressComponentsInput
  upsert: AddressUpsertWithoutAddressComponentsInput
}

input AddressUpdateOneWithoutLocationNestedInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutLocationInput
  create: AddressCreateWithoutLocationInput
  delete: Boolean
  disconnect: Boolean
  update: AddressUpdateWithoutLocationInput
  upsert: AddressUpsertWithoutLocationInput
}

input AddressUpdateWithoutAddressComponentsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  formattedAddress: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Location: LocationUpdateManyWithoutAddressNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AddressUpdateWithoutLocationInput {
  AddressComponents: AddressComponentUpdateManyWithoutAddressNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  formattedAddress: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AddressUpsertWithoutAddressComponentsInput {
  create: AddressCreateWithoutAddressComponentsInput!
  update: AddressUpdateWithoutAddressComponentsInput!
}

input AddressUpsertWithoutLocationInput {
  create: AddressCreateWithoutLocationInput!
  update: AddressUpdateWithoutLocationInput!
}

input AddressWhereInput {
  AddressComponents: AddressComponentListRelationFilter
  AND: [AddressWhereInput!]
  createdAt: DateTimeFilter
  formattedAddress: StringFilter
  id: StringFilter
  Location: LocationListRelationFilter
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  updatedAt: DateTimeFilter
}

input AddressWhereUniqueInput {
  id: String
}

enum AppType {
  BARFRIENDS
  PETFRIENDS
}

type AuthenticationProvider {
  codepassword: Code
  Credentials: Credentials
  emails(cursor: EmailWhereUniqueInput, distinct: [EmailScalarFieldEnum!], orderBy: [EmailOrderByWithRelationInput!], skip: Int, take: Int, where: EmailWhereInput): [Email!]!
  id: ID!
  Password: Password
  phones(cursor: PhoneWhereUniqueInput, distinct: [PhoneScalarFieldEnum!], orderBy: [PhoneOrderByWithRelationInput!], skip: Int, take: Int, where: PhoneWhereInput): [Phone!]!
}

input AuthenticationProviderCountOrderByAggregateInput {
  id: SortOrder
}

input AuthenticationProviderCreateInput {
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
  Credentials: CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  id: String
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
}

input AuthenticationProviderCreateManyInput {
  id: String
}

input AuthenticationProviderCreateNestedManyWithoutEmailsInput {
  connect: [AuthenticationProviderWhereUniqueInput!]
  connectOrCreate: [AuthenticationProviderCreateOrConnectWithoutEmailsInput!]
  create: AuthenticationProviderCreateWithoutEmailsInput
}

input AuthenticationProviderCreateNestedManyWithoutPhonesInput {
  connect: [AuthenticationProviderWhereUniqueInput!]
  connectOrCreate: [AuthenticationProviderCreateOrConnectWithoutPhonesInput!]
  create: AuthenticationProviderCreateWithoutPhonesInput
}

input AuthenticationProviderCreateNestedOneWithoutCodepasswordInput {
  connect: AuthenticationProviderWhereUniqueInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutCodepasswordInput
  create: AuthenticationProviderCreateWithoutCodepasswordInput
}

input AuthenticationProviderCreateNestedOneWithoutCredentialsInput {
  connect: AuthenticationProviderWhereUniqueInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutCredentialsInput
  create: AuthenticationProviderCreateWithoutCredentialsInput
}

input AuthenticationProviderCreateNestedOneWithoutPasswordInput {
  connect: AuthenticationProviderWhereUniqueInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutPasswordInput
  create: AuthenticationProviderCreateWithoutPasswordInput
}

input AuthenticationProviderCreateOrConnectWithoutCodepasswordInput {
  create: AuthenticationProviderCreateWithoutCodepasswordInput!
  where: AuthenticationProviderWhereUniqueInput!
}

input AuthenticationProviderCreateOrConnectWithoutCredentialsInput {
  create: AuthenticationProviderCreateWithoutCredentialsInput!
  where: AuthenticationProviderWhereUniqueInput!
}

input AuthenticationProviderCreateOrConnectWithoutEmailsInput {
  create: AuthenticationProviderCreateWithoutEmailsInput!
  where: AuthenticationProviderWhereUniqueInput!
}

input AuthenticationProviderCreateOrConnectWithoutPasswordInput {
  create: AuthenticationProviderCreateWithoutPasswordInput!
  where: AuthenticationProviderWhereUniqueInput!
}

input AuthenticationProviderCreateOrConnectWithoutPhonesInput {
  create: AuthenticationProviderCreateWithoutPhonesInput!
  where: AuthenticationProviderWhereUniqueInput!
}

input AuthenticationProviderCreateWithoutCodepasswordInput {
  Credentials: CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  id: String
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
}

input AuthenticationProviderCreateWithoutCredentialsInput {
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  id: String
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
}

input AuthenticationProviderCreateWithoutEmailsInput {
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
  Credentials: CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  id: String
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
}

input AuthenticationProviderCreateWithoutPasswordInput {
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
  Credentials: CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  id: String
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
}

input AuthenticationProviderCreateWithoutPhonesInput {
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
  Credentials: CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  id: String
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
}

input AuthenticationProviderListRelationFilter {
  every: AuthenticationProviderWhereInput
  none: AuthenticationProviderWhereInput
  some: AuthenticationProviderWhereInput
}

input AuthenticationProviderMaxOrderByAggregateInput {
  id: SortOrder
}

input AuthenticationProviderMinOrderByAggregateInput {
  id: SortOrder
}

input AuthenticationProviderOrderByRelationAggregateInput {
  _count: SortOrder
}

input AuthenticationProviderOrderByWithAggregationInput {
  _count: AuthenticationProviderCountOrderByAggregateInput
  _max: AuthenticationProviderMaxOrderByAggregateInput
  _min: AuthenticationProviderMinOrderByAggregateInput
  id: SortOrder
}

input AuthenticationProviderOrderByWithRelationInput {
  codepassword: CodeOrderByWithRelationInput
  Credentials: CredentialsOrderByWithRelationInput
  emails: EmailOrderByRelationAggregateInput
  id: SortOrder
  Password: PasswordOrderByWithRelationInput
  phones: PhoneOrderByRelationAggregateInput
}

input AuthenticationProviderRelationFilter {
  is: AuthenticationProviderWhereInput
  isNot: AuthenticationProviderWhereInput
}

enum AuthenticationProviderScalarFieldEnum {
  id
}

input AuthenticationProviderScalarWhereInput {
  AND: [AuthenticationProviderScalarWhereInput!]
  id: StringFilter
  NOT: [AuthenticationProviderScalarWhereInput!]
  OR: [AuthenticationProviderScalarWhereInput!]
}

input AuthenticationProviderScalarWhereWithAggregatesInput {
  AND: [AuthenticationProviderScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  NOT: [AuthenticationProviderScalarWhereWithAggregatesInput!]
  OR: [AuthenticationProviderScalarWhereWithAggregatesInput!]
}

input AuthenticationProviderUpdateInput {
  codepassword: CodeUpdateOneWithoutAuthenticationProviderNestedInput
  Credentials: CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  emails: EmailUpdateManyWithoutAuthenticationProviderNestedInput
  id: StringFieldUpdateOperationsInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderNestedInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
}

input AuthenticationProviderUpdateManyWithoutEmailsNestedInput {
  connect: [AuthenticationProviderWhereUniqueInput!]
  connectOrCreate: [AuthenticationProviderCreateOrConnectWithoutEmailsInput!]
  create: AuthenticationProviderCreateWithoutEmailsInput
  delete: [AuthenticationProviderWhereUniqueInput!]
  deleteMany: [AuthenticationProviderScalarWhereInput!]
  disconnect: [AuthenticationProviderWhereUniqueInput!]
  set: [AuthenticationProviderWhereUniqueInput!]
  update: [AuthenticationProviderUpdateWithWhereUniqueWithoutEmailsInput!]
  updateMany: [AuthenticationProviderUpdateManyWithWhereWithoutEmailsInput!]
  upsert: [AuthenticationProviderUpsertWithWhereUniqueWithoutEmailsInput!]
}

input AuthenticationProviderUpdateManyWithoutPhonesNestedInput {
  connect: [AuthenticationProviderWhereUniqueInput!]
  connectOrCreate: [AuthenticationProviderCreateOrConnectWithoutPhonesInput!]
  create: AuthenticationProviderCreateWithoutPhonesInput
  delete: [AuthenticationProviderWhereUniqueInput!]
  deleteMany: [AuthenticationProviderScalarWhereInput!]
  disconnect: [AuthenticationProviderWhereUniqueInput!]
  set: [AuthenticationProviderWhereUniqueInput!]
  update: [AuthenticationProviderUpdateWithWhereUniqueWithoutPhonesInput!]
  updateMany: [AuthenticationProviderUpdateManyWithWhereWithoutPhonesInput!]
  upsert: [AuthenticationProviderUpsertWithWhereUniqueWithoutPhonesInput!]
}

input AuthenticationProviderUpdateManyWithWhereWithoutEmailsInput {
  data: AuthenticationProviderUpdateManyMutationInput!
  where: AuthenticationProviderScalarWhereInput!
}

input AuthenticationProviderUpdateManyWithWhereWithoutPhonesInput {
  data: AuthenticationProviderUpdateManyMutationInput!
  where: AuthenticationProviderScalarWhereInput!
}

input AuthenticationProviderUpdateOneRequiredWithoutPasswordNestedInput {
  connect: AuthenticationProviderWhereUniqueInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutPasswordInput
  create: AuthenticationProviderCreateWithoutPasswordInput
  update: AuthenticationProviderUpdateWithoutPasswordInput
  upsert: AuthenticationProviderUpsertWithoutPasswordInput
}

input AuthenticationProviderUpdateOneWithoutCodepasswordNestedInput {
  connect: AuthenticationProviderWhereUniqueInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutCodepasswordInput
  create: AuthenticationProviderCreateWithoutCodepasswordInput
  delete: Boolean
  disconnect: Boolean
  update: AuthenticationProviderUpdateWithoutCodepasswordInput
  upsert: AuthenticationProviderUpsertWithoutCodepasswordInput
}

input AuthenticationProviderUpdateOneWithoutCredentialsNestedInput {
  connect: AuthenticationProviderWhereUniqueInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutCredentialsInput
  create: AuthenticationProviderCreateWithoutCredentialsInput
  delete: Boolean
  disconnect: Boolean
  update: AuthenticationProviderUpdateWithoutCredentialsInput
  upsert: AuthenticationProviderUpsertWithoutCredentialsInput
}

input AuthenticationProviderUpdateWithoutCodepasswordInput {
  Credentials: CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  emails: EmailUpdateManyWithoutAuthenticationProviderNestedInput
  id: StringFieldUpdateOperationsInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderNestedInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateWithoutCredentialsInput {
  codepassword: CodeUpdateOneWithoutAuthenticationProviderNestedInput
  emails: EmailUpdateManyWithoutAuthenticationProviderNestedInput
  id: StringFieldUpdateOperationsInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderNestedInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateWithoutEmailsInput {
  codepassword: CodeUpdateOneWithoutAuthenticationProviderNestedInput
  Credentials: CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  id: StringFieldUpdateOperationsInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderNestedInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateWithoutPasswordInput {
  codepassword: CodeUpdateOneWithoutAuthenticationProviderNestedInput
  Credentials: CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  emails: EmailUpdateManyWithoutAuthenticationProviderNestedInput
  id: StringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateWithoutPhonesInput {
  codepassword: CodeUpdateOneWithoutAuthenticationProviderNestedInput
  Credentials: CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  emails: EmailUpdateManyWithoutAuthenticationProviderNestedInput
  id: StringFieldUpdateOperationsInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateWithWhereUniqueWithoutEmailsInput {
  data: AuthenticationProviderUpdateWithoutEmailsInput!
  where: AuthenticationProviderWhereUniqueInput!
}

input AuthenticationProviderUpdateWithWhereUniqueWithoutPhonesInput {
  data: AuthenticationProviderUpdateWithoutPhonesInput!
  where: AuthenticationProviderWhereUniqueInput!
}

input AuthenticationProviderUpsertWithoutCodepasswordInput {
  create: AuthenticationProviderCreateWithoutCodepasswordInput!
  update: AuthenticationProviderUpdateWithoutCodepasswordInput!
}

input AuthenticationProviderUpsertWithoutCredentialsInput {
  create: AuthenticationProviderCreateWithoutCredentialsInput!
  update: AuthenticationProviderUpdateWithoutCredentialsInput!
}

input AuthenticationProviderUpsertWithoutPasswordInput {
  create: AuthenticationProviderCreateWithoutPasswordInput!
  update: AuthenticationProviderUpdateWithoutPasswordInput!
}

input AuthenticationProviderUpsertWithWhereUniqueWithoutEmailsInput {
  create: AuthenticationProviderCreateWithoutEmailsInput!
  update: AuthenticationProviderUpdateWithoutEmailsInput!
  where: AuthenticationProviderWhereUniqueInput!
}

input AuthenticationProviderUpsertWithWhereUniqueWithoutPhonesInput {
  create: AuthenticationProviderCreateWithoutPhonesInput!
  update: AuthenticationProviderUpdateWithoutPhonesInput!
  where: AuthenticationProviderWhereUniqueInput!
}

input AuthenticationProviderWhereInput {
  AND: [AuthenticationProviderWhereInput!]
  codepassword: CodeWhereInput
  Credentials: CredentialsWhereInput
  emails: EmailListRelationFilter
  id: StringFilter
  NOT: [AuthenticationProviderWhereInput!]
  OR: [AuthenticationProviderWhereInput!]
  Password: PasswordWhereInput
  phones: PhoneListRelationFilter
}

input AuthenticationProviderWhereUniqueInput {
  id: String
}

input Authenticators {
  EmailInput: EmailInput
  PhoneInput: PhoneInput
  username: String
}

union AuthorizedProfilesResponseUnion = ErrorProfiling | ProfilesResponse

input AuthorizedProfilesWhereInput {
  profiles: CustomProfileWhereInput!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input BoolNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedBoolNullableFilter
  _min: NestedBoolNullableFilter
  equals: Boolean
  not: NestedBoolNullableWithAggregatesFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Category {
  id: ID!
  name: String!
  Tags(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
}

input CategoryCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input CategoryCreateInput {
  id: String
  name: String!
  Tags: TagCreateNestedManyWithoutCategoryInput
}

input CategoryCreateManyInput {
  id: String
  name: String!
}

input CategoryCreateNestedOneWithoutTagsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutTagsInput
  create: CategoryCreateWithoutTagsInput
}

input CategoryCreateOrConnectWithoutTagsInput {
  create: CategoryCreateWithoutTagsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutTagsInput {
  id: String
  name: String!
}

input CategoryMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input CategoryMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input CategoryOrderByWithAggregationInput {
  _count: CategoryCountOrderByAggregateInput
  _max: CategoryMaxOrderByAggregateInput
  _min: CategoryMinOrderByAggregateInput
  id: SortOrder
  name: SortOrder
}

input CategoryOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  Tags: TagOrderByRelationAggregateInput
}

input CategoryRelationFilter {
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

enum CategoryScalarFieldEnum {
  id
  name
}

input CategoryScalarWhereWithAggregatesInput {
  AND: [CategoryScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  NOT: [CategoryScalarWhereWithAggregatesInput!]
  OR: [CategoryScalarWhereWithAggregatesInput!]
}

input CategoryUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  Tags: TagUpdateManyWithoutCategoryNestedInput
}

input CategoryUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CategoryUpdateOneWithoutTagsNestedInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutTagsInput
  create: CategoryCreateWithoutTagsInput
  delete: Boolean
  disconnect: Boolean
  update: CategoryUpdateWithoutTagsInput
  upsert: CategoryUpsertWithoutTagsInput
}

input CategoryUpdateWithoutTagsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CategoryUpsertWithoutTagsInput {
  create: CategoryCreateWithoutTagsInput!
  update: CategoryUpdateWithoutTagsInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  id: StringFilter
  name: StringFilter
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  Tags: TagListRelationFilter
}

input CategoryWhereUniqueInput {
  id: String
}

input ChatroomCountOrderByAggregateInput {
  id: SortOrder
}

input ChatroomCreateInput {
  id: String
  messages: MessageCreateNestedManyWithoutChatroomInput
  profiles: ProfileCreateNestedManyWithoutChatroomInput
}

input ChatroomCreateManyInput {
  id: String
}

input ChatroomCreateNestedManyWithoutProfilesInput {
  connect: [ChatroomWhereUniqueInput!]
  connectOrCreate: [ChatroomCreateOrConnectWithoutProfilesInput!]
  create: ChatroomCreateWithoutProfilesInput
}

input ChatroomCreateNestedOneWithoutMessagesInput {
  connect: ChatroomWhereUniqueInput
  connectOrCreate: ChatroomCreateOrConnectWithoutMessagesInput
  create: ChatroomCreateWithoutMessagesInput
}

input ChatroomCreateOrConnectWithoutMessagesInput {
  create: ChatroomCreateWithoutMessagesInput!
  where: ChatroomWhereUniqueInput!
}

input ChatroomCreateOrConnectWithoutProfilesInput {
  create: ChatroomCreateWithoutProfilesInput!
  where: ChatroomWhereUniqueInput!
}

input ChatroomCreateWithoutMessagesInput {
  id: String
  profiles: ProfileCreateNestedManyWithoutChatroomInput
}

input ChatroomCreateWithoutProfilesInput {
  id: String
  messages: MessageCreateNestedManyWithoutChatroomInput
}

input ChatroomListRelationFilter {
  every: ChatroomWhereInput
  none: ChatroomWhereInput
  some: ChatroomWhereInput
}

input ChatroomMaxOrderByAggregateInput {
  id: SortOrder
}

input ChatroomMinOrderByAggregateInput {
  id: SortOrder
}

input ChatroomOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChatroomOrderByWithAggregationInput {
  _count: ChatroomCountOrderByAggregateInput
  _max: ChatroomMaxOrderByAggregateInput
  _min: ChatroomMinOrderByAggregateInput
  id: SortOrder
}

input ChatroomOrderByWithRelationInput {
  id: SortOrder
  messages: MessageOrderByRelationAggregateInput
  profiles: ProfileOrderByRelationAggregateInput
}

input ChatroomRelationFilter {
  is: ChatroomWhereInput
  isNot: ChatroomWhereInput
}

enum ChatroomScalarFieldEnum {
  id
}

input ChatroomScalarWhereInput {
  AND: [ChatroomScalarWhereInput!]
  id: StringFilter
  NOT: [ChatroomScalarWhereInput!]
  OR: [ChatroomScalarWhereInput!]
}

input ChatroomScalarWhereWithAggregatesInput {
  AND: [ChatroomScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  NOT: [ChatroomScalarWhereWithAggregatesInput!]
  OR: [ChatroomScalarWhereWithAggregatesInput!]
}

input ChatroomUpdateInput {
  id: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutChatroomNestedInput
  profiles: ProfileUpdateManyWithoutChatroomNestedInput
}

input ChatroomUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
}

input ChatroomUpdateManyWithoutProfilesNestedInput {
  connect: [ChatroomWhereUniqueInput!]
  connectOrCreate: [ChatroomCreateOrConnectWithoutProfilesInput!]
  create: ChatroomCreateWithoutProfilesInput
  delete: [ChatroomWhereUniqueInput!]
  deleteMany: [ChatroomScalarWhereInput!]
  disconnect: [ChatroomWhereUniqueInput!]
  set: [ChatroomWhereUniqueInput!]
  update: [ChatroomUpdateWithWhereUniqueWithoutProfilesInput!]
  updateMany: [ChatroomUpdateManyWithWhereWithoutProfilesInput!]
  upsert: [ChatroomUpsertWithWhereUniqueWithoutProfilesInput!]
}

input ChatroomUpdateManyWithWhereWithoutProfilesInput {
  data: ChatroomUpdateManyMutationInput!
  where: ChatroomScalarWhereInput!
}

input ChatroomUpdateOneWithoutMessagesNestedInput {
  connect: ChatroomWhereUniqueInput
  connectOrCreate: ChatroomCreateOrConnectWithoutMessagesInput
  create: ChatroomCreateWithoutMessagesInput
  delete: Boolean
  disconnect: Boolean
  update: ChatroomUpdateWithoutMessagesInput
  upsert: ChatroomUpsertWithoutMessagesInput
}

input ChatroomUpdateWithoutMessagesInput {
  id: StringFieldUpdateOperationsInput
  profiles: ProfileUpdateManyWithoutChatroomNestedInput
}

input ChatroomUpdateWithoutProfilesInput {
  id: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutChatroomNestedInput
}

input ChatroomUpdateWithWhereUniqueWithoutProfilesInput {
  data: ChatroomUpdateWithoutProfilesInput!
  where: ChatroomWhereUniqueInput!
}

input ChatroomUpsertWithoutMessagesInput {
  create: ChatroomCreateWithoutMessagesInput!
  update: ChatroomUpdateWithoutMessagesInput!
}

input ChatroomUpsertWithWhereUniqueWithoutProfilesInput {
  create: ChatroomCreateWithoutProfilesInput!
  update: ChatroomUpdateWithoutProfilesInput!
  where: ChatroomWhereUniqueInput!
}

input ChatroomWhereInput {
  AND: [ChatroomWhereInput!]
  id: StringFilter
  messages: MessageListRelationFilter
  NOT: [ChatroomWhereInput!]
  OR: [ChatroomWhereInput!]
  profiles: ProfileListRelationFilter
}

input ChatroomWhereUniqueInput {
  id: String
}

type CityResponseObject {
  countryCode: String!
  latitude: String
  longitude: String
  name: String!
  stateCode: String!
}

type ClientDeviceManager {
  createdAt: DateTime!
  Device: Device
  DeviceProfile: ClientDeviceProfile
  id: String!
  updatedAt: DateTime!
}

type ClientDeviceProfile {
  accesstoken: String
  AppType: AppType
  createdAt: DateTime!
  DeviceManager: DeviceManager!
  deviceManagerId: String!
  id: ID!
  isActive: Boolean!
  Profile: Profile!
  profileId: String
  ProfileType: ProfileType
  refreshtoken: String!
  RefreshToken: RefreshToken
  updatedAt: DateTime!
}

type Code {
  code: String!
  id: ID!
}

input CodeCountOrderByAggregateInput {
  authenitcationProviderId: SortOrder
  canUseAsRecovery: SortOrder
  code: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input CodeCreateInput {
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutCodepasswordInput
  canUseAsRecovery: Boolean
  code: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input CodeCreateManyInput {
  authenitcationProviderId: String
  canUseAsRecovery: Boolean
  code: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input CodeCreateNestedOneWithoutAuthenticationProviderInput {
  connect: CodeWhereUniqueInput
  connectOrCreate: CodeCreateOrConnectWithoutAuthenticationProviderInput
  create: CodeCreateWithoutAuthenticationProviderInput
}

input CodeCreateOrConnectWithoutAuthenticationProviderInput {
  create: CodeCreateWithoutAuthenticationProviderInput!
  where: CodeWhereUniqueInput!
}

input CodeCreateWithoutAuthenticationProviderInput {
  canUseAsRecovery: Boolean
  code: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input CodeDataInput {
  """Length is the total numbers that you want the code to be."""
  length: Int
}

input CodeMaxOrderByAggregateInput {
  authenitcationProviderId: SortOrder
  canUseAsRecovery: SortOrder
  code: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input CodeMinOrderByAggregateInput {
  authenitcationProviderId: SortOrder
  canUseAsRecovery: SortOrder
  code: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input CodeOrderByWithAggregationInput {
  _count: CodeCountOrderByAggregateInput
  _max: CodeMaxOrderByAggregateInput
  _min: CodeMinOrderByAggregateInput
  authenitcationProviderId: SortOrder
  canUseAsRecovery: SortOrder
  code: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input CodeOrderByWithRelationInput {
  authenitcationProviderId: SortOrder
  AuthenticationProvider: AuthenticationProviderOrderByWithRelationInput
  canUseAsRecovery: SortOrder
  code: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input CodeRelationFilter {
  is: CodeWhereInput
  isNot: CodeWhereInput
}

union CodeResponse = Code | ErrorProfiling

enum CodeScalarFieldEnum {
  authenitcationProviderId
  canUseAsRecovery
  code
  createdAt
  id
  updatedAt
}

input CodeScalarWhereWithAggregatesInput {
  AND: [CodeScalarWhereWithAggregatesInput!]
  authenitcationProviderId: StringNullableWithAggregatesFilter
  canUseAsRecovery: BoolNullableWithAggregatesFilter
  code: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [CodeScalarWhereWithAggregatesInput!]
  OR: [CodeScalarWhereWithAggregatesInput!]
  updatedAt: DateTimeWithAggregatesFilter
}

input CodeUpdateInput {
  AuthenticationProvider: AuthenticationProviderUpdateOneWithoutCodepasswordNestedInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CodeUpdateManyMutationInput {
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CodeUpdateOneWithoutAuthenticationProviderNestedInput {
  connect: CodeWhereUniqueInput
  connectOrCreate: CodeCreateOrConnectWithoutAuthenticationProviderInput
  create: CodeCreateWithoutAuthenticationProviderInput
  delete: Boolean
  disconnect: Boolean
  update: CodeUpdateWithoutAuthenticationProviderInput
  upsert: CodeUpsertWithoutAuthenticationProviderInput
}

input CodeUpdateWithoutAuthenticationProviderInput {
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CodeUpsertWithoutAuthenticationProviderInput {
  create: CodeCreateWithoutAuthenticationProviderInput!
  update: CodeUpdateWithoutAuthenticationProviderInput!
}

input CodeWhereInput {
  AND: [CodeWhereInput!]
  authenitcationProviderId: StringNullableFilter
  AuthenticationProvider: AuthenticationProviderWhereInput
  canUseAsRecovery: BoolNullableFilter
  code: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [CodeWhereInput!]
  OR: [CodeWhereInput!]
  updatedAt: DateTimeFilter
}

input CodeWhereUniqueInput {
  authenitcationProviderId: String
  id: String
}

input ContactInput {
  name: String
  number: String
}

type Coords {
  latitude: Float
  longitude: Float
}

input CoordsInput {
  latitude: Float!
  longitude: Float!
}

type CountryResponseObject {
  currency: String!
  flag: String!
  isoCode: String!
  latitude: String!
  longitude: String!
  name: String!
  phonecode: String!
}

input CreatePersonalDataInput {
  address: String!
  birthday: DateTime!
  EmailInput: EmailInput
  fullname: String
  password: String!
  PhoneInput: PhoneInput
  PrivacyPolicyId: ID
  ServicesId: ID
  username: String!
}

input CreateVenueDataInput {
  address: String!
  birthday: DateTime
  capacity: String!
  contacts: [VenueContactInput!]!
  description: String
  EmailInput: EmailInput
  established: DateTime!
  ownername: String!
  password: String!
  PhoneInput: PhoneInput
  photos: PhotoCreateManyProfileInputEnvelope
  PrivacyPolicyId: ID
  ServicesId: ID
  venuelocalname: String!
  venuename: String!
  venuetypes: [String!]
  venueusername: String!
}

type Credentials {
  AuthenticationProvider: AuthenticationProvider
  authenticationProviderId: String
  createdtAt: DateTime!
  id: ID!
  LegalAgreement(cursor: LegalAgreementWhereUniqueInput, distinct: [LegalAgreementScalarFieldEnum!], orderBy: [LegalAgreementOrderByWithRelationInput!], skip: Int, take: Int, where: LegalAgreementWhereInput): [LegalAgreement!]!
  Profile: Profile!
  profileId: String!
  updatedAt: DateTime!
}

input CredentialsCountOrderByAggregateInput {
  authenticationProviderId: SortOrder
  createdtAt: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input CredentialsCreateInput {
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutCredentialsInput
  createdtAt: DateTime
  id: String
  LegalAgreement: LegalAgreementCreateNestedManyWithoutCredentialsInput
  Profile: ProfileCreateNestedOneWithoutCredentialsInput!
  updatedAt: DateTime
}

input CredentialsCreateManyInput {
  authenticationProviderId: String
  createdtAt: DateTime
  id: String
  profileId: String!
  updatedAt: DateTime
}

input CredentialsCreateNestedOneWithoutAuthenticationProviderInput {
  connect: CredentialsWhereUniqueInput
  connectOrCreate: CredentialsCreateOrConnectWithoutAuthenticationProviderInput
  create: CredentialsCreateWithoutAuthenticationProviderInput
}

input CredentialsCreateNestedOneWithoutLegalAgreementInput {
  connect: CredentialsWhereUniqueInput
  connectOrCreate: CredentialsCreateOrConnectWithoutLegalAgreementInput
  create: CredentialsCreateWithoutLegalAgreementInput
}

input CredentialsCreateNestedOneWithoutProfileInput {
  connect: CredentialsWhereUniqueInput
  connectOrCreate: CredentialsCreateOrConnectWithoutProfileInput
  create: CredentialsCreateWithoutProfileInput
}

input CredentialsCreateOrConnectWithoutAuthenticationProviderInput {
  create: CredentialsCreateWithoutAuthenticationProviderInput!
  where: CredentialsWhereUniqueInput!
}

input CredentialsCreateOrConnectWithoutLegalAgreementInput {
  create: CredentialsCreateWithoutLegalAgreementInput!
  where: CredentialsWhereUniqueInput!
}

input CredentialsCreateOrConnectWithoutProfileInput {
  create: CredentialsCreateWithoutProfileInput!
  where: CredentialsWhereUniqueInput!
}

input CredentialsCreateWithoutAuthenticationProviderInput {
  createdtAt: DateTime
  id: String
  LegalAgreement: LegalAgreementCreateNestedManyWithoutCredentialsInput
  Profile: ProfileCreateNestedOneWithoutCredentialsInput!
  updatedAt: DateTime
}

input CredentialsCreateWithoutLegalAgreementInput {
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutCredentialsInput
  createdtAt: DateTime
  id: String
  Profile: ProfileCreateNestedOneWithoutCredentialsInput!
  updatedAt: DateTime
}

input CredentialsCreateWithoutProfileInput {
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutCredentialsInput
  createdtAt: DateTime
  id: String
  LegalAgreement: LegalAgreementCreateNestedManyWithoutCredentialsInput
  updatedAt: DateTime
}

input CredentialsMaxOrderByAggregateInput {
  authenticationProviderId: SortOrder
  createdtAt: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input CredentialsMinOrderByAggregateInput {
  authenticationProviderId: SortOrder
  createdtAt: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input CredentialsOrderByWithAggregationInput {
  _count: CredentialsCountOrderByAggregateInput
  _max: CredentialsMaxOrderByAggregateInput
  _min: CredentialsMinOrderByAggregateInput
  authenticationProviderId: SortOrder
  createdtAt: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input CredentialsOrderByWithRelationInput {
  AuthenticationProvider: AuthenticationProviderOrderByWithRelationInput
  authenticationProviderId: SortOrder
  createdtAt: SortOrder
  id: SortOrder
  LegalAgreement: LegalAgreementOrderByRelationAggregateInput
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  updatedAt: SortOrder
}

input CredentialsRelationFilter {
  is: CredentialsWhereInput
  isNot: CredentialsWhereInput
}

enum CredentialsScalarFieldEnum {
  authenticationProviderId
  createdtAt
  id
  profileId
  updatedAt
}

input CredentialsScalarWhereWithAggregatesInput {
  AND: [CredentialsScalarWhereWithAggregatesInput!]
  authenticationProviderId: StringNullableWithAggregatesFilter
  createdtAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [CredentialsScalarWhereWithAggregatesInput!]
  OR: [CredentialsScalarWhereWithAggregatesInput!]
  profileId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input CredentialsUpdateInput {
  AuthenticationProvider: AuthenticationProviderUpdateOneWithoutCredentialsNestedInput
  createdtAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  LegalAgreement: LegalAgreementUpdateManyWithoutCredentialsNestedInput
  Profile: ProfileUpdateOneRequiredWithoutCredentialsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CredentialsUpdateManyMutationInput {
  createdtAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CredentialsUpdateOneWithoutAuthenticationProviderNestedInput {
  connect: CredentialsWhereUniqueInput
  connectOrCreate: CredentialsCreateOrConnectWithoutAuthenticationProviderInput
  create: CredentialsCreateWithoutAuthenticationProviderInput
  delete: Boolean
  disconnect: Boolean
  update: CredentialsUpdateWithoutAuthenticationProviderInput
  upsert: CredentialsUpsertWithoutAuthenticationProviderInput
}

input CredentialsUpdateOneWithoutLegalAgreementNestedInput {
  connect: CredentialsWhereUniqueInput
  connectOrCreate: CredentialsCreateOrConnectWithoutLegalAgreementInput
  create: CredentialsCreateWithoutLegalAgreementInput
  delete: Boolean
  disconnect: Boolean
  update: CredentialsUpdateWithoutLegalAgreementInput
  upsert: CredentialsUpsertWithoutLegalAgreementInput
}

input CredentialsUpdateOneWithoutProfileNestedInput {
  connect: CredentialsWhereUniqueInput
  connectOrCreate: CredentialsCreateOrConnectWithoutProfileInput
  create: CredentialsCreateWithoutProfileInput
  delete: Boolean
  disconnect: Boolean
  update: CredentialsUpdateWithoutProfileInput
  upsert: CredentialsUpsertWithoutProfileInput
}

input CredentialsUpdateWithoutAuthenticationProviderInput {
  createdtAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  LegalAgreement: LegalAgreementUpdateManyWithoutCredentialsNestedInput
  Profile: ProfileUpdateOneRequiredWithoutCredentialsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CredentialsUpdateWithoutLegalAgreementInput {
  AuthenticationProvider: AuthenticationProviderUpdateOneWithoutCredentialsNestedInput
  createdtAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutCredentialsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CredentialsUpdateWithoutProfileInput {
  AuthenticationProvider: AuthenticationProviderUpdateOneWithoutCredentialsNestedInput
  createdtAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  LegalAgreement: LegalAgreementUpdateManyWithoutCredentialsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CredentialsUpsertWithoutAuthenticationProviderInput {
  create: CredentialsCreateWithoutAuthenticationProviderInput!
  update: CredentialsUpdateWithoutAuthenticationProviderInput!
}

input CredentialsUpsertWithoutLegalAgreementInput {
  create: CredentialsCreateWithoutLegalAgreementInput!
  update: CredentialsUpdateWithoutLegalAgreementInput!
}

input CredentialsUpsertWithoutProfileInput {
  create: CredentialsCreateWithoutProfileInput!
  update: CredentialsUpdateWithoutProfileInput!
}

input CredentialsWhereInput {
  AND: [CredentialsWhereInput!]
  AuthenticationProvider: AuthenticationProviderWhereInput
  authenticationProviderId: StringNullableFilter
  createdtAt: DateTimeFilter
  id: StringFilter
  LegalAgreement: LegalAgreementListRelationFilter
  NOT: [CredentialsWhereInput!]
  OR: [CredentialsWhereInput!]
  Profile: ProfileWhereInput
  profileId: StringFilter
  updatedAt: DateTimeFilter
}

input CredentialsWhereUniqueInput {
  authenticationProviderId: String
  id: String
  profileId: String
}

input CustomCodeWhereInput {
  Authenticators: Authenticators
}

input CustomProfileWhereInput {
  email: String
  Phone: PhoneInput
  username: String
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

type DetailInformation {
  capacity: Int
  description: String
  established: DateTime
  id: ID!
  Profile: Profile!
  profileId: String!
  Tags(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
}

input DetailInformationAvgOrderByAggregateInput {
  capacity: SortOrder
}

input DetailInformationCountOrderByAggregateInput {
  capacity: SortOrder
  description: SortOrder
  established: SortOrder
  id: SortOrder
  profileId: SortOrder
}

input DetailInformationCreateInput {
  capacity: Int
  description: String
  established: DateTime
  id: String
  Profile: ProfileCreateNestedOneWithoutDetailInformationInput!
  Tags: TagCreateNestedManyWithoutDetailInformationInput
}

input DetailInformationCreateManyInput {
  capacity: Int
  description: String
  established: DateTime
  id: String
  profileId: String!
}

input DetailInformationCreateNestedManyWithoutTagsInput {
  connect: [DetailInformationWhereUniqueInput!]
  connectOrCreate: [DetailInformationCreateOrConnectWithoutTagsInput!]
  create: DetailInformationCreateWithoutTagsInput
}

input DetailInformationCreateNestedOneWithoutProfileInput {
  connect: DetailInformationWhereUniqueInput
  connectOrCreate: DetailInformationCreateOrConnectWithoutProfileInput
  create: DetailInformationCreateWithoutProfileInput
}

input DetailInformationCreateOrConnectWithoutProfileInput {
  create: DetailInformationCreateWithoutProfileInput!
  where: DetailInformationWhereUniqueInput!
}

input DetailInformationCreateOrConnectWithoutTagsInput {
  create: DetailInformationCreateWithoutTagsInput!
  where: DetailInformationWhereUniqueInput!
}

input DetailInformationCreateWithoutProfileInput {
  capacity: Int
  description: String
  established: DateTime
  id: String
  Tags: TagCreateNestedManyWithoutDetailInformationInput
}

input DetailInformationCreateWithoutTagsInput {
  capacity: Int
  description: String
  established: DateTime
  id: String
  Profile: ProfileCreateNestedOneWithoutDetailInformationInput!
}

input DetailInformationListRelationFilter {
  every: DetailInformationWhereInput
  none: DetailInformationWhereInput
  some: DetailInformationWhereInput
}

input DetailInformationMaxOrderByAggregateInput {
  capacity: SortOrder
  description: SortOrder
  established: SortOrder
  id: SortOrder
  profileId: SortOrder
}

input DetailInformationMinOrderByAggregateInput {
  capacity: SortOrder
  description: SortOrder
  established: SortOrder
  id: SortOrder
  profileId: SortOrder
}

input DetailInformationOrderByRelationAggregateInput {
  _count: SortOrder
}

input DetailInformationOrderByWithAggregationInput {
  _avg: DetailInformationAvgOrderByAggregateInput
  _count: DetailInformationCountOrderByAggregateInput
  _max: DetailInformationMaxOrderByAggregateInput
  _min: DetailInformationMinOrderByAggregateInput
  _sum: DetailInformationSumOrderByAggregateInput
  capacity: SortOrder
  description: SortOrder
  established: SortOrder
  id: SortOrder
  profileId: SortOrder
}

input DetailInformationOrderByWithRelationInput {
  capacity: SortOrder
  description: SortOrder
  established: SortOrder
  id: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  Tags: TagOrderByRelationAggregateInput
}

input DetailInformationRelationFilter {
  is: DetailInformationWhereInput
  isNot: DetailInformationWhereInput
}

enum DetailInformationScalarFieldEnum {
  capacity
  description
  established
  id
  profileId
}

input DetailInformationScalarWhereInput {
  AND: [DetailInformationScalarWhereInput!]
  capacity: IntNullableFilter
  description: StringNullableFilter
  established: DateTimeNullableFilter
  id: StringFilter
  NOT: [DetailInformationScalarWhereInput!]
  OR: [DetailInformationScalarWhereInput!]
  profileId: StringFilter
}

input DetailInformationScalarWhereWithAggregatesInput {
  AND: [DetailInformationScalarWhereWithAggregatesInput!]
  capacity: IntNullableWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  established: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [DetailInformationScalarWhereWithAggregatesInput!]
  OR: [DetailInformationScalarWhereWithAggregatesInput!]
  profileId: StringWithAggregatesFilter
}

input DetailInformationSumOrderByAggregateInput {
  capacity: SortOrder
}

input DetailInformationUpdateInput {
  capacity: NullableIntFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  established: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutDetailInformationNestedInput
  Tags: TagUpdateManyWithoutDetailInformationNestedInput
}

input DetailInformationUpdateManyMutationInput {
  capacity: NullableIntFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  established: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input DetailInformationUpdateManyWithoutTagsNestedInput {
  connect: [DetailInformationWhereUniqueInput!]
  connectOrCreate: [DetailInformationCreateOrConnectWithoutTagsInput!]
  create: DetailInformationCreateWithoutTagsInput
  delete: [DetailInformationWhereUniqueInput!]
  deleteMany: [DetailInformationScalarWhereInput!]
  disconnect: [DetailInformationWhereUniqueInput!]
  set: [DetailInformationWhereUniqueInput!]
  update: [DetailInformationUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [DetailInformationUpdateManyWithWhereWithoutTagsInput!]
  upsert: [DetailInformationUpsertWithWhereUniqueWithoutTagsInput!]
}

input DetailInformationUpdateManyWithWhereWithoutTagsInput {
  data: DetailInformationUpdateManyMutationInput!
  where: DetailInformationScalarWhereInput!
}

input DetailInformationUpdateOneWithoutProfileNestedInput {
  connect: DetailInformationWhereUniqueInput
  connectOrCreate: DetailInformationCreateOrConnectWithoutProfileInput
  create: DetailInformationCreateWithoutProfileInput
  delete: Boolean
  disconnect: Boolean
  update: DetailInformationUpdateWithoutProfileInput
  upsert: DetailInformationUpsertWithoutProfileInput
}

input DetailInformationUpdateWithoutProfileInput {
  capacity: NullableIntFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  established: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Tags: TagUpdateManyWithoutDetailInformationNestedInput
}

input DetailInformationUpdateWithoutTagsInput {
  capacity: NullableIntFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  established: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutDetailInformationNestedInput
}

input DetailInformationUpdateWithWhereUniqueWithoutTagsInput {
  data: DetailInformationUpdateWithoutTagsInput!
  where: DetailInformationWhereUniqueInput!
}

input DetailInformationUpsertWithoutProfileInput {
  create: DetailInformationCreateWithoutProfileInput!
  update: DetailInformationUpdateWithoutProfileInput!
}

input DetailInformationUpsertWithWhereUniqueWithoutTagsInput {
  create: DetailInformationCreateWithoutTagsInput!
  update: DetailInformationUpdateWithoutTagsInput!
  where: DetailInformationWhereUniqueInput!
}

input DetailInformationWhereInput {
  AND: [DetailInformationWhereInput!]
  capacity: IntNullableFilter
  description: StringNullableFilter
  established: DateTimeNullableFilter
  id: StringFilter
  NOT: [DetailInformationWhereInput!]
  OR: [DetailInformationWhereInput!]
  Profile: ProfileWhereInput
  profileId: StringFilter
  Tags: TagListRelationFilter
}

input DetailInformationWhereUniqueInput {
  id: String
  profileId: String
}

type Device {
  createdAt: DateTime
  DeviceManager: DeviceManager!
  deviceManagerId: String!
  deviceType: String
  id: ID!
  PushToken: PushToken
  pushTokenId: String
  updatedAt: DateTime
}

input DeviceCountOrderByAggregateInput {
  createdAt: SortOrder
  deviceManagerId: SortOrder
  deviceType: SortOrder
  id: SortOrder
  pushTokenId: SortOrder
  updatedAt: SortOrder
}

input DeviceCreateInput {
  createdAt: DateTime
  DeviceManager: DeviceManagerCreateNestedOneWithoutDeviceInput!
  deviceType: String
  id: String
  PushToken: PushTokenCreateNestedOneWithoutDeviceInput
  updatedAt: DateTime
}

input DeviceCreateManyInput {
  createdAt: DateTime
  deviceManagerId: String!
  deviceType: String
  id: String
  pushTokenId: String
  updatedAt: DateTime
}

input DeviceCreateNestedOneWithoutDeviceManagerInput {
  connect: DeviceWhereUniqueInput
  connectOrCreate: DeviceCreateOrConnectWithoutDeviceManagerInput
  create: DeviceCreateWithoutDeviceManagerInput
}

input DeviceCreateNestedOneWithoutPushTokenInput {
  connect: DeviceWhereUniqueInput
  connectOrCreate: DeviceCreateOrConnectWithoutPushTokenInput
  create: DeviceCreateWithoutPushTokenInput
}

input DeviceCreateOrConnectWithoutDeviceManagerInput {
  create: DeviceCreateWithoutDeviceManagerInput!
  where: DeviceWhereUniqueInput!
}

input DeviceCreateOrConnectWithoutPushTokenInput {
  create: DeviceCreateWithoutPushTokenInput!
  where: DeviceWhereUniqueInput!
}

input DeviceCreateWithoutDeviceManagerInput {
  createdAt: DateTime
  deviceType: String
  id: String
  PushToken: PushTokenCreateNestedOneWithoutDeviceInput
  updatedAt: DateTime
}

input DeviceCreateWithoutPushTokenInput {
  createdAt: DateTime
  DeviceManager: DeviceManagerCreateNestedOneWithoutDeviceInput!
  deviceType: String
  id: String
  updatedAt: DateTime
}

type DeviceManager {
  createdAt: DateTime!
  Device: Device
  DeviceProfile(cursor: DeviceProfileWhereUniqueInput, distinct: [DeviceProfileScalarFieldEnum!], orderBy: [DeviceProfileOrderByWithRelationInput!], skip: Int, take: Int, where: DeviceProfileWhereInput): [ClientDeviceProfile!]!
  id: ID!
  updatedAt: DateTime!
}

input DeviceManagerCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input DeviceManagerCreateInput {
  createdAt: DateTime
  Device: DeviceCreateNestedOneWithoutDeviceManagerInput
  DeviceProfile: DeviceProfileCreateNestedManyWithoutDeviceManagerInput
  id: String
  updatedAt: DateTime
}

input DeviceManagerCreateManyInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input DeviceManagerCreateNestedOneWithoutDeviceInput {
  connect: DeviceManagerWhereUniqueInput
  connectOrCreate: DeviceManagerCreateOrConnectWithoutDeviceInput
  create: DeviceManagerCreateWithoutDeviceInput
}

input DeviceManagerCreateNestedOneWithoutDeviceProfileInput {
  connect: DeviceManagerWhereUniqueInput
  connectOrCreate: DeviceManagerCreateOrConnectWithoutDeviceProfileInput
  create: DeviceManagerCreateWithoutDeviceProfileInput
}

input DeviceManagerCreateOrConnectWithoutDeviceInput {
  create: DeviceManagerCreateWithoutDeviceInput!
  where: DeviceManagerWhereUniqueInput!
}

input DeviceManagerCreateOrConnectWithoutDeviceProfileInput {
  create: DeviceManagerCreateWithoutDeviceProfileInput!
  where: DeviceManagerWhereUniqueInput!
}

input DeviceManagerCreateWithoutDeviceInput {
  createdAt: DateTime
  DeviceProfile: DeviceProfileCreateNestedManyWithoutDeviceManagerInput
  id: String
  updatedAt: DateTime
}

input DeviceManagerCreateWithoutDeviceProfileInput {
  createdAt: DateTime
  Device: DeviceCreateNestedOneWithoutDeviceManagerInput
  id: String
  updatedAt: DateTime
}

type DeviceManagerDeviceProfiles {
  DeviceProfiles: [ClientDeviceProfile!]!
}

union DeviceManagerDeviceProfilesResponseUnion = DeviceManagerDeviceProfiles | ErrorManaging

input DeviceManagerMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input DeviceManagerMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input DeviceManagerOrderByWithAggregationInput {
  _count: DeviceManagerCountOrderByAggregateInput
  _max: DeviceManagerMaxOrderByAggregateInput
  _min: DeviceManagerMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input DeviceManagerOrderByWithRelationInput {
  createdAt: SortOrder
  Device: DeviceOrderByWithRelationInput
  DeviceProfile: DeviceProfileOrderByRelationAggregateInput
  id: SortOrder
  updatedAt: SortOrder
}

input DeviceManagerRelationFilter {
  is: DeviceManagerWhereInput
  isNot: DeviceManagerWhereInput
}

enum DeviceManagerScalarFieldEnum {
  createdAt
  id
  updatedAt
}

input DeviceManagerScalarWhereWithAggregatesInput {
  AND: [DeviceManagerScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [DeviceManagerScalarWhereWithAggregatesInput!]
  OR: [DeviceManagerScalarWhereWithAggregatesInput!]
  updatedAt: DateTimeWithAggregatesFilter
}

input DeviceManagerUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateOneWithoutDeviceManagerNestedInput
  DeviceProfile: DeviceProfileUpdateManyWithoutDeviceManagerNestedInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceManagerUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceManagerUpdateOneRequiredWithoutDeviceNestedInput {
  connect: DeviceManagerWhereUniqueInput
  connectOrCreate: DeviceManagerCreateOrConnectWithoutDeviceInput
  create: DeviceManagerCreateWithoutDeviceInput
  update: DeviceManagerUpdateWithoutDeviceInput
  upsert: DeviceManagerUpsertWithoutDeviceInput
}

input DeviceManagerUpdateOneRequiredWithoutDeviceProfileNestedInput {
  connect: DeviceManagerWhereUniqueInput
  connectOrCreate: DeviceManagerCreateOrConnectWithoutDeviceProfileInput
  create: DeviceManagerCreateWithoutDeviceProfileInput
  update: DeviceManagerUpdateWithoutDeviceProfileInput
  upsert: DeviceManagerUpsertWithoutDeviceProfileInput
}

input DeviceManagerUpdateWithoutDeviceInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  DeviceProfile: DeviceProfileUpdateManyWithoutDeviceManagerNestedInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceManagerUpdateWithoutDeviceProfileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateOneWithoutDeviceManagerNestedInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceManagerUpsertWithoutDeviceInput {
  create: DeviceManagerCreateWithoutDeviceInput!
  update: DeviceManagerUpdateWithoutDeviceInput!
}

input DeviceManagerUpsertWithoutDeviceProfileInput {
  create: DeviceManagerCreateWithoutDeviceProfileInput!
  update: DeviceManagerUpdateWithoutDeviceProfileInput!
}

input DeviceManagerWhereInput {
  AND: [DeviceManagerWhereInput!]
  createdAt: DateTimeFilter
  Device: DeviceWhereInput
  DeviceProfile: DeviceProfileListRelationFilter
  id: StringFilter
  NOT: [DeviceManagerWhereInput!]
  OR: [DeviceManagerWhereInput!]
  updatedAt: DateTimeFilter
}

input DeviceManagerWhereUniqueInput {
  id: String
}

input DeviceMaxOrderByAggregateInput {
  createdAt: SortOrder
  deviceManagerId: SortOrder
  deviceType: SortOrder
  id: SortOrder
  pushTokenId: SortOrder
  updatedAt: SortOrder
}

input DeviceMinOrderByAggregateInput {
  createdAt: SortOrder
  deviceManagerId: SortOrder
  deviceType: SortOrder
  id: SortOrder
  pushTokenId: SortOrder
  updatedAt: SortOrder
}

input DeviceOrderByWithAggregationInput {
  _count: DeviceCountOrderByAggregateInput
  _max: DeviceMaxOrderByAggregateInput
  _min: DeviceMinOrderByAggregateInput
  createdAt: SortOrder
  deviceManagerId: SortOrder
  deviceType: SortOrder
  id: SortOrder
  pushTokenId: SortOrder
  updatedAt: SortOrder
}

input DeviceOrderByWithRelationInput {
  createdAt: SortOrder
  DeviceManager: DeviceManagerOrderByWithRelationInput
  deviceManagerId: SortOrder
  deviceType: SortOrder
  id: SortOrder
  PushToken: PushTokenOrderByWithRelationInput
  pushTokenId: SortOrder
  updatedAt: SortOrder
}

input DeviceProfileCountOrderByAggregateInput {
  accesstoken: SortOrder
  AppType: SortOrder
  createdAt: SortOrder
  deviceManagerId: SortOrder
  id: SortOrder
  isActive: SortOrder
  profileId: SortOrder
  ProfileType: SortOrder
  updatedAt: SortOrder
}

input DeviceProfileCreateInput {
  accesstoken: String
  AppType: AppType
  createdAt: DateTime
  DeviceManager: DeviceManagerCreateNestedOneWithoutDeviceProfileInput!
  id: String
  isActive: Boolean!
  profileId: String
  ProfileType: ProfileType
  RefreshToken: RefreshTokenCreateNestedOneWithoutDeviceProfileInput
  updatedAt: DateTime
}

input DeviceProfileCreateManyDeviceManagerInput {
  accesstoken: String
  AppType: AppType
  createdAt: DateTime
  id: String
  isActive: Boolean!
  profileId: String
  ProfileType: ProfileType
  updatedAt: DateTime
}

input DeviceProfileCreateManyDeviceManagerInputEnvelope {
  data: [DeviceProfileCreateManyDeviceManagerInput!]!
  skipDuplicates: Boolean
}

input DeviceProfileCreateManyInput {
  accesstoken: String
  AppType: AppType
  createdAt: DateTime
  deviceManagerId: String!
  id: String
  isActive: Boolean!
  profileId: String
  ProfileType: ProfileType
  updatedAt: DateTime
}

input DeviceProfileCreateNestedManyWithoutDeviceManagerInput {
  connect: [DeviceProfileWhereUniqueInput!]
  connectOrCreate: [DeviceProfileCreateOrConnectWithoutDeviceManagerInput!]
  create: DeviceProfileCreateWithoutDeviceManagerInput
  createMany: DeviceProfileCreateManyDeviceManagerInputEnvelope
}

input DeviceProfileCreateNestedOneWithoutRefreshTokenInput {
  connect: DeviceProfileWhereUniqueInput
  connectOrCreate: DeviceProfileCreateOrConnectWithoutRefreshTokenInput
  create: DeviceProfileCreateWithoutRefreshTokenInput
}

input DeviceProfileCreateOrConnectWithoutDeviceManagerInput {
  create: DeviceProfileCreateWithoutDeviceManagerInput!
  where: DeviceProfileWhereUniqueInput!
}

input DeviceProfileCreateOrConnectWithoutRefreshTokenInput {
  create: DeviceProfileCreateWithoutRefreshTokenInput!
  where: DeviceProfileWhereUniqueInput!
}

input DeviceProfileCreateWithoutDeviceManagerInput {
  accesstoken: String
  AppType: AppType
  createdAt: DateTime
  id: String
  isActive: Boolean!
  profileId: String
  ProfileType: ProfileType
  RefreshToken: RefreshTokenCreateNestedOneWithoutDeviceProfileInput
  updatedAt: DateTime
}

input DeviceProfileCreateWithoutRefreshTokenInput {
  accesstoken: String
  AppType: AppType
  createdAt: DateTime
  DeviceManager: DeviceManagerCreateNestedOneWithoutDeviceProfileInput!
  id: String
  isActive: Boolean!
  profileId: String
  ProfileType: ProfileType
  updatedAt: DateTime
}

input DeviceProfileListRelationFilter {
  every: DeviceProfileWhereInput
  none: DeviceProfileWhereInput
  some: DeviceProfileWhereInput
}

input DeviceProfileMaxOrderByAggregateInput {
  accesstoken: SortOrder
  AppType: SortOrder
  createdAt: SortOrder
  deviceManagerId: SortOrder
  id: SortOrder
  isActive: SortOrder
  profileId: SortOrder
  ProfileType: SortOrder
  updatedAt: SortOrder
}

input DeviceProfileMinOrderByAggregateInput {
  accesstoken: SortOrder
  AppType: SortOrder
  createdAt: SortOrder
  deviceManagerId: SortOrder
  id: SortOrder
  isActive: SortOrder
  profileId: SortOrder
  ProfileType: SortOrder
  updatedAt: SortOrder
}

input DeviceProfileOrderByRelationAggregateInput {
  _count: SortOrder
}

input DeviceProfileOrderByWithAggregationInput {
  _count: DeviceProfileCountOrderByAggregateInput
  _max: DeviceProfileMaxOrderByAggregateInput
  _min: DeviceProfileMinOrderByAggregateInput
  accesstoken: SortOrder
  AppType: SortOrder
  createdAt: SortOrder
  deviceManagerId: SortOrder
  id: SortOrder
  isActive: SortOrder
  profileId: SortOrder
  ProfileType: SortOrder
  updatedAt: SortOrder
}

input DeviceProfileOrderByWithRelationInput {
  accesstoken: SortOrder
  AppType: SortOrder
  createdAt: SortOrder
  DeviceManager: DeviceManagerOrderByWithRelationInput
  deviceManagerId: SortOrder
  id: SortOrder
  isActive: SortOrder
  profileId: SortOrder
  ProfileType: SortOrder
  RefreshToken: RefreshTokenOrderByWithRelationInput
  updatedAt: SortOrder
}

input DeviceProfileRelationFilter {
  is: DeviceProfileWhereInput
  isNot: DeviceProfileWhereInput
}

enum DeviceProfileScalarFieldEnum {
  accesstoken
  AppType
  createdAt
  deviceManagerId
  id
  isActive
  profileId
  ProfileType
  updatedAt
}

input DeviceProfileScalarWhereInput {
  accesstoken: StringNullableFilter
  AND: [DeviceProfileScalarWhereInput!]
  AppType: EnumAppTypeNullableFilter
  createdAt: DateTimeFilter
  deviceManagerId: StringFilter
  id: StringFilter
  isActive: BoolFilter
  NOT: [DeviceProfileScalarWhereInput!]
  OR: [DeviceProfileScalarWhereInput!]
  profileId: StringNullableFilter
  ProfileType: EnumProfileTypeNullableFilter
  updatedAt: DateTimeFilter
}

input DeviceProfileScalarWhereWithAggregatesInput {
  accesstoken: StringNullableWithAggregatesFilter
  AND: [DeviceProfileScalarWhereWithAggregatesInput!]
  AppType: EnumAppTypeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deviceManagerId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  isActive: BoolWithAggregatesFilter
  NOT: [DeviceProfileScalarWhereWithAggregatesInput!]
  OR: [DeviceProfileScalarWhereWithAggregatesInput!]
  profileId: StringNullableWithAggregatesFilter
  ProfileType: EnumProfileTypeNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input DeviceProfileUpdateInput {
  accesstoken: NullableStringFieldUpdateOperationsInput
  AppType: NullableEnumAppTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  DeviceManager: DeviceManagerUpdateOneRequiredWithoutDeviceProfileNestedInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  profileId: NullableStringFieldUpdateOperationsInput
  ProfileType: NullableEnumProfileTypeFieldUpdateOperationsInput
  RefreshToken: RefreshTokenUpdateOneWithoutDeviceProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceProfileUpdateManyMutationInput {
  accesstoken: NullableStringFieldUpdateOperationsInput
  AppType: NullableEnumAppTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  profileId: NullableStringFieldUpdateOperationsInput
  ProfileType: NullableEnumProfileTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceProfileUpdateManyWithoutDeviceManagerNestedInput {
  connect: [DeviceProfileWhereUniqueInput!]
  connectOrCreate: [DeviceProfileCreateOrConnectWithoutDeviceManagerInput!]
  create: DeviceProfileCreateWithoutDeviceManagerInput
  createMany: DeviceProfileCreateManyDeviceManagerInputEnvelope
  delete: [DeviceProfileWhereUniqueInput!]
  deleteMany: [DeviceProfileScalarWhereInput!]
  disconnect: [DeviceProfileWhereUniqueInput!]
  set: [DeviceProfileWhereUniqueInput!]
  update: [DeviceProfileUpdateWithWhereUniqueWithoutDeviceManagerInput!]
  updateMany: [DeviceProfileUpdateManyWithWhereWithoutDeviceManagerInput!]
  upsert: [DeviceProfileUpsertWithWhereUniqueWithoutDeviceManagerInput!]
}

input DeviceProfileUpdateManyWithWhereWithoutDeviceManagerInput {
  data: DeviceProfileUpdateManyMutationInput!
  where: DeviceProfileScalarWhereInput!
}

input DeviceProfileUpdateOneWithoutRefreshTokenNestedInput {
  connect: DeviceProfileWhereUniqueInput
  connectOrCreate: DeviceProfileCreateOrConnectWithoutRefreshTokenInput
  create: DeviceProfileCreateWithoutRefreshTokenInput
  delete: Boolean
  disconnect: Boolean
  update: DeviceProfileUpdateWithoutRefreshTokenInput
  upsert: DeviceProfileUpsertWithoutRefreshTokenInput
}

input DeviceProfileUpdateWithoutDeviceManagerInput {
  accesstoken: NullableStringFieldUpdateOperationsInput
  AppType: NullableEnumAppTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  profileId: NullableStringFieldUpdateOperationsInput
  ProfileType: NullableEnumProfileTypeFieldUpdateOperationsInput
  RefreshToken: RefreshTokenUpdateOneWithoutDeviceProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceProfileUpdateWithoutRefreshTokenInput {
  accesstoken: NullableStringFieldUpdateOperationsInput
  AppType: NullableEnumAppTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  DeviceManager: DeviceManagerUpdateOneRequiredWithoutDeviceProfileNestedInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  profileId: NullableStringFieldUpdateOperationsInput
  ProfileType: NullableEnumProfileTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceProfileUpdateWithWhereUniqueWithoutDeviceManagerInput {
  data: DeviceProfileUpdateWithoutDeviceManagerInput!
  where: DeviceProfileWhereUniqueInput!
}

input DeviceProfileUpsertWithoutRefreshTokenInput {
  create: DeviceProfileCreateWithoutRefreshTokenInput!
  update: DeviceProfileUpdateWithoutRefreshTokenInput!
}

input DeviceProfileUpsertWithWhereUniqueWithoutDeviceManagerInput {
  create: DeviceProfileCreateWithoutDeviceManagerInput!
  update: DeviceProfileUpdateWithoutDeviceManagerInput!
  where: DeviceProfileWhereUniqueInput!
}

input DeviceProfileWhereInput {
  accesstoken: StringNullableFilter
  AND: [DeviceProfileWhereInput!]
  AppType: EnumAppTypeNullableFilter
  createdAt: DateTimeFilter
  DeviceManager: DeviceManagerWhereInput
  deviceManagerId: StringFilter
  id: StringFilter
  isActive: BoolFilter
  NOT: [DeviceProfileWhereInput!]
  OR: [DeviceProfileWhereInput!]
  profileId: StringNullableFilter
  ProfileType: EnumProfileTypeNullableFilter
  RefreshToken: RefreshTokenWhereInput
  updatedAt: DateTimeFilter
}

input DeviceProfileWhereUniqueInput {
  id: String
}

input DeviceRelationFilter {
  is: DeviceWhereInput
  isNot: DeviceWhereInput
}

enum DeviceScalarFieldEnum {
  createdAt
  deviceManagerId
  deviceType
  id
  pushTokenId
  updatedAt
}

input DeviceScalarWhereWithAggregatesInput {
  AND: [DeviceScalarWhereWithAggregatesInput!]
  createdAt: DateTimeNullableWithAggregatesFilter
  deviceManagerId: StringWithAggregatesFilter
  deviceType: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [DeviceScalarWhereWithAggregatesInput!]
  OR: [DeviceScalarWhereWithAggregatesInput!]
  pushTokenId: StringNullableWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input DeviceUpdateInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  DeviceManager: DeviceManagerUpdateOneRequiredWithoutDeviceNestedInput
  deviceType: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  PushToken: PushTokenUpdateOneWithoutDeviceNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input DeviceUpdateManyMutationInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  deviceType: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input DeviceUpdateOneWithoutDeviceManagerNestedInput {
  connect: DeviceWhereUniqueInput
  connectOrCreate: DeviceCreateOrConnectWithoutDeviceManagerInput
  create: DeviceCreateWithoutDeviceManagerInput
  delete: Boolean
  disconnect: Boolean
  update: DeviceUpdateWithoutDeviceManagerInput
  upsert: DeviceUpsertWithoutDeviceManagerInput
}

input DeviceUpdateOneWithoutPushTokenNestedInput {
  connect: DeviceWhereUniqueInput
  connectOrCreate: DeviceCreateOrConnectWithoutPushTokenInput
  create: DeviceCreateWithoutPushTokenInput
  delete: Boolean
  disconnect: Boolean
  update: DeviceUpdateWithoutPushTokenInput
  upsert: DeviceUpsertWithoutPushTokenInput
}

input DeviceUpdateWithoutDeviceManagerInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  deviceType: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  PushToken: PushTokenUpdateOneWithoutDeviceNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input DeviceUpdateWithoutPushTokenInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  DeviceManager: DeviceManagerUpdateOneRequiredWithoutDeviceNestedInput
  deviceType: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input DeviceUpsertWithoutDeviceManagerInput {
  create: DeviceCreateWithoutDeviceManagerInput!
  update: DeviceUpdateWithoutDeviceManagerInput!
}

input DeviceUpsertWithoutPushTokenInput {
  create: DeviceCreateWithoutPushTokenInput!
  update: DeviceUpdateWithoutPushTokenInput!
}

input DeviceWhereInput {
  AND: [DeviceWhereInput!]
  createdAt: DateTimeNullableFilter
  DeviceManager: DeviceManagerWhereInput
  deviceManagerId: StringFilter
  deviceType: StringNullableFilter
  id: StringFilter
  NOT: [DeviceWhereInput!]
  OR: [DeviceWhereInput!]
  PushToken: PushTokenWhereInput
  pushTokenId: StringNullableFilter
  updatedAt: DateTimeNullableFilter
}

input DeviceWhereUniqueInput {
  deviceManagerId: String
  id: String
  pushTokenId: String
}

type Document {
  content: String!
  createdAt: DateTime!
  id: ID!
  LegalAgreement: [LegalAgreement!]!
  TypeOfDocument: TypeOfDocument!
  updatedAt: DateTime!
}

input DocumentAvgOrderByAggregateInput {
  id: SortOrder
}

input DocumentCountOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  TypeOfDocument: SortOrder
  updatedAt: SortOrder
}

input DocumentCreateInput {
  content: String!
  createdAt: DateTime
  LegalAgreement: LegalAgreementCreateNestedManyWithoutDocumentInput
  TypeOfDocument: TypeOfDocument!
  updatedAt: DateTime
}

input DocumentCreateManyInput {
  content: String!
  createdAt: DateTime
  id: Int
  TypeOfDocument: TypeOfDocument!
  updatedAt: DateTime
}

input DocumentCreateNestedOneWithoutLegalAgreementInput {
  connect: DocumentWhereUniqueInput
  connectOrCreate: DocumentCreateOrConnectWithoutLegalAgreementInput
  create: DocumentCreateWithoutLegalAgreementInput
}

input DocumentCreateOrConnectWithoutLegalAgreementInput {
  create: DocumentCreateWithoutLegalAgreementInput!
  where: DocumentWhereUniqueInput!
}

input DocumentCreateWithoutLegalAgreementInput {
  content: String!
  createdAt: DateTime
  TypeOfDocument: TypeOfDocument!
  updatedAt: DateTime
}

input DocumentMaxOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  TypeOfDocument: SortOrder
  updatedAt: SortOrder
}

input DocumentMinOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  TypeOfDocument: SortOrder
  updatedAt: SortOrder
}

input DocumentOrderByWithAggregationInput {
  _avg: DocumentAvgOrderByAggregateInput
  _count: DocumentCountOrderByAggregateInput
  _max: DocumentMaxOrderByAggregateInput
  _min: DocumentMinOrderByAggregateInput
  _sum: DocumentSumOrderByAggregateInput
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  TypeOfDocument: SortOrder
  updatedAt: SortOrder
}

input DocumentOrderByWithRelationInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  LegalAgreement: LegalAgreementOrderByRelationAggregateInput
  TypeOfDocument: SortOrder
  updatedAt: SortOrder
}

input DocumentRelationFilter {
  is: DocumentWhereInput
  isNot: DocumentWhereInput
}

enum DocumentScalarFieldEnum {
  content
  createdAt
  id
  TypeOfDocument
  updatedAt
}

input DocumentScalarWhereWithAggregatesInput {
  AND: [DocumentScalarWhereWithAggregatesInput!]
  content: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  NOT: [DocumentScalarWhereWithAggregatesInput!]
  OR: [DocumentScalarWhereWithAggregatesInput!]
  TypeOfDocument: EnumTypeOfDocumentWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input DocumentSumOrderByAggregateInput {
  id: SortOrder
}

input DocumentUpdateInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  LegalAgreement: LegalAgreementUpdateManyWithoutDocumentNestedInput
  TypeOfDocument: EnumTypeOfDocumentFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DocumentUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  TypeOfDocument: EnumTypeOfDocumentFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DocumentUpdateOneRequiredWithoutLegalAgreementNestedInput {
  connect: DocumentWhereUniqueInput
  connectOrCreate: DocumentCreateOrConnectWithoutLegalAgreementInput
  create: DocumentCreateWithoutLegalAgreementInput
  update: DocumentUpdateWithoutLegalAgreementInput
  upsert: DocumentUpsertWithoutLegalAgreementInput
}

input DocumentUpdateWithoutLegalAgreementInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  TypeOfDocument: EnumTypeOfDocumentFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DocumentUpsertWithoutLegalAgreementInput {
  create: DocumentCreateWithoutLegalAgreementInput!
  update: DocumentUpdateWithoutLegalAgreementInput!
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  LegalAgreement: LegalAgreementListRelationFilter
  NOT: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  TypeOfDocument: EnumTypeOfDocumentFilter
  updatedAt: DateTimeFilter
}

input DocumentWhereUniqueInput {
  id: Int
}

type Email {
  AuthenticationProvider(cursor: AuthenticationProviderWhereUniqueInput, distinct: [AuthenticationProviderScalarFieldEnum!], orderBy: [AuthenticationProviderOrderByWithRelationInput!], skip: Int, take: Int, where: AuthenticationProviderWhereInput): [AuthenticationProvider!]!
  canUseAsRecovery: Boolean
  createdAt: DateTime!
  email: String!
  id: ID!
  updatedAt: DateTime!
}

input EmailAvgOrderByAggregateInput {
  id: SortOrder
}

input EmailCountOrderByAggregateInput {
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input EmailCreateInput {
  AuthenticationProvider: AuthenticationProviderCreateNestedManyWithoutEmailsInput
  canUseAsRecovery: Boolean
  createdAt: DateTime
  email: String!
  updatedAt: DateTime
}

input EmailCreateManyInput {
  canUseAsRecovery: Boolean
  createdAt: DateTime
  email: String!
  id: Int
  updatedAt: DateTime
}

input EmailCreateNestedManyWithoutAuthenticationProviderInput {
  connect: [EmailWhereUniqueInput!]
  connectOrCreate: [EmailCreateOrConnectWithoutAuthenticationProviderInput!]
  create: EmailCreateWithoutAuthenticationProviderInput
}

input EmailCreateOrConnectWithoutAuthenticationProviderInput {
  create: EmailCreateWithoutAuthenticationProviderInput!
  where: EmailWhereUniqueInput!
}

input EmailCreateWithoutAuthenticationProviderInput {
  canUseAsRecovery: Boolean
  createdAt: DateTime
  email: String!
  updatedAt: DateTime
}

input EmailInput {
  email: String
}

input EmailListRelationFilter {
  every: EmailWhereInput
  none: EmailWhereInput
  some: EmailWhereInput
}

input EmailMaxOrderByAggregateInput {
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input EmailMinOrderByAggregateInput {
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input EmailOrderByRelationAggregateInput {
  _count: SortOrder
}

input EmailOrderByWithAggregationInput {
  _avg: EmailAvgOrderByAggregateInput
  _count: EmailCountOrderByAggregateInput
  _max: EmailMaxOrderByAggregateInput
  _min: EmailMinOrderByAggregateInput
  _sum: EmailSumOrderByAggregateInput
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input EmailOrderByWithRelationInput {
  AuthenticationProvider: AuthenticationProviderOrderByRelationAggregateInput
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

enum EmailScalarFieldEnum {
  canUseAsRecovery
  createdAt
  email
  id
  updatedAt
}

input EmailScalarWhereInput {
  AND: [EmailScalarWhereInput!]
  canUseAsRecovery: BoolNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  NOT: [EmailScalarWhereInput!]
  OR: [EmailScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input EmailScalarWhereWithAggregatesInput {
  AND: [EmailScalarWhereWithAggregatesInput!]
  canUseAsRecovery: BoolNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  NOT: [EmailScalarWhereWithAggregatesInput!]
  OR: [EmailScalarWhereWithAggregatesInput!]
  updatedAt: DateTimeWithAggregatesFilter
}

input EmailSumOrderByAggregateInput {
  id: SortOrder
}

input EmailUpdateInput {
  AuthenticationProvider: AuthenticationProviderUpdateManyWithoutEmailsNestedInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmailUpdateManyMutationInput {
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmailUpdateManyWithoutAuthenticationProviderNestedInput {
  connect: [EmailWhereUniqueInput!]
  connectOrCreate: [EmailCreateOrConnectWithoutAuthenticationProviderInput!]
  create: EmailCreateWithoutAuthenticationProviderInput
  delete: [EmailWhereUniqueInput!]
  deleteMany: [EmailScalarWhereInput!]
  disconnect: [EmailWhereUniqueInput!]
  set: [EmailWhereUniqueInput!]
  update: [EmailUpdateWithWhereUniqueWithoutAuthenticationProviderInput!]
  updateMany: [EmailUpdateManyWithWhereWithoutAuthenticationProviderInput!]
  upsert: [EmailUpsertWithWhereUniqueWithoutAuthenticationProviderInput!]
}

input EmailUpdateManyWithWhereWithoutAuthenticationProviderInput {
  data: EmailUpdateManyMutationInput!
  where: EmailScalarWhereInput!
}

input EmailUpdateWithoutAuthenticationProviderInput {
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmailUpdateWithWhereUniqueWithoutAuthenticationProviderInput {
  data: EmailUpdateWithoutAuthenticationProviderInput!
  where: EmailWhereUniqueInput!
}

input EmailUpsertWithWhereUniqueWithoutAuthenticationProviderInput {
  create: EmailCreateWithoutAuthenticationProviderInput!
  update: EmailUpdateWithoutAuthenticationProviderInput!
  where: EmailWhereUniqueInput!
}

input EmailWhereInput {
  AND: [EmailWhereInput!]
  AuthenticationProvider: AuthenticationProviderListRelationFilter
  canUseAsRecovery: BoolNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  NOT: [EmailWhereInput!]
  OR: [EmailWhereInput!]
  updatedAt: DateTimeFilter
}

input EmailWhereUniqueInput {
  id: Int
}

type Emojimood {
  colors: [String!]!
  emoji: String
  emojiname: String
  id: ID!
}

input EmojimoodAvgOrderByAggregateInput {
  id: SortOrder
}

input EmojimoodCountOrderByAggregateInput {
  colors: SortOrder
  emoji: SortOrder
  emojiname: SortOrder
  id: SortOrder
}

input EmojimoodCreatecolorsInput {
  set: [String!]!
}

input EmojimoodCreateInput {
  colors: [String!]
  emoji: String
  emojiname: String
  Story: StoryCreateNestedManyWithoutEmojimoodInput
}

input EmojimoodCreateManyInput {
  colors: [String!]
  emoji: String
  emojiname: String
  id: Int
}

input EmojimoodCreateNestedManyWithoutStoryInput {
  connect: [EmojimoodWhereUniqueInput!]
  connectOrCreate: [EmojimoodCreateOrConnectWithoutStoryInput!]
  create: EmojimoodCreateWithoutStoryInput
}

input EmojimoodCreateOrConnectWithoutStoryInput {
  create: EmojimoodCreateWithoutStoryInput!
  where: EmojimoodWhereUniqueInput!
}

input EmojimoodCreateWithoutStoryInput {
  colors: [String!]
  emoji: String
  emojiname: String
}

input EmojimoodListRelationFilter {
  every: EmojimoodWhereInput
  none: EmojimoodWhereInput
  some: EmojimoodWhereInput
}

input EmojimoodMaxOrderByAggregateInput {
  emoji: SortOrder
  emojiname: SortOrder
  id: SortOrder
}

input EmojimoodMinOrderByAggregateInput {
  emoji: SortOrder
  emojiname: SortOrder
  id: SortOrder
}

input EmojimoodOrderByRelationAggregateInput {
  _count: SortOrder
}

input EmojimoodOrderByWithAggregationInput {
  _avg: EmojimoodAvgOrderByAggregateInput
  _count: EmojimoodCountOrderByAggregateInput
  _max: EmojimoodMaxOrderByAggregateInput
  _min: EmojimoodMinOrderByAggregateInput
  _sum: EmojimoodSumOrderByAggregateInput
  colors: SortOrder
  emoji: SortOrder
  emojiname: SortOrder
  id: SortOrder
}

input EmojimoodOrderByWithRelationInput {
  colors: SortOrder
  emoji: SortOrder
  emojiname: SortOrder
  id: SortOrder
  Story: StoryOrderByRelationAggregateInput
}

enum EmojimoodScalarFieldEnum {
  colors
  emoji
  emojiname
  id
}

input EmojimoodScalarWhereInput {
  AND: [EmojimoodScalarWhereInput!]
  colors: StringNullableListFilter
  emoji: StringNullableFilter
  emojiname: StringNullableFilter
  id: IntFilter
  NOT: [EmojimoodScalarWhereInput!]
  OR: [EmojimoodScalarWhereInput!]
}

input EmojimoodScalarWhereWithAggregatesInput {
  AND: [EmojimoodScalarWhereWithAggregatesInput!]
  colors: StringNullableListFilter
  emoji: StringNullableWithAggregatesFilter
  emojiname: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  NOT: [EmojimoodScalarWhereWithAggregatesInput!]
  OR: [EmojimoodScalarWhereWithAggregatesInput!]
}

input EmojimoodSumOrderByAggregateInput {
  id: SortOrder
}

input EmojimoodUpdatecolorsInput {
  push: [String!]
  set: [String!]
}

input EmojimoodUpdateInput {
  colors: [String!]
  emoji: NullableStringFieldUpdateOperationsInput
  emojiname: NullableStringFieldUpdateOperationsInput
  Story: StoryUpdateManyWithoutEmojimoodNestedInput
}

input EmojimoodUpdateManyMutationInput {
  colors: [String!]
  emoji: NullableStringFieldUpdateOperationsInput
  emojiname: NullableStringFieldUpdateOperationsInput
}

input EmojimoodUpdateManyWithoutStoryNestedInput {
  connect: [EmojimoodWhereUniqueInput!]
  connectOrCreate: [EmojimoodCreateOrConnectWithoutStoryInput!]
  create: EmojimoodCreateWithoutStoryInput
  delete: [EmojimoodWhereUniqueInput!]
  deleteMany: [EmojimoodScalarWhereInput!]
  disconnect: [EmojimoodWhereUniqueInput!]
  set: [EmojimoodWhereUniqueInput!]
  update: [EmojimoodUpdateWithWhereUniqueWithoutStoryInput!]
  updateMany: [EmojimoodUpdateManyWithWhereWithoutStoryInput!]
  upsert: [EmojimoodUpsertWithWhereUniqueWithoutStoryInput!]
}

input EmojimoodUpdateManyWithWhereWithoutStoryInput {
  data: EmojimoodUpdateManyMutationInput!
  where: EmojimoodScalarWhereInput!
}

input EmojimoodUpdateWithoutStoryInput {
  colors: [String!]
  emoji: NullableStringFieldUpdateOperationsInput
  emojiname: NullableStringFieldUpdateOperationsInput
}

input EmojimoodUpdateWithWhereUniqueWithoutStoryInput {
  data: EmojimoodUpdateWithoutStoryInput!
  where: EmojimoodWhereUniqueInput!
}

input EmojimoodUpsertWithWhereUniqueWithoutStoryInput {
  create: EmojimoodCreateWithoutStoryInput!
  update: EmojimoodUpdateWithoutStoryInput!
  where: EmojimoodWhereUniqueInput!
}

input EmojimoodWhereInput {
  AND: [EmojimoodWhereInput!]
  colors: StringNullableListFilter
  emoji: StringNullableFilter
  emojiname: StringNullableFilter
  id: IntFilter
  NOT: [EmojimoodWhereInput!]
  OR: [EmojimoodWhereInput!]
  Story: StoryListRelationFilter
}

input EmojimoodWhereUniqueInput {
  id: Int
}

input EnumAppTypeNullableFilter {
  equals: AppType
  in: [AppType!]
  not: AppType
  notIn: [AppType!]
}

input EnumAppTypeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumAppTypeNullableFilter
  _min: NestedEnumAppTypeNullableFilter
  equals: AppType
  in: [AppType!]
  not: AppType
  notIn: [AppType!]
}

input EnumOutTypeFieldUpdateOperationsInput {
  set: OutType
}

input EnumOutTypeFilter {
  equals: OutType
  in: [OutType!]
  not: OutType
  notIn: [OutType!]
}

input EnumOutTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumOutTypeFilter
  _min: NestedEnumOutTypeFilter
  equals: OutType
  in: [OutType!]
  not: OutType
  notIn: [OutType!]
}

input EnumPhotoTypeNullableFilter {
  equals: PhotoType
  in: [PhotoType!]
  not: PhotoType
  notIn: [PhotoType!]
}

input EnumPhotoTypeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumPhotoTypeNullableFilter
  _min: NestedEnumPhotoTypeNullableFilter
  equals: PhotoType
  in: [PhotoType!]
  not: PhotoType
  notIn: [PhotoType!]
}

input EnumProfileTypeFieldUpdateOperationsInput {
  set: ProfileType
}

input EnumProfileTypeFilter {
  equals: ProfileType
  in: [ProfileType!]
  not: ProfileType
  notIn: [ProfileType!]
}

input EnumProfileTypeNullableFilter {
  equals: ProfileType
  in: [ProfileType!]
  not: ProfileType
  notIn: [ProfileType!]
}

input EnumProfileTypeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumProfileTypeNullableFilter
  _min: NestedEnumProfileTypeNullableFilter
  equals: ProfileType
  in: [ProfileType!]
  not: ProfileType
  notIn: [ProfileType!]
}

input EnumProfileTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumProfileTypeFilter
  _min: NestedEnumProfileTypeFilter
  equals: ProfileType
  in: [ProfileType!]
  not: ProfileType
  notIn: [ProfileType!]
}

input EnumRelationshipStatusNullableListFilter {
  equals: [RelationshipStatus!]
  has: RelationshipStatus
  hasEvery: [RelationshipStatus!]
  hasSome: [RelationshipStatus!]
  isEmpty: Boolean
}

input EnumSecureDataTypeFieldUpdateOperationsInput {
  set: SecureDataType
}

input EnumSecureDataTypeFilter {
  equals: SecureDataType
  in: [SecureDataType!]
  not: SecureDataType
  notIn: [SecureDataType!]
}

input EnumSecureDataTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumSecureDataTypeFilter
  _min: NestedEnumSecureDataTypeFilter
  equals: SecureDataType
  in: [SecureDataType!]
  not: SecureDataType
  notIn: [SecureDataType!]
}

input EnumTypeOfDocumentFieldUpdateOperationsInput {
  set: TypeOfDocument
}

input EnumTypeOfDocumentFilter {
  equals: TypeOfDocument
  in: [TypeOfDocument!]
  not: TypeOfDocument
  notIn: [TypeOfDocument!]
}

input EnumTypeOfDocumentWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTypeOfDocumentFilter
  _min: NestedEnumTypeOfDocumentFilter
  equals: TypeOfDocument
  in: [TypeOfDocument!]
  not: TypeOfDocument
  notIn: [TypeOfDocument!]
}

"""Long necks, cool patterns, taller than you."""
type ErrorManaging {
  errorCode: String!
  message: String!
}

"""Long necks, cool patterns, taller than you."""
type ErrorProfiling {
  errorCode: String!
  message: String!
}

type ExploreResponse {
  events: [Json!]
  people: [Personal!]!
  venues: [Venue!]!
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

type FriendRequest {
  createdAt: DateTime!
  id: ID!
  Notifications: [Notifications!]!
  NotificationStatus: NotificationStatus!
  notificationStatusId: String!
  receiverProfile: Profile!
  receiverProfileId: String!
  senderProfile: Profile!
  senderProfileId: String!
  updatedAt: DateTime!
}

input FriendRequestCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  notificationStatusId: SortOrder
  receiverProfileId: SortOrder
  senderProfileId: SortOrder
  updatedAt: SortOrder
}

input FriendRequestCreateInput {
  createdAt: DateTime
  id: String
  Notifications: NotificationsCreateNestedManyWithoutFriendRequestsInput
  NotificationStatus: NotificationStatusCreateNestedOneWithoutFriendRequestInput!
  receiverProfileId: String!
  senderProfileId: String!
  updatedAt: DateTime
}

input FriendRequestCreateManyInput {
  createdAt: DateTime
  id: String
  notificationStatusId: String!
  receiverProfileId: String!
  senderProfileId: String!
  updatedAt: DateTime
}

input FriendRequestCreateNestedManyWithoutNotificationsInput {
  connect: [FriendRequestWhereUniqueInput!]
  connectOrCreate: [FriendRequestCreateOrConnectWithoutNotificationsInput!]
  create: FriendRequestCreateWithoutNotificationsInput
}

input FriendRequestCreateNestedOneWithoutNotificationStatusInput {
  connect: FriendRequestWhereUniqueInput
  connectOrCreate: FriendRequestCreateOrConnectWithoutNotificationStatusInput
  create: FriendRequestCreateWithoutNotificationStatusInput
}

input FriendRequestCreateOrConnectWithoutNotificationsInput {
  create: FriendRequestCreateWithoutNotificationsInput!
  where: FriendRequestWhereUniqueInput!
}

input FriendRequestCreateOrConnectWithoutNotificationStatusInput {
  create: FriendRequestCreateWithoutNotificationStatusInput!
  where: FriendRequestWhereUniqueInput!
}

input FriendRequestCreateWithoutNotificationsInput {
  createdAt: DateTime
  id: String
  NotificationStatus: NotificationStatusCreateNestedOneWithoutFriendRequestInput!
  receiverProfileId: String!
  senderProfileId: String!
  updatedAt: DateTime
}

input FriendRequestCreateWithoutNotificationStatusInput {
  createdAt: DateTime
  id: String
  Notifications: NotificationsCreateNestedManyWithoutFriendRequestsInput
  receiverProfileId: String!
  senderProfileId: String!
  updatedAt: DateTime
}

input FriendRequestListRelationFilter {
  every: FriendRequestWhereInput
  none: FriendRequestWhereInput
  some: FriendRequestWhereInput
}

input FriendRequestMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  notificationStatusId: SortOrder
  receiverProfileId: SortOrder
  senderProfileId: SortOrder
  updatedAt: SortOrder
}

input FriendRequestMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  notificationStatusId: SortOrder
  receiverProfileId: SortOrder
  senderProfileId: SortOrder
  updatedAt: SortOrder
}

input FriendRequestOrderByRelationAggregateInput {
  _count: SortOrder
}

input FriendRequestOrderByWithAggregationInput {
  _count: FriendRequestCountOrderByAggregateInput
  _max: FriendRequestMaxOrderByAggregateInput
  _min: FriendRequestMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  notificationStatusId: SortOrder
  receiverProfileId: SortOrder
  senderProfileId: SortOrder
  updatedAt: SortOrder
}

input FriendRequestOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  Notifications: NotificationsOrderByRelationAggregateInput
  NotificationStatus: NotificationStatusOrderByWithRelationInput
  notificationStatusId: SortOrder
  receiverProfileId: SortOrder
  senderProfileId: SortOrder
  updatedAt: SortOrder
}

input FriendRequestRelationFilter {
  is: FriendRequestWhereInput
  isNot: FriendRequestWhereInput
}

enum FriendRequestScalarFieldEnum {
  createdAt
  id
  notificationStatusId
  receiverProfileId
  senderProfileId
  updatedAt
}

input FriendRequestScalarWhereInput {
  AND: [FriendRequestScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [FriendRequestScalarWhereInput!]
  notificationStatusId: StringFilter
  OR: [FriendRequestScalarWhereInput!]
  receiverProfileId: StringFilter
  senderProfileId: StringFilter
  updatedAt: DateTimeFilter
}

input FriendRequestScalarWhereWithAggregatesInput {
  AND: [FriendRequestScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [FriendRequestScalarWhereWithAggregatesInput!]
  notificationStatusId: StringWithAggregatesFilter
  OR: [FriendRequestScalarWhereWithAggregatesInput!]
  receiverProfileId: StringWithAggregatesFilter
  senderProfileId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input FriendRequestUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Notifications: NotificationsUpdateManyWithoutFriendRequestsNestedInput
  NotificationStatus: NotificationStatusUpdateOneRequiredWithoutFriendRequestNestedInput
  receiverProfileId: StringFieldUpdateOperationsInput
  senderProfileId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FriendRequestUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  receiverProfileId: StringFieldUpdateOperationsInput
  senderProfileId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FriendRequestUpdateManyWithoutNotificationsNestedInput {
  connect: [FriendRequestWhereUniqueInput!]
  connectOrCreate: [FriendRequestCreateOrConnectWithoutNotificationsInput!]
  create: FriendRequestCreateWithoutNotificationsInput
  delete: [FriendRequestWhereUniqueInput!]
  deleteMany: [FriendRequestScalarWhereInput!]
  disconnect: [FriendRequestWhereUniqueInput!]
  set: [FriendRequestWhereUniqueInput!]
  update: [FriendRequestUpdateWithWhereUniqueWithoutNotificationsInput!]
  updateMany: [FriendRequestUpdateManyWithWhereWithoutNotificationsInput!]
  upsert: [FriendRequestUpsertWithWhereUniqueWithoutNotificationsInput!]
}

input FriendRequestUpdateManyWithWhereWithoutNotificationsInput {
  data: FriendRequestUpdateManyMutationInput!
  where: FriendRequestScalarWhereInput!
}

input FriendRequestUpdateOneWithoutNotificationStatusNestedInput {
  connect: FriendRequestWhereUniqueInput
  connectOrCreate: FriendRequestCreateOrConnectWithoutNotificationStatusInput
  create: FriendRequestCreateWithoutNotificationStatusInput
  delete: Boolean
  disconnect: Boolean
  update: FriendRequestUpdateWithoutNotificationStatusInput
  upsert: FriendRequestUpsertWithoutNotificationStatusInput
}

input FriendRequestUpdateWithoutNotificationsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  NotificationStatus: NotificationStatusUpdateOneRequiredWithoutFriendRequestNestedInput
  receiverProfileId: StringFieldUpdateOperationsInput
  senderProfileId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FriendRequestUpdateWithoutNotificationStatusInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Notifications: NotificationsUpdateManyWithoutFriendRequestsNestedInput
  receiverProfileId: StringFieldUpdateOperationsInput
  senderProfileId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FriendRequestUpdateWithWhereUniqueWithoutNotificationsInput {
  data: FriendRequestUpdateWithoutNotificationsInput!
  where: FriendRequestWhereUniqueInput!
}

input FriendRequestUpsertWithoutNotificationStatusInput {
  create: FriendRequestCreateWithoutNotificationStatusInput!
  update: FriendRequestUpdateWithoutNotificationStatusInput!
}

input FriendRequestUpsertWithWhereUniqueWithoutNotificationsInput {
  create: FriendRequestCreateWithoutNotificationsInput!
  update: FriendRequestUpdateWithoutNotificationsInput!
  where: FriendRequestWhereUniqueInput!
}

input FriendRequestWhereInput {
  AND: [FriendRequestWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [FriendRequestWhereInput!]
  Notifications: NotificationsListRelationFilter
  NotificationStatus: NotificationStatusWhereInput
  notificationStatusId: StringFilter
  OR: [FriendRequestWhereInput!]
  receiverProfileId: StringFilter
  senderProfileId: StringFilter
  updatedAt: DateTimeFilter
}

input FriendRequestWhereUniqueInput {
  id: String
  notificationStatusId: String
}

type Geometry {
  h3Index15: String
  id: ID!
  latitude: Float!
  Location: Location
  longitude: Float!
  type: String!
}

input GeometryAvgOrderByAggregateInput {
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
}

input GeometryCountOrderByAggregateInput {
  h3Index15: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  type: SortOrder
}

input GeometryCreateInput {
  h3Index15: String
  latitude: Float!
  Location: LocationCreateNestedOneWithoutGeometryInput
  longitude: Float!
  type: String!
}

input GeometryCreateManyInput {
  h3Index15: String
  id: Int
  latitude: Float!
  longitude: Float!
  type: String!
}

input GeometryCreateNestedOneWithoutLocationInput {
  connect: GeometryWhereUniqueInput
  connectOrCreate: GeometryCreateOrConnectWithoutLocationInput
  create: GeometryCreateWithoutLocationInput
}

input GeometryCreateOrConnectWithoutLocationInput {
  create: GeometryCreateWithoutLocationInput!
  where: GeometryWhereUniqueInput!
}

input GeometryCreateWithoutLocationInput {
  h3Index15: String
  latitude: Float!
  longitude: Float!
  type: String!
}

input GeometryMaxOrderByAggregateInput {
  h3Index15: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  type: SortOrder
}

input GeometryMinOrderByAggregateInput {
  h3Index15: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  type: SortOrder
}

input GeometryOrderByWithAggregationInput {
  _avg: GeometryAvgOrderByAggregateInput
  _count: GeometryCountOrderByAggregateInput
  _max: GeometryMaxOrderByAggregateInput
  _min: GeometryMinOrderByAggregateInput
  _sum: GeometrySumOrderByAggregateInput
  h3Index15: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  type: SortOrder
}

input GeometryOrderByWithRelationInput {
  h3Index15: SortOrder
  id: SortOrder
  latitude: SortOrder
  Location: LocationOrderByWithRelationInput
  longitude: SortOrder
  type: SortOrder
}

input GeometryRelationFilter {
  is: GeometryWhereInput
  isNot: GeometryWhereInput
}

enum GeometryScalarFieldEnum {
  h3Index15
  id
  latitude
  longitude
  type
}

input GeometryScalarWhereWithAggregatesInput {
  AND: [GeometryScalarWhereWithAggregatesInput!]
  h3Index15: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  latitude: FloatWithAggregatesFilter
  longitude: FloatWithAggregatesFilter
  NOT: [GeometryScalarWhereWithAggregatesInput!]
  OR: [GeometryScalarWhereWithAggregatesInput!]
  type: StringWithAggregatesFilter
}

input GeometrySumOrderByAggregateInput {
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
}

input GeometryUpdateInput {
  h3Index15: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutGeometryNestedInput
  longitude: FloatFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input GeometryUpdateManyMutationInput {
  h3Index15: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input GeometryUpdateOneWithoutLocationNestedInput {
  connect: GeometryWhereUniqueInput
  connectOrCreate: GeometryCreateOrConnectWithoutLocationInput
  create: GeometryCreateWithoutLocationInput
  delete: Boolean
  disconnect: Boolean
  update: GeometryUpdateWithoutLocationInput
  upsert: GeometryUpsertWithoutLocationInput
}

input GeometryUpdateWithoutLocationInput {
  h3Index15: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input GeometryUpsertWithoutLocationInput {
  create: GeometryCreateWithoutLocationInput!
  update: GeometryUpdateWithoutLocationInput!
}

input GeometryWhereInput {
  AND: [GeometryWhereInput!]
  h3Index15: StringNullableFilter
  id: IntFilter
  latitude: FloatFilter
  Location: LocationWhereInput
  longitude: FloatFilter
  NOT: [GeometryWhereInput!]
  OR: [GeometryWhereInput!]
  type: StringFilter
}

input GeometryWhereUniqueInput {
  id: Int
}

type Group {
  createdAt: DateTime!
  id: ID!
  name: String!
  photos(cursor: PhotoWhereUniqueInput, distinct: [PhotoScalarFieldEnum!], orderBy: [PhotoOrderByWithRelationInput!], skip: Int, take: Int, where: PhotoWhereInput): [Photo!]!
  Profile(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): [Profile!]!
  updatedAt: DateTime!
}

input GroupCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GroupCreateInput {
  createdAt: DateTime
  id: String
  name: String!
  photos: PhotoCreateNestedManyWithoutGroupInput
  Profile: ProfileCreateNestedManyWithoutGroupsInput
  updatedAt: DateTime
}

input GroupCreateManyInput {
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input GroupCreateNestedManyWithoutProfileInput {
  connect: [GroupWhereUniqueInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutProfileInput!]
  create: GroupCreateWithoutProfileInput
}

input GroupCreateNestedOneWithoutPhotosInput {
  connect: GroupWhereUniqueInput
  connectOrCreate: GroupCreateOrConnectWithoutPhotosInput
  create: GroupCreateWithoutPhotosInput
}

input GroupCreateOrConnectWithoutPhotosInput {
  create: GroupCreateWithoutPhotosInput!
  where: GroupWhereUniqueInput!
}

input GroupCreateOrConnectWithoutProfileInput {
  create: GroupCreateWithoutProfileInput!
  where: GroupWhereUniqueInput!
}

input GroupCreateWithoutPhotosInput {
  createdAt: DateTime
  id: String
  name: String!
  Profile: ProfileCreateNestedManyWithoutGroupsInput
  updatedAt: DateTime
}

input GroupCreateWithoutProfileInput {
  createdAt: DateTime
  id: String
  name: String!
  photos: PhotoCreateNestedManyWithoutGroupInput
  updatedAt: DateTime
}

input GroupListRelationFilter {
  every: GroupWhereInput
  none: GroupWhereInput
  some: GroupWhereInput
}

input GroupMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GroupMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GroupOrderByRelationAggregateInput {
  _count: SortOrder
}

input GroupOrderByWithAggregationInput {
  _count: GroupCountOrderByAggregateInput
  _max: GroupMaxOrderByAggregateInput
  _min: GroupMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GroupOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  photos: PhotoOrderByRelationAggregateInput
  Profile: ProfileOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input GroupRelationFilter {
  is: GroupWhereInput
  isNot: GroupWhereInput
}

enum GroupScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input GroupScalarWhereInput {
  AND: [GroupScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input GroupScalarWhereWithAggregatesInput {
  AND: [GroupScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  NOT: [GroupScalarWhereWithAggregatesInput!]
  OR: [GroupScalarWhereWithAggregatesInput!]
  updatedAt: DateTimeWithAggregatesFilter
}

input GroupUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutGroupNestedInput
  Profile: ProfileUpdateManyWithoutGroupsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateManyWithoutProfileNestedInput {
  connect: [GroupWhereUniqueInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutProfileInput!]
  create: GroupCreateWithoutProfileInput
  delete: [GroupWhereUniqueInput!]
  deleteMany: [GroupScalarWhereInput!]
  disconnect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [GroupUpdateManyWithWhereWithoutProfileInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutProfileInput!]
}

input GroupUpdateManyWithWhereWithoutProfileInput {
  data: GroupUpdateManyMutationInput!
  where: GroupScalarWhereInput!
}

input GroupUpdateOneWithoutPhotosNestedInput {
  connect: GroupWhereUniqueInput
  connectOrCreate: GroupCreateOrConnectWithoutPhotosInput
  create: GroupCreateWithoutPhotosInput
  delete: Boolean
  disconnect: Boolean
  update: GroupUpdateWithoutPhotosInput
  upsert: GroupUpsertWithoutPhotosInput
}

input GroupUpdateWithoutPhotosInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateManyWithoutGroupsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateWithoutProfileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutGroupNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateWithWhereUniqueWithoutProfileInput {
  data: GroupUpdateWithoutProfileInput!
  where: GroupWhereUniqueInput!
}

input GroupUpsertWithoutPhotosInput {
  create: GroupCreateWithoutPhotosInput!
  update: GroupUpdateWithoutPhotosInput!
}

input GroupUpsertWithWhereUniqueWithoutProfileInput {
  create: GroupCreateWithoutProfileInput!
  update: GroupUpdateWithoutProfileInput!
  where: GroupWhereUniqueInput!
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  photos: PhotoListRelationFilter
  Profile: ProfileListRelationFilter
  updatedAt: DateTimeFilter
}

input GroupWhereUniqueInput {
  id: String
}

input H3Index5VenueRecommendationCountOrderByAggregateInput {
  h3Index5: SortOrder
  id: SortOrder
  venuesProfileIds: SortOrder
}

input H3Index5VenueRecommendationCreateInput {
  h3Index5: String!
  id: String
  MetricsHomeCollection: MetricsHomeCollectionCreateNestedManyWithoutH3Index5VenueRecommendationInput
  venuesProfileIds: [String!]
}

input H3Index5VenueRecommendationCreateManyInput {
  h3Index5: String!
  id: String
  venuesProfileIds: [String!]
}

input H3Index5VenueRecommendationCreateNestedOneWithoutMetricsHomeCollectionInput {
  connect: H3Index5VenueRecommendationWhereUniqueInput
  connectOrCreate: H3Index5VenueRecommendationCreateOrConnectWithoutMetricsHomeCollectionInput
  create: H3Index5VenueRecommendationCreateWithoutMetricsHomeCollectionInput
}

input H3Index5VenueRecommendationCreateOrConnectWithoutMetricsHomeCollectionInput {
  create: H3Index5VenueRecommendationCreateWithoutMetricsHomeCollectionInput!
  where: H3Index5VenueRecommendationWhereUniqueInput!
}

input H3Index5VenueRecommendationCreatevenuesProfileIdsInput {
  set: [String!]!
}

input H3Index5VenueRecommendationCreateWithoutMetricsHomeCollectionInput {
  h3Index5: String!
  id: String
  venuesProfileIds: [String!]
}

input H3Index5VenueRecommendationMaxOrderByAggregateInput {
  h3Index5: SortOrder
  id: SortOrder
}

input H3Index5VenueRecommendationMinOrderByAggregateInput {
  h3Index5: SortOrder
  id: SortOrder
}

input H3Index5VenueRecommendationOrderByWithAggregationInput {
  _count: H3Index5VenueRecommendationCountOrderByAggregateInput
  _max: H3Index5VenueRecommendationMaxOrderByAggregateInput
  _min: H3Index5VenueRecommendationMinOrderByAggregateInput
  h3Index5: SortOrder
  id: SortOrder
  venuesProfileIds: SortOrder
}

input H3Index5VenueRecommendationOrderByWithRelationInput {
  h3Index5: SortOrder
  id: SortOrder
  MetricsHomeCollection: MetricsHomeCollectionOrderByRelationAggregateInput
  venuesProfileIds: SortOrder
}

input H3Index5VenueRecommendationRelationFilter {
  is: H3Index5VenueRecommendationWhereInput
  isNot: H3Index5VenueRecommendationWhereInput
}

enum H3Index5VenueRecommendationScalarFieldEnum {
  h3Index5
  id
  venuesProfileIds
}

input H3Index5VenueRecommendationScalarWhereWithAggregatesInput {
  AND: [H3Index5VenueRecommendationScalarWhereWithAggregatesInput!]
  h3Index5: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [H3Index5VenueRecommendationScalarWhereWithAggregatesInput!]
  OR: [H3Index5VenueRecommendationScalarWhereWithAggregatesInput!]
  venuesProfileIds: StringNullableListFilter
}

input H3Index5VenueRecommendationUpdateInput {
  h3Index5: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  MetricsHomeCollection: MetricsHomeCollectionUpdateManyWithoutH3Index5VenueRecommendationNestedInput
  venuesProfileIds: [String!]
}

input H3Index5VenueRecommendationUpdateManyMutationInput {
  h3Index5: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
}

input H3Index5VenueRecommendationUpdateOneWithoutMetricsHomeCollectionNestedInput {
  connect: H3Index5VenueRecommendationWhereUniqueInput
  connectOrCreate: H3Index5VenueRecommendationCreateOrConnectWithoutMetricsHomeCollectionInput
  create: H3Index5VenueRecommendationCreateWithoutMetricsHomeCollectionInput
  delete: Boolean
  disconnect: Boolean
  update: H3Index5VenueRecommendationUpdateWithoutMetricsHomeCollectionInput
  upsert: H3Index5VenueRecommendationUpsertWithoutMetricsHomeCollectionInput
}

input H3Index5VenueRecommendationUpdatevenuesProfileIdsInput {
  push: [String!]
  set: [String!]
}

input H3Index5VenueRecommendationUpdateWithoutMetricsHomeCollectionInput {
  h3Index5: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
}

input H3Index5VenueRecommendationUpsertWithoutMetricsHomeCollectionInput {
  create: H3Index5VenueRecommendationCreateWithoutMetricsHomeCollectionInput!
  update: H3Index5VenueRecommendationUpdateWithoutMetricsHomeCollectionInput!
}

input H3Index5VenueRecommendationWhereInput {
  AND: [H3Index5VenueRecommendationWhereInput!]
  h3Index5: StringFilter
  id: StringFilter
  MetricsHomeCollection: MetricsHomeCollectionListRelationFilter
  NOT: [H3Index5VenueRecommendationWhereInput!]
  OR: [H3Index5VenueRecommendationWhereInput!]
  venuesProfileIds: StringNullableListFilter
}

input H3Index5VenueRecommendationWhereUniqueInput {
  h3Index5: String
  id: String
}

input H3Index6VenueRecommendationCountOrderByAggregateInput {
  h3Index6: SortOrder
  id: SortOrder
  venuesProfileIds: SortOrder
}

input H3Index6VenueRecommendationCreateInput {
  h3Index6: String!
  id: String
  MetricsCollection: MetricsHomeCollectionCreateNestedManyWithoutH3Index6VenueRecommendationInput
  venuesProfileIds: [String!]
}

input H3Index6VenueRecommendationCreateManyInput {
  h3Index6: String!
  id: String
  venuesProfileIds: [String!]
}

input H3Index6VenueRecommendationCreateNestedOneWithoutMetricsCollectionInput {
  connect: H3Index6VenueRecommendationWhereUniqueInput
  connectOrCreate: H3Index6VenueRecommendationCreateOrConnectWithoutMetricsCollectionInput
  create: H3Index6VenueRecommendationCreateWithoutMetricsCollectionInput
}

input H3Index6VenueRecommendationCreateOrConnectWithoutMetricsCollectionInput {
  create: H3Index6VenueRecommendationCreateWithoutMetricsCollectionInput!
  where: H3Index6VenueRecommendationWhereUniqueInput!
}

input H3Index6VenueRecommendationCreatevenuesProfileIdsInput {
  set: [String!]!
}

input H3Index6VenueRecommendationCreateWithoutMetricsCollectionInput {
  h3Index6: String!
  id: String
  venuesProfileIds: [String!]
}

input H3Index6VenueRecommendationMaxOrderByAggregateInput {
  h3Index6: SortOrder
  id: SortOrder
}

input H3Index6VenueRecommendationMinOrderByAggregateInput {
  h3Index6: SortOrder
  id: SortOrder
}

input H3Index6VenueRecommendationOrderByWithAggregationInput {
  _count: H3Index6VenueRecommendationCountOrderByAggregateInput
  _max: H3Index6VenueRecommendationMaxOrderByAggregateInput
  _min: H3Index6VenueRecommendationMinOrderByAggregateInput
  h3Index6: SortOrder
  id: SortOrder
  venuesProfileIds: SortOrder
}

input H3Index6VenueRecommendationOrderByWithRelationInput {
  h3Index6: SortOrder
  id: SortOrder
  MetricsCollection: MetricsHomeCollectionOrderByRelationAggregateInput
  venuesProfileIds: SortOrder
}

input H3Index6VenueRecommendationRelationFilter {
  is: H3Index6VenueRecommendationWhereInput
  isNot: H3Index6VenueRecommendationWhereInput
}

enum H3Index6VenueRecommendationScalarFieldEnum {
  h3Index6
  id
  venuesProfileIds
}

input H3Index6VenueRecommendationScalarWhereWithAggregatesInput {
  AND: [H3Index6VenueRecommendationScalarWhereWithAggregatesInput!]
  h3Index6: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [H3Index6VenueRecommendationScalarWhereWithAggregatesInput!]
  OR: [H3Index6VenueRecommendationScalarWhereWithAggregatesInput!]
  venuesProfileIds: StringNullableListFilter
}

input H3Index6VenueRecommendationUpdateInput {
  h3Index6: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  MetricsCollection: MetricsHomeCollectionUpdateManyWithoutH3Index6VenueRecommendationNestedInput
  venuesProfileIds: [String!]
}

input H3Index6VenueRecommendationUpdateManyMutationInput {
  h3Index6: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
}

input H3Index6VenueRecommendationUpdateOneWithoutMetricsCollectionNestedInput {
  connect: H3Index6VenueRecommendationWhereUniqueInput
  connectOrCreate: H3Index6VenueRecommendationCreateOrConnectWithoutMetricsCollectionInput
  create: H3Index6VenueRecommendationCreateWithoutMetricsCollectionInput
  delete: Boolean
  disconnect: Boolean
  update: H3Index6VenueRecommendationUpdateWithoutMetricsCollectionInput
  upsert: H3Index6VenueRecommendationUpsertWithoutMetricsCollectionInput
}

input H3Index6VenueRecommendationUpdatevenuesProfileIdsInput {
  push: [String!]
  set: [String!]
}

input H3Index6VenueRecommendationUpdateWithoutMetricsCollectionInput {
  h3Index6: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
}

input H3Index6VenueRecommendationUpsertWithoutMetricsCollectionInput {
  create: H3Index6VenueRecommendationCreateWithoutMetricsCollectionInput!
  update: H3Index6VenueRecommendationUpdateWithoutMetricsCollectionInput!
}

input H3Index6VenueRecommendationWhereInput {
  AND: [H3Index6VenueRecommendationWhereInput!]
  h3Index6: StringFilter
  id: StringFilter
  MetricsCollection: MetricsHomeCollectionListRelationFilter
  NOT: [H3Index6VenueRecommendationWhereInput!]
  OR: [H3Index6VenueRecommendationWhereInput!]
  venuesProfileIds: StringNullableListFilter
}

input H3Index6VenueRecommendationWhereUniqueInput {
  h3Index6: String
  id: String
}

type IdentifiableInformation {
  birthday: DateTime
  createdAt: DateTime!
  currenttown: String
  firstname: String
  fullname: String
  gender: String
  hometown: String
  id: ID!
  lastname: String
  lookfor: String
  nickname: String
  Profile: Profile!
  profileId: String!
  storageId: String
  surname: String
  updatedAt: DateTime!
  username: String!
}

input IdentifiableInformationCountOrderByAggregateInput {
  birthday: SortOrder
  createdAt: SortOrder
  currenttown: SortOrder
  firstname: SortOrder
  fullname: SortOrder
  gender: SortOrder
  hometown: SortOrder
  id: SortOrder
  lastname: SortOrder
  lookfor: SortOrder
  nickname: SortOrder
  profileId: SortOrder
  storageId: SortOrder
  surname: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input IdentifiableInformationCreateInput {
  birthday: DateTime
  createdAt: DateTime
  currenttown: String
  firstname: String
  fullname: String
  gender: String
  hometown: String
  id: String
  lastname: String
  lookfor: String
  nickname: String
  Profile: ProfileCreateNestedOneWithoutIdentifiableInformationInput!
  storageId: String
  surname: String
  updatedAt: DateTime
  username: String!
}

input IdentifiableInformationCreateManyInput {
  birthday: DateTime
  createdAt: DateTime
  currenttown: String
  firstname: String
  fullname: String
  gender: String
  hometown: String
  id: String
  lastname: String
  lookfor: String
  nickname: String
  profileId: String!
  storageId: String
  surname: String
  updatedAt: DateTime
  username: String!
}

input IdentifiableInformationCreateNestedOneWithoutProfileInput {
  connect: IdentifiableInformationWhereUniqueInput
  connectOrCreate: IdentifiableInformationCreateOrConnectWithoutProfileInput
  create: IdentifiableInformationCreateWithoutProfileInput
}

input IdentifiableInformationCreateOrConnectWithoutProfileInput {
  create: IdentifiableInformationCreateWithoutProfileInput!
  where: IdentifiableInformationWhereUniqueInput!
}

input IdentifiableInformationCreateWithoutProfileInput {
  birthday: DateTime
  createdAt: DateTime
  currenttown: String
  firstname: String
  fullname: String
  gender: String
  hometown: String
  id: String
  lastname: String
  lookfor: String
  nickname: String
  storageId: String
  surname: String
  updatedAt: DateTime
  username: String!
}

input IdentifiableInformationMaxOrderByAggregateInput {
  birthday: SortOrder
  createdAt: SortOrder
  currenttown: SortOrder
  firstname: SortOrder
  fullname: SortOrder
  gender: SortOrder
  hometown: SortOrder
  id: SortOrder
  lastname: SortOrder
  lookfor: SortOrder
  nickname: SortOrder
  profileId: SortOrder
  storageId: SortOrder
  surname: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input IdentifiableInformationMinOrderByAggregateInput {
  birthday: SortOrder
  createdAt: SortOrder
  currenttown: SortOrder
  firstname: SortOrder
  fullname: SortOrder
  gender: SortOrder
  hometown: SortOrder
  id: SortOrder
  lastname: SortOrder
  lookfor: SortOrder
  nickname: SortOrder
  profileId: SortOrder
  storageId: SortOrder
  surname: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input IdentifiableInformationOrderByWithAggregationInput {
  _count: IdentifiableInformationCountOrderByAggregateInput
  _max: IdentifiableInformationMaxOrderByAggregateInput
  _min: IdentifiableInformationMinOrderByAggregateInput
  birthday: SortOrder
  createdAt: SortOrder
  currenttown: SortOrder
  firstname: SortOrder
  fullname: SortOrder
  gender: SortOrder
  hometown: SortOrder
  id: SortOrder
  lastname: SortOrder
  lookfor: SortOrder
  nickname: SortOrder
  profileId: SortOrder
  storageId: SortOrder
  surname: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input IdentifiableInformationOrderByWithRelationInput {
  birthday: SortOrder
  createdAt: SortOrder
  currenttown: SortOrder
  firstname: SortOrder
  fullname: SortOrder
  gender: SortOrder
  hometown: SortOrder
  id: SortOrder
  lastname: SortOrder
  lookfor: SortOrder
  nickname: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  storageId: SortOrder
  surname: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input IdentifiableInformationRelationFilter {
  is: IdentifiableInformationWhereInput
  isNot: IdentifiableInformationWhereInput
}

enum IdentifiableInformationScalarFieldEnum {
  birthday
  createdAt
  currenttown
  firstname
  fullname
  gender
  hometown
  id
  lastname
  lookfor
  nickname
  profileId
  storageId
  surname
  updatedAt
  username
}

input IdentifiableInformationScalarWhereWithAggregatesInput {
  AND: [IdentifiableInformationScalarWhereWithAggregatesInput!]
  birthday: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  currenttown: StringNullableWithAggregatesFilter
  firstname: StringNullableWithAggregatesFilter
  fullname: StringNullableWithAggregatesFilter
  gender: StringNullableWithAggregatesFilter
  hometown: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  lastname: StringNullableWithAggregatesFilter
  lookfor: StringNullableWithAggregatesFilter
  nickname: StringNullableWithAggregatesFilter
  NOT: [IdentifiableInformationScalarWhereWithAggregatesInput!]
  OR: [IdentifiableInformationScalarWhereWithAggregatesInput!]
  profileId: StringWithAggregatesFilter
  storageId: StringNullableWithAggregatesFilter
  surname: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  username: StringWithAggregatesFilter
}

input IdentifiableInformationUpdateInput {
  birthday: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  currenttown: NullableStringFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  fullname: NullableStringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  hometown: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  lookfor: NullableStringFieldUpdateOperationsInput
  nickname: NullableStringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutIdentifiableInformationNestedInput
  storageId: NullableStringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input IdentifiableInformationUpdateManyMutationInput {
  birthday: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  currenttown: NullableStringFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  fullname: NullableStringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  hometown: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  lookfor: NullableStringFieldUpdateOperationsInput
  nickname: NullableStringFieldUpdateOperationsInput
  storageId: NullableStringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input IdentifiableInformationUpdateOneWithoutProfileNestedInput {
  connect: IdentifiableInformationWhereUniqueInput
  connectOrCreate: IdentifiableInformationCreateOrConnectWithoutProfileInput
  create: IdentifiableInformationCreateWithoutProfileInput
  delete: Boolean
  disconnect: Boolean
  update: IdentifiableInformationUpdateWithoutProfileInput
  upsert: IdentifiableInformationUpsertWithoutProfileInput
}

input IdentifiableInformationUpdateWithoutProfileInput {
  birthday: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  currenttown: NullableStringFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  fullname: NullableStringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  hometown: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  lookfor: NullableStringFieldUpdateOperationsInput
  nickname: NullableStringFieldUpdateOperationsInput
  storageId: NullableStringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input IdentifiableInformationUpsertWithoutProfileInput {
  create: IdentifiableInformationCreateWithoutProfileInput!
  update: IdentifiableInformationUpdateWithoutProfileInput!
}

input IdentifiableInformationWhereInput {
  AND: [IdentifiableInformationWhereInput!]
  birthday: DateTimeNullableFilter
  createdAt: DateTimeFilter
  currenttown: StringNullableFilter
  firstname: StringNullableFilter
  fullname: StringNullableFilter
  gender: StringNullableFilter
  hometown: StringNullableFilter
  id: StringFilter
  lastname: StringNullableFilter
  lookfor: StringNullableFilter
  nickname: StringNullableFilter
  NOT: [IdentifiableInformationWhereInput!]
  OR: [IdentifiableInformationWhereInput!]
  Profile: ProfileWhereInput
  profileId: StringFilter
  storageId: StringNullableFilter
  surname: StringNullableFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input IdentifiableInformationWhereUniqueInput {
  id: String
  profileId: String
  username: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

scalar Json

input JsonNullableListFilter {
  equals: [Json!]
  has: Json
  hasEvery: [Json!]
  hasSome: [Json!]
  isEmpty: Boolean
}

type LegalAgreement {
  aggreed: Boolean!
  createdAt: DateTime!
  Credentials: Credentials
  credentialsId: String
  Document: Document!
  documentId: Int!
  id: ID!
  updatedAt: DateTime!
}

input LegalAgreementAvgOrderByAggregateInput {
  documentId: SortOrder
}

input LegalAgreementCountOrderByAggregateInput {
  aggreed: SortOrder
  createdAt: SortOrder
  credentialsId: SortOrder
  documentId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input LegalAgreementCreateInput {
  aggreed: Boolean
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutLegalAgreementInput
  Document: DocumentCreateNestedOneWithoutLegalAgreementInput!
  id: String
  updatedAt: DateTime
}

input LegalAgreementCreateManyCredentialsInput {
  aggreed: Boolean
  createdAt: DateTime
  documentId: Int!
  id: String
  updatedAt: DateTime
}

input LegalAgreementCreateManyCredentialsInputEnvelope {
  data: [LegalAgreementCreateManyCredentialsInput!]!
  skipDuplicates: Boolean
}

input LegalAgreementCreateManyDocumentInput {
  aggreed: Boolean
  createdAt: DateTime
  credentialsId: String
  id: String
  updatedAt: DateTime
}

input LegalAgreementCreateManyDocumentInputEnvelope {
  data: [LegalAgreementCreateManyDocumentInput!]!
  skipDuplicates: Boolean
}

input LegalAgreementCreateManyInput {
  aggreed: Boolean
  createdAt: DateTime
  credentialsId: String
  documentId: Int!
  id: String
  updatedAt: DateTime
}

input LegalAgreementCreateNestedManyWithoutCredentialsInput {
  connect: [LegalAgreementWhereUniqueInput!]
  connectOrCreate: [LegalAgreementCreateOrConnectWithoutCredentialsInput!]
  create: LegalAgreementCreateWithoutCredentialsInput
  createMany: LegalAgreementCreateManyCredentialsInputEnvelope
}

input LegalAgreementCreateNestedManyWithoutDocumentInput {
  connect: [LegalAgreementWhereUniqueInput!]
  connectOrCreate: [LegalAgreementCreateOrConnectWithoutDocumentInput!]
  create: LegalAgreementCreateWithoutDocumentInput
  createMany: LegalAgreementCreateManyDocumentInputEnvelope
}

input LegalAgreementCreateOrConnectWithoutCredentialsInput {
  create: LegalAgreementCreateWithoutCredentialsInput!
  where: LegalAgreementWhereUniqueInput!
}

input LegalAgreementCreateOrConnectWithoutDocumentInput {
  create: LegalAgreementCreateWithoutDocumentInput!
  where: LegalAgreementWhereUniqueInput!
}

input LegalAgreementCreateWithoutCredentialsInput {
  aggreed: Boolean
  createdAt: DateTime
  Document: DocumentCreateNestedOneWithoutLegalAgreementInput!
  id: String
  updatedAt: DateTime
}

input LegalAgreementCreateWithoutDocumentInput {
  aggreed: Boolean
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutLegalAgreementInput
  id: String
  updatedAt: DateTime
}

input LegalAgreementListRelationFilter {
  every: LegalAgreementWhereInput
  none: LegalAgreementWhereInput
  some: LegalAgreementWhereInput
}

input LegalAgreementMaxOrderByAggregateInput {
  aggreed: SortOrder
  createdAt: SortOrder
  credentialsId: SortOrder
  documentId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input LegalAgreementMinOrderByAggregateInput {
  aggreed: SortOrder
  createdAt: SortOrder
  credentialsId: SortOrder
  documentId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input LegalAgreementOrderByRelationAggregateInput {
  _count: SortOrder
}

input LegalAgreementOrderByWithAggregationInput {
  _avg: LegalAgreementAvgOrderByAggregateInput
  _count: LegalAgreementCountOrderByAggregateInput
  _max: LegalAgreementMaxOrderByAggregateInput
  _min: LegalAgreementMinOrderByAggregateInput
  _sum: LegalAgreementSumOrderByAggregateInput
  aggreed: SortOrder
  createdAt: SortOrder
  credentialsId: SortOrder
  documentId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input LegalAgreementOrderByWithRelationInput {
  aggreed: SortOrder
  createdAt: SortOrder
  Credentials: CredentialsOrderByWithRelationInput
  credentialsId: SortOrder
  Document: DocumentOrderByWithRelationInput
  documentId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

enum LegalAgreementScalarFieldEnum {
  aggreed
  createdAt
  credentialsId
  documentId
  id
  updatedAt
}

input LegalAgreementScalarWhereInput {
  aggreed: BoolFilter
  AND: [LegalAgreementScalarWhereInput!]
  createdAt: DateTimeFilter
  credentialsId: StringNullableFilter
  documentId: IntFilter
  id: StringFilter
  NOT: [LegalAgreementScalarWhereInput!]
  OR: [LegalAgreementScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input LegalAgreementScalarWhereWithAggregatesInput {
  aggreed: BoolWithAggregatesFilter
  AND: [LegalAgreementScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  credentialsId: StringNullableWithAggregatesFilter
  documentId: IntWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [LegalAgreementScalarWhereWithAggregatesInput!]
  OR: [LegalAgreementScalarWhereWithAggregatesInput!]
  updatedAt: DateTimeWithAggregatesFilter
}

input LegalAgreementSumOrderByAggregateInput {
  documentId: SortOrder
}

input LegalAgreementUpdateInput {
  aggreed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutLegalAgreementNestedInput
  Document: DocumentUpdateOneRequiredWithoutLegalAgreementNestedInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LegalAgreementUpdateManyMutationInput {
  aggreed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LegalAgreementUpdateManyWithoutCredentialsNestedInput {
  connect: [LegalAgreementWhereUniqueInput!]
  connectOrCreate: [LegalAgreementCreateOrConnectWithoutCredentialsInput!]
  create: LegalAgreementCreateWithoutCredentialsInput
  createMany: LegalAgreementCreateManyCredentialsInputEnvelope
  delete: [LegalAgreementWhereUniqueInput!]
  deleteMany: [LegalAgreementScalarWhereInput!]
  disconnect: [LegalAgreementWhereUniqueInput!]
  set: [LegalAgreementWhereUniqueInput!]
  update: [LegalAgreementUpdateWithWhereUniqueWithoutCredentialsInput!]
  updateMany: [LegalAgreementUpdateManyWithWhereWithoutCredentialsInput!]
  upsert: [LegalAgreementUpsertWithWhereUniqueWithoutCredentialsInput!]
}

input LegalAgreementUpdateManyWithoutDocumentNestedInput {
  connect: [LegalAgreementWhereUniqueInput!]
  connectOrCreate: [LegalAgreementCreateOrConnectWithoutDocumentInput!]
  create: LegalAgreementCreateWithoutDocumentInput
  createMany: LegalAgreementCreateManyDocumentInputEnvelope
  delete: [LegalAgreementWhereUniqueInput!]
  deleteMany: [LegalAgreementScalarWhereInput!]
  disconnect: [LegalAgreementWhereUniqueInput!]
  set: [LegalAgreementWhereUniqueInput!]
  update: [LegalAgreementUpdateWithWhereUniqueWithoutDocumentInput!]
  updateMany: [LegalAgreementUpdateManyWithWhereWithoutDocumentInput!]
  upsert: [LegalAgreementUpsertWithWhereUniqueWithoutDocumentInput!]
}

input LegalAgreementUpdateManyWithWhereWithoutCredentialsInput {
  data: LegalAgreementUpdateManyMutationInput!
  where: LegalAgreementScalarWhereInput!
}

input LegalAgreementUpdateManyWithWhereWithoutDocumentInput {
  data: LegalAgreementUpdateManyMutationInput!
  where: LegalAgreementScalarWhereInput!
}

input LegalAgreementUpdateWithoutCredentialsInput {
  aggreed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Document: DocumentUpdateOneRequiredWithoutLegalAgreementNestedInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LegalAgreementUpdateWithoutDocumentInput {
  aggreed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutLegalAgreementNestedInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LegalAgreementUpdateWithWhereUniqueWithoutCredentialsInput {
  data: LegalAgreementUpdateWithoutCredentialsInput!
  where: LegalAgreementWhereUniqueInput!
}

input LegalAgreementUpdateWithWhereUniqueWithoutDocumentInput {
  data: LegalAgreementUpdateWithoutDocumentInput!
  where: LegalAgreementWhereUniqueInput!
}

input LegalAgreementUpsertWithWhereUniqueWithoutCredentialsInput {
  create: LegalAgreementCreateWithoutCredentialsInput!
  update: LegalAgreementUpdateWithoutCredentialsInput!
  where: LegalAgreementWhereUniqueInput!
}

input LegalAgreementUpsertWithWhereUniqueWithoutDocumentInput {
  create: LegalAgreementCreateWithoutDocumentInput!
  update: LegalAgreementUpdateWithoutDocumentInput!
  where: LegalAgreementWhereUniqueInput!
}

input LegalAgreementWhereInput {
  aggreed: BoolFilter
  AND: [LegalAgreementWhereInput!]
  createdAt: DateTimeFilter
  Credentials: CredentialsWhereInput
  credentialsId: StringNullableFilter
  Document: DocumentWhereInput
  documentId: IntFilter
  id: StringFilter
  NOT: [LegalAgreementWhereInput!]
  OR: [LegalAgreementWhereInput!]
  updatedAt: DateTimeFilter
}

input LegalAgreementWhereUniqueInput {
  id: String
}

type LiveOutPersonal {
  createdAt: DateTime!
  id: ID!
  Out(cursor: OutWhereUniqueInput, distinct: [OutScalarFieldEnum!], orderBy: [OutOrderByWithRelationInput!], skip: Int, take: Int, where: OutWhereInput): [Out!]!
  Personal: Personal!
  personalId: String!
  updatedAt: DateTime!
}

input LiveOutPersonalCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  personalId: SortOrder
  updatedAt: SortOrder
}

input LiveOutPersonalCreateInput {
  createdAt: DateTime
  id: String
  Out: OutCreateNestedManyWithoutLiveOutPersonalInput
  Personal: PersonalCreateNestedOneWithoutLiveOutPersonalInput!
  updatedAt: DateTime
}

input LiveOutPersonalCreateManyInput {
  createdAt: DateTime
  id: String
  personalId: String!
  updatedAt: DateTime
}

input LiveOutPersonalCreateNestedOneWithoutOutInput {
  connect: LiveOutPersonalWhereUniqueInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutOutInput
  create: LiveOutPersonalCreateWithoutOutInput
}

input LiveOutPersonalCreateNestedOneWithoutPersonalInput {
  connect: LiveOutPersonalWhereUniqueInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutPersonalInput
  create: LiveOutPersonalCreateWithoutPersonalInput
}

input LiveOutPersonalCreateOrConnectWithoutOutInput {
  create: LiveOutPersonalCreateWithoutOutInput!
  where: LiveOutPersonalWhereUniqueInput!
}

input LiveOutPersonalCreateOrConnectWithoutPersonalInput {
  create: LiveOutPersonalCreateWithoutPersonalInput!
  where: LiveOutPersonalWhereUniqueInput!
}

input LiveOutPersonalCreateWithoutOutInput {
  createdAt: DateTime
  id: String
  Personal: PersonalCreateNestedOneWithoutLiveOutPersonalInput!
  updatedAt: DateTime
}

input LiveOutPersonalCreateWithoutPersonalInput {
  createdAt: DateTime
  id: String
  Out: OutCreateNestedManyWithoutLiveOutPersonalInput
  updatedAt: DateTime
}

input LiveOutPersonalMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  personalId: SortOrder
  updatedAt: SortOrder
}

input LiveOutPersonalMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  personalId: SortOrder
  updatedAt: SortOrder
}

input LiveOutPersonalOrderByWithAggregationInput {
  _count: LiveOutPersonalCountOrderByAggregateInput
  _max: LiveOutPersonalMaxOrderByAggregateInput
  _min: LiveOutPersonalMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  personalId: SortOrder
  updatedAt: SortOrder
}

input LiveOutPersonalOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  Out: OutOrderByRelationAggregateInput
  Personal: PersonalOrderByWithRelationInput
  personalId: SortOrder
  updatedAt: SortOrder
}

input LiveOutPersonalRelationFilter {
  is: LiveOutPersonalWhereInput
  isNot: LiveOutPersonalWhereInput
}

enum LiveOutPersonalScalarFieldEnum {
  createdAt
  id
  personalId
  updatedAt
}

input LiveOutPersonalScalarWhereWithAggregatesInput {
  AND: [LiveOutPersonalScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [LiveOutPersonalScalarWhereWithAggregatesInput!]
  OR: [LiveOutPersonalScalarWhereWithAggregatesInput!]
  personalId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input LiveOutPersonalUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Out: OutUpdateManyWithoutLiveOutPersonalNestedInput
  Personal: PersonalUpdateOneRequiredWithoutLiveOutPersonalNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutPersonalUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutPersonalUpdateOneWithoutOutNestedInput {
  connect: LiveOutPersonalWhereUniqueInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutOutInput
  create: LiveOutPersonalCreateWithoutOutInput
  delete: Boolean
  disconnect: Boolean
  update: LiveOutPersonalUpdateWithoutOutInput
  upsert: LiveOutPersonalUpsertWithoutOutInput
}

input LiveOutPersonalUpdateOneWithoutPersonalNestedInput {
  connect: LiveOutPersonalWhereUniqueInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutPersonalInput
  create: LiveOutPersonalCreateWithoutPersonalInput
  delete: Boolean
  disconnect: Boolean
  update: LiveOutPersonalUpdateWithoutPersonalInput
  upsert: LiveOutPersonalUpsertWithoutPersonalInput
}

input LiveOutPersonalUpdateWithoutOutInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Personal: PersonalUpdateOneRequiredWithoutLiveOutPersonalNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutPersonalUpdateWithoutPersonalInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Out: OutUpdateManyWithoutLiveOutPersonalNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutPersonalUpsertWithoutOutInput {
  create: LiveOutPersonalCreateWithoutOutInput!
  update: LiveOutPersonalUpdateWithoutOutInput!
}

input LiveOutPersonalUpsertWithoutPersonalInput {
  create: LiveOutPersonalCreateWithoutPersonalInput!
  update: LiveOutPersonalUpdateWithoutPersonalInput!
}

input LiveOutPersonalWhereInput {
  AND: [LiveOutPersonalWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [LiveOutPersonalWhereInput!]
  OR: [LiveOutPersonalWhereInput!]
  Out: OutListRelationFilter
  Personal: PersonalWhereInput
  personalId: StringFilter
  updatedAt: DateTimeFilter
}

input LiveOutPersonalWhereUniqueInput {
  id: String
  personalId: String
}

type LiveOutVenue {
  createdAt: DateTime!
  id: ID!
  Out(cursor: OutWhereUniqueInput, distinct: [OutScalarFieldEnum!], orderBy: [OutOrderByWithRelationInput!], skip: Int, take: Int, where: OutWhereInput): [Out!]!
  updatedAt: DateTime!
  Venue: Venue!
  venueId: String!
}

input LiveOutVenueCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  venueId: SortOrder
}

input LiveOutVenueCreateInput {
  createdAt: DateTime
  id: String
  Out: OutCreateNestedManyWithoutLiveOutVenueInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutLiveOutVenueInput!
}

input LiveOutVenueCreateManyInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  venueId: String!
}

input LiveOutVenueCreateNestedOneWithoutOutInput {
  connect: LiveOutVenueWhereUniqueInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutOutInput
  create: LiveOutVenueCreateWithoutOutInput
}

input LiveOutVenueCreateNestedOneWithoutVenueInput {
  connect: LiveOutVenueWhereUniqueInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutVenueInput
  create: LiveOutVenueCreateWithoutVenueInput
}

input LiveOutVenueCreateOrConnectWithoutOutInput {
  create: LiveOutVenueCreateWithoutOutInput!
  where: LiveOutVenueWhereUniqueInput!
}

input LiveOutVenueCreateOrConnectWithoutVenueInput {
  create: LiveOutVenueCreateWithoutVenueInput!
  where: LiveOutVenueWhereUniqueInput!
}

input LiveOutVenueCreateWithoutOutInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutLiveOutVenueInput!
}

input LiveOutVenueCreateWithoutVenueInput {
  createdAt: DateTime
  id: String
  Out: OutCreateNestedManyWithoutLiveOutVenueInput
  updatedAt: DateTime
}

input LiveOutVenueMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  venueId: SortOrder
}

input LiveOutVenueMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  venueId: SortOrder
}

input LiveOutVenueOrderByWithAggregationInput {
  _count: LiveOutVenueCountOrderByAggregateInput
  _max: LiveOutVenueMaxOrderByAggregateInput
  _min: LiveOutVenueMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  venueId: SortOrder
}

input LiveOutVenueOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  Out: OutOrderByRelationAggregateInput
  updatedAt: SortOrder
  Venue: VenueOrderByWithRelationInput
  venueId: SortOrder
}

input LiveOutVenueRelationFilter {
  is: LiveOutVenueWhereInput
  isNot: LiveOutVenueWhereInput
}

enum LiveOutVenueScalarFieldEnum {
  createdAt
  id
  updatedAt
  venueId
}

input LiveOutVenueScalarWhereWithAggregatesInput {
  AND: [LiveOutVenueScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [LiveOutVenueScalarWhereWithAggregatesInput!]
  OR: [LiveOutVenueScalarWhereWithAggregatesInput!]
  updatedAt: DateTimeWithAggregatesFilter
  venueId: StringWithAggregatesFilter
}

input LiveOutVenueUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Out: OutUpdateManyWithoutLiveOutVenueNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneRequiredWithoutLiveOutVenueNestedInput
}

input LiveOutVenueUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutVenueUpdateOneWithoutOutNestedInput {
  connect: LiveOutVenueWhereUniqueInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutOutInput
  create: LiveOutVenueCreateWithoutOutInput
  delete: Boolean
  disconnect: Boolean
  update: LiveOutVenueUpdateWithoutOutInput
  upsert: LiveOutVenueUpsertWithoutOutInput
}

input LiveOutVenueUpdateOneWithoutVenueNestedInput {
  connect: LiveOutVenueWhereUniqueInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutVenueInput
  create: LiveOutVenueCreateWithoutVenueInput
  delete: Boolean
  disconnect: Boolean
  update: LiveOutVenueUpdateWithoutVenueInput
  upsert: LiveOutVenueUpsertWithoutVenueInput
}

input LiveOutVenueUpdateWithoutOutInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneRequiredWithoutLiveOutVenueNestedInput
}

input LiveOutVenueUpdateWithoutVenueInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Out: OutUpdateManyWithoutLiveOutVenueNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutVenueUpsertWithoutOutInput {
  create: LiveOutVenueCreateWithoutOutInput!
  update: LiveOutVenueUpdateWithoutOutInput!
}

input LiveOutVenueUpsertWithoutVenueInput {
  create: LiveOutVenueCreateWithoutVenueInput!
  update: LiveOutVenueUpdateWithoutVenueInput!
}

input LiveOutVenueWhereInput {
  AND: [LiveOutVenueWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [LiveOutVenueWhereInput!]
  OR: [LiveOutVenueWhereInput!]
  Out: OutListRelationFilter
  updatedAt: DateTimeFilter
  Venue: VenueWhereInput
  venueId: StringFilter
}

input LiveOutVenueWhereUniqueInput {
  id: String
  venueId: String
}

type LiveVenueTotals {
  joined: [Out!]!
  totaled: [Out!]!
}

type Location {
  Address: Address
  addressId: String
  createdAt: DateTime!
  Geometry: Geometry
  geometryId: Int
  h3Index: String!
  id: ID!
  plusCode: PluseCode
  pluseCodeId: String
  updatedAt: DateTime!
  Venue: Venue
  venueId: String
}

input LocationAvgOrderByAggregateInput {
  geometryId: SortOrder
}

input LocationCountOrderByAggregateInput {
  addressId: SortOrder
  createdAt: SortOrder
  geometryId: SortOrder
  h3Index: SortOrder
  id: SortOrder
  pluseCodeId: SortOrder
  updatedAt: SortOrder
  venueId: SortOrder
}

input LocationCreateInput {
  Address: AddressCreateNestedOneWithoutLocationInput
  createdAt: DateTime
  Geometry: GeometryCreateNestedOneWithoutLocationInput
  h3Index: String!
  id: String
  plusCode: PluseCodeCreateNestedOneWithoutLocationInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutLocationInput
}

input LocationCreateManyAddressInput {
  createdAt: DateTime
  geometryId: Int
  h3Index: String!
  id: String
  pluseCodeId: String
  updatedAt: DateTime
  venueId: String
}

input LocationCreateManyAddressInputEnvelope {
  data: [LocationCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input LocationCreateManyInput {
  addressId: String
  createdAt: DateTime
  geometryId: Int
  h3Index: String!
  id: String
  pluseCodeId: String
  updatedAt: DateTime
  venueId: String
}

input LocationCreateNestedManyWithoutAddressInput {
  connect: [LocationWhereUniqueInput!]
  connectOrCreate: [LocationCreateOrConnectWithoutAddressInput!]
  create: LocationCreateWithoutAddressInput
  createMany: LocationCreateManyAddressInputEnvelope
}

input LocationCreateNestedOneWithoutGeometryInput {
  connect: LocationWhereUniqueInput
  connectOrCreate: LocationCreateOrConnectWithoutGeometryInput
  create: LocationCreateWithoutGeometryInput
}

input LocationCreateNestedOneWithoutPlusCodeInput {
  connect: LocationWhereUniqueInput
  connectOrCreate: LocationCreateOrConnectWithoutPlusCodeInput
  create: LocationCreateWithoutPlusCodeInput
}

input LocationCreateNestedOneWithoutVenueInput {
  connect: LocationWhereUniqueInput
  connectOrCreate: LocationCreateOrConnectWithoutVenueInput
  create: LocationCreateWithoutVenueInput
}

input LocationCreateOrConnectWithoutAddressInput {
  create: LocationCreateWithoutAddressInput!
  where: LocationWhereUniqueInput!
}

input LocationCreateOrConnectWithoutGeometryInput {
  create: LocationCreateWithoutGeometryInput!
  where: LocationWhereUniqueInput!
}

input LocationCreateOrConnectWithoutPlusCodeInput {
  create: LocationCreateWithoutPlusCodeInput!
  where: LocationWhereUniqueInput!
}

input LocationCreateOrConnectWithoutVenueInput {
  create: LocationCreateWithoutVenueInput!
  where: LocationWhereUniqueInput!
}

input LocationCreateWithoutAddressInput {
  createdAt: DateTime
  Geometry: GeometryCreateNestedOneWithoutLocationInput
  h3Index: String!
  id: String
  plusCode: PluseCodeCreateNestedOneWithoutLocationInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutLocationInput
}

input LocationCreateWithoutGeometryInput {
  Address: AddressCreateNestedOneWithoutLocationInput
  createdAt: DateTime
  h3Index: String!
  id: String
  plusCode: PluseCodeCreateNestedOneWithoutLocationInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutLocationInput
}

input LocationCreateWithoutPlusCodeInput {
  Address: AddressCreateNestedOneWithoutLocationInput
  createdAt: DateTime
  Geometry: GeometryCreateNestedOneWithoutLocationInput
  h3Index: String!
  id: String
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutLocationInput
}

input LocationCreateWithoutVenueInput {
  Address: AddressCreateNestedOneWithoutLocationInput
  createdAt: DateTime
  Geometry: GeometryCreateNestedOneWithoutLocationInput
  h3Index: String!
  id: String
  plusCode: PluseCodeCreateNestedOneWithoutLocationInput
  updatedAt: DateTime
}

input LocationListRelationFilter {
  every: LocationWhereInput
  none: LocationWhereInput
  some: LocationWhereInput
}

input LocationMaxOrderByAggregateInput {
  addressId: SortOrder
  createdAt: SortOrder
  geometryId: SortOrder
  h3Index: SortOrder
  id: SortOrder
  pluseCodeId: SortOrder
  updatedAt: SortOrder
  venueId: SortOrder
}

input LocationMinOrderByAggregateInput {
  addressId: SortOrder
  createdAt: SortOrder
  geometryId: SortOrder
  h3Index: SortOrder
  id: SortOrder
  pluseCodeId: SortOrder
  updatedAt: SortOrder
  venueId: SortOrder
}

input LocationOrderByRelationAggregateInput {
  _count: SortOrder
}

input LocationOrderByWithAggregationInput {
  _avg: LocationAvgOrderByAggregateInput
  _count: LocationCountOrderByAggregateInput
  _max: LocationMaxOrderByAggregateInput
  _min: LocationMinOrderByAggregateInput
  _sum: LocationSumOrderByAggregateInput
  addressId: SortOrder
  createdAt: SortOrder
  geometryId: SortOrder
  h3Index: SortOrder
  id: SortOrder
  pluseCodeId: SortOrder
  updatedAt: SortOrder
  venueId: SortOrder
}

input LocationOrderByWithRelationInput {
  Address: AddressOrderByWithRelationInput
  addressId: SortOrder
  createdAt: SortOrder
  Geometry: GeometryOrderByWithRelationInput
  geometryId: SortOrder
  h3Index: SortOrder
  id: SortOrder
  plusCode: PluseCodeOrderByWithRelationInput
  pluseCodeId: SortOrder
  updatedAt: SortOrder
  Venue: VenueOrderByWithRelationInput
  venueId: SortOrder
}

input LocationRelationFilter {
  is: LocationWhereInput
  isNot: LocationWhereInput
}

enum LocationScalarFieldEnum {
  addressId
  createdAt
  geometryId
  h3Index
  id
  pluseCodeId
  updatedAt
  venueId
}

input LocationScalarWhereInput {
  addressId: StringNullableFilter
  AND: [LocationScalarWhereInput!]
  createdAt: DateTimeFilter
  geometryId: IntNullableFilter
  h3Index: StringFilter
  id: StringFilter
  NOT: [LocationScalarWhereInput!]
  OR: [LocationScalarWhereInput!]
  pluseCodeId: StringNullableFilter
  updatedAt: DateTimeFilter
  venueId: StringNullableFilter
}

input LocationScalarWhereWithAggregatesInput {
  addressId: StringNullableWithAggregatesFilter
  AND: [LocationScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  geometryId: IntNullableWithAggregatesFilter
  h3Index: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [LocationScalarWhereWithAggregatesInput!]
  OR: [LocationScalarWhereWithAggregatesInput!]
  pluseCodeId: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  venueId: StringNullableWithAggregatesFilter
}

input LocationSumOrderByAggregateInput {
  geometryId: SortOrder
}

input LocationUpdateInput {
  Address: AddressUpdateOneWithoutLocationNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Geometry: GeometryUpdateOneWithoutLocationNestedInput
  h3Index: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  plusCode: PluseCodeUpdateOneWithoutLocationNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutLocationNestedInput
}

input LocationUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LocationUpdateManyWithoutAddressNestedInput {
  connect: [LocationWhereUniqueInput!]
  connectOrCreate: [LocationCreateOrConnectWithoutAddressInput!]
  create: LocationCreateWithoutAddressInput
  createMany: LocationCreateManyAddressInputEnvelope
  delete: [LocationWhereUniqueInput!]
  deleteMany: [LocationScalarWhereInput!]
  disconnect: [LocationWhereUniqueInput!]
  set: [LocationWhereUniqueInput!]
  update: [LocationUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [LocationUpdateManyWithWhereWithoutAddressInput!]
  upsert: [LocationUpsertWithWhereUniqueWithoutAddressInput!]
}

input LocationUpdateManyWithWhereWithoutAddressInput {
  data: LocationUpdateManyMutationInput!
  where: LocationScalarWhereInput!
}

input LocationUpdateOneWithoutGeometryNestedInput {
  connect: LocationWhereUniqueInput
  connectOrCreate: LocationCreateOrConnectWithoutGeometryInput
  create: LocationCreateWithoutGeometryInput
  delete: Boolean
  disconnect: Boolean
  update: LocationUpdateWithoutGeometryInput
  upsert: LocationUpsertWithoutGeometryInput
}

input LocationUpdateOneWithoutPlusCodeNestedInput {
  connect: LocationWhereUniqueInput
  connectOrCreate: LocationCreateOrConnectWithoutPlusCodeInput
  create: LocationCreateWithoutPlusCodeInput
  delete: Boolean
  disconnect: Boolean
  update: LocationUpdateWithoutPlusCodeInput
  upsert: LocationUpsertWithoutPlusCodeInput
}

input LocationUpdateOneWithoutVenueNestedInput {
  connect: LocationWhereUniqueInput
  connectOrCreate: LocationCreateOrConnectWithoutVenueInput
  create: LocationCreateWithoutVenueInput
  delete: Boolean
  disconnect: Boolean
  update: LocationUpdateWithoutVenueInput
  upsert: LocationUpsertWithoutVenueInput
}

input LocationUpdateWithoutAddressInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  Geometry: GeometryUpdateOneWithoutLocationNestedInput
  h3Index: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  plusCode: PluseCodeUpdateOneWithoutLocationNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutLocationNestedInput
}

input LocationUpdateWithoutGeometryInput {
  Address: AddressUpdateOneWithoutLocationNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  plusCode: PluseCodeUpdateOneWithoutLocationNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutLocationNestedInput
}

input LocationUpdateWithoutPlusCodeInput {
  Address: AddressUpdateOneWithoutLocationNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Geometry: GeometryUpdateOneWithoutLocationNestedInput
  h3Index: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutLocationNestedInput
}

input LocationUpdateWithoutVenueInput {
  Address: AddressUpdateOneWithoutLocationNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Geometry: GeometryUpdateOneWithoutLocationNestedInput
  h3Index: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  plusCode: PluseCodeUpdateOneWithoutLocationNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LocationUpdateWithWhereUniqueWithoutAddressInput {
  data: LocationUpdateWithoutAddressInput!
  where: LocationWhereUniqueInput!
}

input LocationUpsertWithoutGeometryInput {
  create: LocationCreateWithoutGeometryInput!
  update: LocationUpdateWithoutGeometryInput!
}

input LocationUpsertWithoutPlusCodeInput {
  create: LocationCreateWithoutPlusCodeInput!
  update: LocationUpdateWithoutPlusCodeInput!
}

input LocationUpsertWithoutVenueInput {
  create: LocationCreateWithoutVenueInput!
  update: LocationUpdateWithoutVenueInput!
}

input LocationUpsertWithWhereUniqueWithoutAddressInput {
  create: LocationCreateWithoutAddressInput!
  update: LocationUpdateWithoutAddressInput!
  where: LocationWhereUniqueInput!
}

input LocationWhereInput {
  Address: AddressWhereInput
  addressId: StringNullableFilter
  AND: [LocationWhereInput!]
  createdAt: DateTimeFilter
  Geometry: GeometryWhereInput
  geometryId: IntNullableFilter
  h3Index: StringFilter
  id: StringFilter
  NOT: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  plusCode: PluseCodeWhereInput
  pluseCodeId: StringNullableFilter
  updatedAt: DateTimeFilter
  Venue: VenueWhereInput
  venueId: StringNullableFilter
}

input LocationWhereUniqueInput {
  geometryId: Int
  id: String
  pluseCodeId: String
  venueId: String
}

input MessageCountOrderByAggregateInput {
  chatroomId: SortOrder
  id: SortOrder
  message: SortOrder
  responseId: SortOrder
  senderId: SortOrder
}

input MessageCreateInput {
  Chatroom: ChatroomCreateNestedOneWithoutMessagesInput
  id: String
  message: String!
  response: MessageCreateNestedOneWithoutResponsesInput
  responses: MessageCreateNestedManyWithoutResponseInput
  senderId: String!
}

input MessageCreateManyChatroomInput {
  id: String
  message: String!
  responseId: String
  senderId: String!
}

input MessageCreateManyChatroomInputEnvelope {
  data: [MessageCreateManyChatroomInput!]!
  skipDuplicates: Boolean
}

input MessageCreateManyInput {
  chatroomId: String
  id: String
  message: String!
  responseId: String
  senderId: String!
}

input MessageCreateManyResponseInput {
  chatroomId: String
  id: String
  message: String!
  senderId: String!
}

input MessageCreateManyResponseInputEnvelope {
  data: [MessageCreateManyResponseInput!]!
  skipDuplicates: Boolean
}

input MessageCreateNestedManyWithoutChatroomInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutChatroomInput!]
  create: MessageCreateWithoutChatroomInput
  createMany: MessageCreateManyChatroomInputEnvelope
}

input MessageCreateNestedManyWithoutResponseInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutResponseInput!]
  create: MessageCreateWithoutResponseInput
  createMany: MessageCreateManyResponseInputEnvelope
}

input MessageCreateNestedOneWithoutResponsesInput {
  connect: MessageWhereUniqueInput
  connectOrCreate: MessageCreateOrConnectWithoutResponsesInput
  create: MessageCreateWithoutResponsesInput
}

input MessageCreateOrConnectWithoutChatroomInput {
  create: MessageCreateWithoutChatroomInput!
  where: MessageWhereUniqueInput!
}

input MessageCreateOrConnectWithoutResponseInput {
  create: MessageCreateWithoutResponseInput!
  where: MessageWhereUniqueInput!
}

input MessageCreateOrConnectWithoutResponsesInput {
  create: MessageCreateWithoutResponsesInput!
  where: MessageWhereUniqueInput!
}

input MessageCreateWithoutChatroomInput {
  id: String
  message: String!
  response: MessageCreateNestedOneWithoutResponsesInput
  responses: MessageCreateNestedManyWithoutResponseInput
  senderId: String!
}

input MessageCreateWithoutResponseInput {
  Chatroom: ChatroomCreateNestedOneWithoutMessagesInput
  id: String
  message: String!
  responses: MessageCreateNestedManyWithoutResponseInput
  senderId: String!
}

input MessageCreateWithoutResponsesInput {
  Chatroom: ChatroomCreateNestedOneWithoutMessagesInput
  id: String
  message: String!
  response: MessageCreateNestedOneWithoutResponsesInput
  senderId: String!
}

input MessageListRelationFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

input MessageMaxOrderByAggregateInput {
  chatroomId: SortOrder
  id: SortOrder
  message: SortOrder
  responseId: SortOrder
  senderId: SortOrder
}

input MessageMinOrderByAggregateInput {
  chatroomId: SortOrder
  id: SortOrder
  message: SortOrder
  responseId: SortOrder
  senderId: SortOrder
}

input MessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input MessageOrderByWithAggregationInput {
  _count: MessageCountOrderByAggregateInput
  _max: MessageMaxOrderByAggregateInput
  _min: MessageMinOrderByAggregateInput
  chatroomId: SortOrder
  id: SortOrder
  message: SortOrder
  responseId: SortOrder
  senderId: SortOrder
}

input MessageOrderByWithRelationInput {
  Chatroom: ChatroomOrderByWithRelationInput
  chatroomId: SortOrder
  id: SortOrder
  message: SortOrder
  response: MessageOrderByWithRelationInput
  responseId: SortOrder
  responses: MessageOrderByRelationAggregateInput
  senderId: SortOrder
}

input MessageRelationFilter {
  is: MessageWhereInput
  isNot: MessageWhereInput
}

enum MessageScalarFieldEnum {
  chatroomId
  id
  message
  responseId
  senderId
}

input MessageScalarWhereInput {
  AND: [MessageScalarWhereInput!]
  chatroomId: StringNullableFilter
  id: StringFilter
  message: StringFilter
  NOT: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  responseId: StringNullableFilter
  senderId: StringFilter
}

input MessageScalarWhereWithAggregatesInput {
  AND: [MessageScalarWhereWithAggregatesInput!]
  chatroomId: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  message: StringWithAggregatesFilter
  NOT: [MessageScalarWhereWithAggregatesInput!]
  OR: [MessageScalarWhereWithAggregatesInput!]
  responseId: StringNullableWithAggregatesFilter
  senderId: StringWithAggregatesFilter
}

input MessageUpdateInput {
  Chatroom: ChatroomUpdateOneWithoutMessagesNestedInput
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  response: MessageUpdateOneWithoutResponsesNestedInput
  responses: MessageUpdateManyWithoutResponseNestedInput
  senderId: StringFieldUpdateOperationsInput
}

input MessageUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  senderId: StringFieldUpdateOperationsInput
}

input MessageUpdateManyWithoutChatroomNestedInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutChatroomInput!]
  create: MessageCreateWithoutChatroomInput
  createMany: MessageCreateManyChatroomInputEnvelope
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutChatroomInput!]
  updateMany: [MessageUpdateManyWithWhereWithoutChatroomInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutChatroomInput!]
}

input MessageUpdateManyWithoutResponseNestedInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutResponseInput!]
  create: MessageCreateWithoutResponseInput
  createMany: MessageCreateManyResponseInputEnvelope
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutResponseInput!]
  updateMany: [MessageUpdateManyWithWhereWithoutResponseInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutResponseInput!]
}

input MessageUpdateManyWithWhereWithoutChatroomInput {
  data: MessageUpdateManyMutationInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateManyWithWhereWithoutResponseInput {
  data: MessageUpdateManyMutationInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateOneWithoutResponsesNestedInput {
  connect: MessageWhereUniqueInput
  connectOrCreate: MessageCreateOrConnectWithoutResponsesInput
  create: MessageCreateWithoutResponsesInput
  delete: Boolean
  disconnect: Boolean
  update: MessageUpdateWithoutResponsesInput
  upsert: MessageUpsertWithoutResponsesInput
}

input MessageUpdateWithoutChatroomInput {
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  response: MessageUpdateOneWithoutResponsesNestedInput
  responses: MessageUpdateManyWithoutResponseNestedInput
  senderId: StringFieldUpdateOperationsInput
}

input MessageUpdateWithoutResponseInput {
  Chatroom: ChatroomUpdateOneWithoutMessagesNestedInput
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  responses: MessageUpdateManyWithoutResponseNestedInput
  senderId: StringFieldUpdateOperationsInput
}

input MessageUpdateWithoutResponsesInput {
  Chatroom: ChatroomUpdateOneWithoutMessagesNestedInput
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  response: MessageUpdateOneWithoutResponsesNestedInput
  senderId: StringFieldUpdateOperationsInput
}

input MessageUpdateWithWhereUniqueWithoutChatroomInput {
  data: MessageUpdateWithoutChatroomInput!
  where: MessageWhereUniqueInput!
}

input MessageUpdateWithWhereUniqueWithoutResponseInput {
  data: MessageUpdateWithoutResponseInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithoutResponsesInput {
  create: MessageCreateWithoutResponsesInput!
  update: MessageUpdateWithoutResponsesInput!
}

input MessageUpsertWithWhereUniqueWithoutChatroomInput {
  create: MessageCreateWithoutChatroomInput!
  update: MessageUpdateWithoutChatroomInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutResponseInput {
  create: MessageCreateWithoutResponseInput!
  update: MessageUpdateWithoutResponseInput!
  where: MessageWhereUniqueInput!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  Chatroom: ChatroomWhereInput
  chatroomId: StringNullableFilter
  id: StringFilter
  message: StringFilter
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  response: MessageWhereInput
  responseId: StringNullableFilter
  responses: MessageListRelationFilter
  senderId: StringFilter
}

input MessageWhereUniqueInput {
  id: String
}

input MetricsHomeCollectionAvgOrderByAggregateInput {
  id: SortOrder
}

input MetricsHomeCollectionCountOrderByAggregateInput {
  createdAt: SortOrder
  h3Index15: SortOrder
  h3Index5VenueRecommendationId: SortOrder
  h3Index6VenueRecommendationId: SortOrder
  id: SortOrder
}

input MetricsHomeCollectionCreateInput {
  createdAt: DateTime
  h3Index15: String
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutMetricsHomeCollectionInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutMetricsCollectionInput
}

input MetricsHomeCollectionCreateManyH3Index5VenueRecommendationInput {
  createdAt: DateTime
  h3Index15: String
  h3Index6VenueRecommendationId: String
  id: Int
}

input MetricsHomeCollectionCreateManyH3Index5VenueRecommendationInputEnvelope {
  data: [MetricsHomeCollectionCreateManyH3Index5VenueRecommendationInput!]!
  skipDuplicates: Boolean
}

input MetricsHomeCollectionCreateManyH3Index6VenueRecommendationInput {
  createdAt: DateTime
  h3Index15: String
  h3Index5VenueRecommendationId: String
  id: Int
}

input MetricsHomeCollectionCreateManyH3Index6VenueRecommendationInputEnvelope {
  data: [MetricsHomeCollectionCreateManyH3Index6VenueRecommendationInput!]!
  skipDuplicates: Boolean
}

input MetricsHomeCollectionCreateManyInput {
  createdAt: DateTime
  h3Index15: String
  h3Index5VenueRecommendationId: String
  h3Index6VenueRecommendationId: String
  id: Int
}

input MetricsHomeCollectionCreateNestedManyWithoutH3Index5VenueRecommendationInput {
  connect: [MetricsHomeCollectionWhereUniqueInput!]
  connectOrCreate: [MetricsHomeCollectionCreateOrConnectWithoutH3Index5VenueRecommendationInput!]
  create: MetricsHomeCollectionCreateWithoutH3Index5VenueRecommendationInput
  createMany: MetricsHomeCollectionCreateManyH3Index5VenueRecommendationInputEnvelope
}

input MetricsHomeCollectionCreateNestedManyWithoutH3Index6VenueRecommendationInput {
  connect: [MetricsHomeCollectionWhereUniqueInput!]
  connectOrCreate: [MetricsHomeCollectionCreateOrConnectWithoutH3Index6VenueRecommendationInput!]
  create: MetricsHomeCollectionCreateWithoutH3Index6VenueRecommendationInput
  createMany: MetricsHomeCollectionCreateManyH3Index6VenueRecommendationInputEnvelope
}

input MetricsHomeCollectionCreateOrConnectWithoutH3Index5VenueRecommendationInput {
  create: MetricsHomeCollectionCreateWithoutH3Index5VenueRecommendationInput!
  where: MetricsHomeCollectionWhereUniqueInput!
}

input MetricsHomeCollectionCreateOrConnectWithoutH3Index6VenueRecommendationInput {
  create: MetricsHomeCollectionCreateWithoutH3Index6VenueRecommendationInput!
  where: MetricsHomeCollectionWhereUniqueInput!
}

input MetricsHomeCollectionCreateWithoutH3Index5VenueRecommendationInput {
  createdAt: DateTime
  h3Index15: String
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutMetricsCollectionInput
}

input MetricsHomeCollectionCreateWithoutH3Index6VenueRecommendationInput {
  createdAt: DateTime
  h3Index15: String
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutMetricsHomeCollectionInput
}

input MetricsHomeCollectionListRelationFilter {
  every: MetricsHomeCollectionWhereInput
  none: MetricsHomeCollectionWhereInput
  some: MetricsHomeCollectionWhereInput
}

input MetricsHomeCollectionMaxOrderByAggregateInput {
  createdAt: SortOrder
  h3Index15: SortOrder
  h3Index5VenueRecommendationId: SortOrder
  h3Index6VenueRecommendationId: SortOrder
  id: SortOrder
}

input MetricsHomeCollectionMinOrderByAggregateInput {
  createdAt: SortOrder
  h3Index15: SortOrder
  h3Index5VenueRecommendationId: SortOrder
  h3Index6VenueRecommendationId: SortOrder
  id: SortOrder
}

input MetricsHomeCollectionOrderByRelationAggregateInput {
  _count: SortOrder
}

input MetricsHomeCollectionOrderByWithAggregationInput {
  _avg: MetricsHomeCollectionAvgOrderByAggregateInput
  _count: MetricsHomeCollectionCountOrderByAggregateInput
  _max: MetricsHomeCollectionMaxOrderByAggregateInput
  _min: MetricsHomeCollectionMinOrderByAggregateInput
  _sum: MetricsHomeCollectionSumOrderByAggregateInput
  createdAt: SortOrder
  h3Index15: SortOrder
  h3Index5VenueRecommendationId: SortOrder
  h3Index6VenueRecommendationId: SortOrder
  id: SortOrder
}

input MetricsHomeCollectionOrderByWithRelationInput {
  createdAt: SortOrder
  h3Index15: SortOrder
  H3Index5VenueRecommendation: H3Index5VenueRecommendationOrderByWithRelationInput
  h3Index5VenueRecommendationId: SortOrder
  H3Index6VenueRecommendation: H3Index6VenueRecommendationOrderByWithRelationInput
  h3Index6VenueRecommendationId: SortOrder
  id: SortOrder
}

enum MetricsHomeCollectionScalarFieldEnum {
  createdAt
  h3Index15
  h3Index5VenueRecommendationId
  h3Index6VenueRecommendationId
  id
}

input MetricsHomeCollectionScalarWhereInput {
  AND: [MetricsHomeCollectionScalarWhereInput!]
  createdAt: DateTimeFilter
  h3Index15: StringNullableFilter
  h3Index5VenueRecommendationId: StringNullableFilter
  h3Index6VenueRecommendationId: StringNullableFilter
  id: IntFilter
  NOT: [MetricsHomeCollectionScalarWhereInput!]
  OR: [MetricsHomeCollectionScalarWhereInput!]
}

input MetricsHomeCollectionScalarWhereWithAggregatesInput {
  AND: [MetricsHomeCollectionScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  h3Index15: StringNullableWithAggregatesFilter
  h3Index5VenueRecommendationId: StringNullableWithAggregatesFilter
  h3Index6VenueRecommendationId: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  NOT: [MetricsHomeCollectionScalarWhereWithAggregatesInput!]
  OR: [MetricsHomeCollectionScalarWhereWithAggregatesInput!]
}

input MetricsHomeCollectionSumOrderByAggregateInput {
  id: SortOrder
}

input MetricsHomeCollectionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  h3Index15: NullableStringFieldUpdateOperationsInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutMetricsHomeCollectionNestedInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutMetricsCollectionNestedInput
}

input MetricsHomeCollectionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  h3Index15: NullableStringFieldUpdateOperationsInput
}

input MetricsHomeCollectionUpdateManyWithoutH3Index5VenueRecommendationNestedInput {
  connect: [MetricsHomeCollectionWhereUniqueInput!]
  connectOrCreate: [MetricsHomeCollectionCreateOrConnectWithoutH3Index5VenueRecommendationInput!]
  create: MetricsHomeCollectionCreateWithoutH3Index5VenueRecommendationInput
  createMany: MetricsHomeCollectionCreateManyH3Index5VenueRecommendationInputEnvelope
  delete: [MetricsHomeCollectionWhereUniqueInput!]
  deleteMany: [MetricsHomeCollectionScalarWhereInput!]
  disconnect: [MetricsHomeCollectionWhereUniqueInput!]
  set: [MetricsHomeCollectionWhereUniqueInput!]
  update: [MetricsHomeCollectionUpdateWithWhereUniqueWithoutH3Index5VenueRecommendationInput!]
  updateMany: [MetricsHomeCollectionUpdateManyWithWhereWithoutH3Index5VenueRecommendationInput!]
  upsert: [MetricsHomeCollectionUpsertWithWhereUniqueWithoutH3Index5VenueRecommendationInput!]
}

input MetricsHomeCollectionUpdateManyWithoutH3Index6VenueRecommendationNestedInput {
  connect: [MetricsHomeCollectionWhereUniqueInput!]
  connectOrCreate: [MetricsHomeCollectionCreateOrConnectWithoutH3Index6VenueRecommendationInput!]
  create: MetricsHomeCollectionCreateWithoutH3Index6VenueRecommendationInput
  createMany: MetricsHomeCollectionCreateManyH3Index6VenueRecommendationInputEnvelope
  delete: [MetricsHomeCollectionWhereUniqueInput!]
  deleteMany: [MetricsHomeCollectionScalarWhereInput!]
  disconnect: [MetricsHomeCollectionWhereUniqueInput!]
  set: [MetricsHomeCollectionWhereUniqueInput!]
  update: [MetricsHomeCollectionUpdateWithWhereUniqueWithoutH3Index6VenueRecommendationInput!]
  updateMany: [MetricsHomeCollectionUpdateManyWithWhereWithoutH3Index6VenueRecommendationInput!]
  upsert: [MetricsHomeCollectionUpsertWithWhereUniqueWithoutH3Index6VenueRecommendationInput!]
}

input MetricsHomeCollectionUpdateManyWithWhereWithoutH3Index5VenueRecommendationInput {
  data: MetricsHomeCollectionUpdateManyMutationInput!
  where: MetricsHomeCollectionScalarWhereInput!
}

input MetricsHomeCollectionUpdateManyWithWhereWithoutH3Index6VenueRecommendationInput {
  data: MetricsHomeCollectionUpdateManyMutationInput!
  where: MetricsHomeCollectionScalarWhereInput!
}

input MetricsHomeCollectionUpdateWithoutH3Index5VenueRecommendationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  h3Index15: NullableStringFieldUpdateOperationsInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutMetricsCollectionNestedInput
}

input MetricsHomeCollectionUpdateWithoutH3Index6VenueRecommendationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  h3Index15: NullableStringFieldUpdateOperationsInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutMetricsHomeCollectionNestedInput
}

input MetricsHomeCollectionUpdateWithWhereUniqueWithoutH3Index5VenueRecommendationInput {
  data: MetricsHomeCollectionUpdateWithoutH3Index5VenueRecommendationInput!
  where: MetricsHomeCollectionWhereUniqueInput!
}

input MetricsHomeCollectionUpdateWithWhereUniqueWithoutH3Index6VenueRecommendationInput {
  data: MetricsHomeCollectionUpdateWithoutH3Index6VenueRecommendationInput!
  where: MetricsHomeCollectionWhereUniqueInput!
}

input MetricsHomeCollectionUpsertWithWhereUniqueWithoutH3Index5VenueRecommendationInput {
  create: MetricsHomeCollectionCreateWithoutH3Index5VenueRecommendationInput!
  update: MetricsHomeCollectionUpdateWithoutH3Index5VenueRecommendationInput!
  where: MetricsHomeCollectionWhereUniqueInput!
}

input MetricsHomeCollectionUpsertWithWhereUniqueWithoutH3Index6VenueRecommendationInput {
  create: MetricsHomeCollectionCreateWithoutH3Index6VenueRecommendationInput!
  update: MetricsHomeCollectionUpdateWithoutH3Index6VenueRecommendationInput!
  where: MetricsHomeCollectionWhereUniqueInput!
}

input MetricsHomeCollectionWhereInput {
  AND: [MetricsHomeCollectionWhereInput!]
  createdAt: DateTimeFilter
  h3Index15: StringNullableFilter
  H3Index5VenueRecommendation: H3Index5VenueRecommendationWhereInput
  h3Index5VenueRecommendationId: StringNullableFilter
  H3Index6VenueRecommendation: H3Index6VenueRecommendationWhereInput
  h3Index6VenueRecommendationId: StringNullableFilter
  id: IntFilter
  NOT: [MetricsHomeCollectionWhereInput!]
  OR: [MetricsHomeCollectionWhereInput!]
}

input MetricsHomeCollectionWhereUniqueInput {
  id: Int
}

type Mutation {
  acceptFriendRequest(friendRequestId: String!, venueIdMetAt: String): Relationship!
  addPersonalJoinsVenue(profileIdPersonal: String, profileIdVenue: String): Profile!
  addPersonalTotalsVenue(profileIdPersonal: String, profileIdVenue: String): Boolean!
  checkManaging: Boolean!
  checkThePink: Boolean!
  createADeviceManager(profileId: String!): ClientDeviceManager!
  createFriendRequest(receiversProfileId: [String!]!, senderProfileId: String!): Boolean!
  createGuestProfile: ProfileResponseUnion!
  createPersonalProfile(data: CreatePersonalDataInput): ProfileResponseUnion!
  createVenueProfile(data: CreateVenueDataInput): ProfileResponseUnion!
  declineFriendRequest(friendRequestId: String!): Boolean!
  deleteFriendRequest(friendRequestId: String!): Boolean!
  qrAddFriend(dataHash: String!, qrCodeProfileId: String!): Relationship!
  refreshDeviceManager: RefreshDeviceManagerDeviceManagerResponseUnion!
  removeAllFromVenue(profileIdVenue: String): Boolean!
  removeDeviceProfileFromDeviceManager(profileId: String!, profileType: ProfileType): Boolean!
  removeFriend(relationshipId: String!): Boolean!
  removePersonalJoinsVenue(outId: String!): Profile!
  removePersonalTotalsVenue(profileIdPersonal: String, profileIdVenue: String): Boolean!
  sendAuthenticatorDeviceOwnerCode(data: CodeDataInput, where: CustomCodeWhereInput): CodeResponse!
  sendAuthenticatorForgotPasswordCode(data: CodeDataInput, where: CustomCodeWhereInput): CodeResponse!
  switchDeviceProfile(profileId: String!, profileType: ProfileType): RefreshDeviceManagerDeviceManagerResponseUnion!
  updateOneProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateProfileIdentifiableInformation(data: IdentifiableInformationUpdateInput!): ProfileResponseUnion!
  updateStoryEmojimood(emojimoodId: Int!, storyId: String): Boolean!
  updateStoryPhotos(disconnectId: String, photos: PhotoCreateManyProfileInputEnvelope, storyId: String): Boolean!
  updateThemeManagerSwitchTheme(id: String!, themeId: String!): ProfileTheme!
  upsertDevicePushToken(androidToken: String, appleToken: String, expoToken: String): Boolean!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedBoolNullableFilter
  _min: NestedBoolNullableFilter
  equals: Boolean
  not: NestedBoolNullableWithAggregatesFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumAppTypeNullableFilter {
  equals: AppType
  in: [AppType!]
  not: AppType
  notIn: [AppType!]
}

input NestedEnumAppTypeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumAppTypeNullableFilter
  _min: NestedEnumAppTypeNullableFilter
  equals: AppType
  in: [AppType!]
  not: AppType
  notIn: [AppType!]
}

input NestedEnumOutTypeFilter {
  equals: OutType
  in: [OutType!]
  not: OutType
  notIn: [OutType!]
}

input NestedEnumOutTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumOutTypeFilter
  _min: NestedEnumOutTypeFilter
  equals: OutType
  in: [OutType!]
  not: OutType
  notIn: [OutType!]
}

input NestedEnumPhotoTypeNullableFilter {
  equals: PhotoType
  in: [PhotoType!]
  not: PhotoType
  notIn: [PhotoType!]
}

input NestedEnumPhotoTypeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumPhotoTypeNullableFilter
  _min: NestedEnumPhotoTypeNullableFilter
  equals: PhotoType
  in: [PhotoType!]
  not: PhotoType
  notIn: [PhotoType!]
}

input NestedEnumProfileTypeFilter {
  equals: ProfileType
  in: [ProfileType!]
  not: ProfileType
  notIn: [ProfileType!]
}

input NestedEnumProfileTypeNullableFilter {
  equals: ProfileType
  in: [ProfileType!]
  not: ProfileType
  notIn: [ProfileType!]
}

input NestedEnumProfileTypeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumProfileTypeNullableFilter
  _min: NestedEnumProfileTypeNullableFilter
  equals: ProfileType
  in: [ProfileType!]
  not: ProfileType
  notIn: [ProfileType!]
}

input NestedEnumProfileTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumProfileTypeFilter
  _min: NestedEnumProfileTypeFilter
  equals: ProfileType
  in: [ProfileType!]
  not: ProfileType
  notIn: [ProfileType!]
}

input NestedEnumSecureDataTypeFilter {
  equals: SecureDataType
  in: [SecureDataType!]
  not: SecureDataType
  notIn: [SecureDataType!]
}

input NestedEnumSecureDataTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumSecureDataTypeFilter
  _min: NestedEnumSecureDataTypeFilter
  equals: SecureDataType
  in: [SecureDataType!]
  not: SecureDataType
  notIn: [SecureDataType!]
}

input NestedEnumTypeOfDocumentFilter {
  equals: TypeOfDocument
  in: [TypeOfDocument!]
  not: TypeOfDocument
  notIn: [TypeOfDocument!]
}

input NestedEnumTypeOfDocumentWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTypeOfDocumentFilter
  _min: NestedEnumTypeOfDocumentFilter
  equals: TypeOfDocument
  in: [TypeOfDocument!]
  not: TypeOfDocument
  notIn: [TypeOfDocument!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

union NotificationFriendRequestStatusResponse = ErrorProfiling | FriendRequest | RejectedFriendsResponse | Relationship

type NotificationResponse {
  friendRequestNotifications: [FriendRequest!]
}

type Notifications {
  FriendRequests(cursor: FriendRequestWhereUniqueInput, distinct: [FriendRequestScalarFieldEnum!], orderBy: [FriendRequestOrderByWithRelationInput!], skip: Int, take: Int, where: FriendRequestWhereInput): [FriendRequest!]!
  id: ID!
  Profile: Profile!
  profileId: String!
}

input NotificationsCountOrderByAggregateInput {
  id: SortOrder
  profileId: SortOrder
}

input NotificationsCreateInput {
  FriendRequests: FriendRequestCreateNestedManyWithoutNotificationsInput
  id: String
  Profile: ProfileCreateNestedOneWithoutNotificationsInput!
}

input NotificationsCreateManyInput {
  id: String
  profileId: String!
}

input NotificationsCreateNestedManyWithoutFriendRequestsInput {
  connect: [NotificationsWhereUniqueInput!]
  connectOrCreate: [NotificationsCreateOrConnectWithoutFriendRequestsInput!]
  create: NotificationsCreateWithoutFriendRequestsInput
}

input NotificationsCreateNestedOneWithoutProfileInput {
  connect: NotificationsWhereUniqueInput
  connectOrCreate: NotificationsCreateOrConnectWithoutProfileInput
  create: NotificationsCreateWithoutProfileInput
}

input NotificationsCreateOrConnectWithoutFriendRequestsInput {
  create: NotificationsCreateWithoutFriendRequestsInput!
  where: NotificationsWhereUniqueInput!
}

input NotificationsCreateOrConnectWithoutProfileInput {
  create: NotificationsCreateWithoutProfileInput!
  where: NotificationsWhereUniqueInput!
}

input NotificationsCreateWithoutFriendRequestsInput {
  id: String
  Profile: ProfileCreateNestedOneWithoutNotificationsInput!
}

input NotificationsCreateWithoutProfileInput {
  FriendRequests: FriendRequestCreateNestedManyWithoutNotificationsInput
  id: String
}

input NotificationsListRelationFilter {
  every: NotificationsWhereInput
  none: NotificationsWhereInput
  some: NotificationsWhereInput
}

input NotificationsMaxOrderByAggregateInput {
  id: SortOrder
  profileId: SortOrder
}

input NotificationsMinOrderByAggregateInput {
  id: SortOrder
  profileId: SortOrder
}

input NotificationsOrderByRelationAggregateInput {
  _count: SortOrder
}

input NotificationsOrderByWithAggregationInput {
  _count: NotificationsCountOrderByAggregateInput
  _max: NotificationsMaxOrderByAggregateInput
  _min: NotificationsMinOrderByAggregateInput
  id: SortOrder
  profileId: SortOrder
}

input NotificationsOrderByWithRelationInput {
  FriendRequests: FriendRequestOrderByRelationAggregateInput
  id: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
}

input NotificationsRelationFilter {
  is: NotificationsWhereInput
  isNot: NotificationsWhereInput
}

enum NotificationsScalarFieldEnum {
  id
  profileId
}

input NotificationsScalarWhereInput {
  AND: [NotificationsScalarWhereInput!]
  id: StringFilter
  NOT: [NotificationsScalarWhereInput!]
  OR: [NotificationsScalarWhereInput!]
  profileId: StringFilter
}

input NotificationsScalarWhereWithAggregatesInput {
  AND: [NotificationsScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  NOT: [NotificationsScalarWhereWithAggregatesInput!]
  OR: [NotificationsScalarWhereWithAggregatesInput!]
  profileId: StringWithAggregatesFilter
}

type NotificationStatus {
  createdAt: DateTime!
  FriendRequest: FriendRequest
  id: ID!
  isAccepted: Boolean!
  isAnswered: Boolean!
  isCanceled: Boolean!
  isChecked: Boolean!
  updatedAt: DateTime!
}

input NotificationStatusCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  isAccepted: SortOrder
  isAnswered: SortOrder
  isCanceled: SortOrder
  isChecked: SortOrder
  updatedAt: SortOrder
}

input NotificationStatusCreateInput {
  createdAt: DateTime
  FriendRequest: FriendRequestCreateNestedOneWithoutNotificationStatusInput
  id: String
  isAccepted: Boolean
  isAnswered: Boolean
  isCanceled: Boolean
  isChecked: Boolean
  updatedAt: DateTime
}

input NotificationStatusCreateManyInput {
  createdAt: DateTime
  id: String
  isAccepted: Boolean
  isAnswered: Boolean
  isCanceled: Boolean
  isChecked: Boolean
  updatedAt: DateTime
}

input NotificationStatusCreateNestedOneWithoutFriendRequestInput {
  connect: NotificationStatusWhereUniqueInput
  connectOrCreate: NotificationStatusCreateOrConnectWithoutFriendRequestInput
  create: NotificationStatusCreateWithoutFriendRequestInput
}

input NotificationStatusCreateOrConnectWithoutFriendRequestInput {
  create: NotificationStatusCreateWithoutFriendRequestInput!
  where: NotificationStatusWhereUniqueInput!
}

input NotificationStatusCreateWithoutFriendRequestInput {
  createdAt: DateTime
  id: String
  isAccepted: Boolean
  isAnswered: Boolean
  isCanceled: Boolean
  isChecked: Boolean
  updatedAt: DateTime
}

input NotificationStatusMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  isAccepted: SortOrder
  isAnswered: SortOrder
  isCanceled: SortOrder
  isChecked: SortOrder
  updatedAt: SortOrder
}

input NotificationStatusMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  isAccepted: SortOrder
  isAnswered: SortOrder
  isCanceled: SortOrder
  isChecked: SortOrder
  updatedAt: SortOrder
}

input NotificationStatusOrderByWithAggregationInput {
  _count: NotificationStatusCountOrderByAggregateInput
  _max: NotificationStatusMaxOrderByAggregateInput
  _min: NotificationStatusMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  isAccepted: SortOrder
  isAnswered: SortOrder
  isCanceled: SortOrder
  isChecked: SortOrder
  updatedAt: SortOrder
}

input NotificationStatusOrderByWithRelationInput {
  createdAt: SortOrder
  FriendRequest: FriendRequestOrderByWithRelationInput
  id: SortOrder
  isAccepted: SortOrder
  isAnswered: SortOrder
  isCanceled: SortOrder
  isChecked: SortOrder
  updatedAt: SortOrder
}

input NotificationStatusRelationFilter {
  is: NotificationStatusWhereInput
  isNot: NotificationStatusWhereInput
}

enum NotificationStatusScalarFieldEnum {
  createdAt
  id
  isAccepted
  isAnswered
  isCanceled
  isChecked
  updatedAt
}

input NotificationStatusScalarWhereWithAggregatesInput {
  AND: [NotificationStatusScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  isAccepted: BoolWithAggregatesFilter
  isAnswered: BoolWithAggregatesFilter
  isCanceled: BoolWithAggregatesFilter
  isChecked: BoolWithAggregatesFilter
  NOT: [NotificationStatusScalarWhereWithAggregatesInput!]
  OR: [NotificationStatusScalarWhereWithAggregatesInput!]
  updatedAt: DateTimeWithAggregatesFilter
}

input NotificationStatusUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  FriendRequest: FriendRequestUpdateOneWithoutNotificationStatusNestedInput
  id: StringFieldUpdateOperationsInput
  isAccepted: BoolFieldUpdateOperationsInput
  isAnswered: BoolFieldUpdateOperationsInput
  isCanceled: BoolFieldUpdateOperationsInput
  isChecked: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationStatusUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isAccepted: BoolFieldUpdateOperationsInput
  isAnswered: BoolFieldUpdateOperationsInput
  isCanceled: BoolFieldUpdateOperationsInput
  isChecked: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationStatusUpdateOneRequiredWithoutFriendRequestNestedInput {
  connect: NotificationStatusWhereUniqueInput
  connectOrCreate: NotificationStatusCreateOrConnectWithoutFriendRequestInput
  create: NotificationStatusCreateWithoutFriendRequestInput
  update: NotificationStatusUpdateWithoutFriendRequestInput
  upsert: NotificationStatusUpsertWithoutFriendRequestInput
}

input NotificationStatusUpdateWithoutFriendRequestInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isAccepted: BoolFieldUpdateOperationsInput
  isAnswered: BoolFieldUpdateOperationsInput
  isCanceled: BoolFieldUpdateOperationsInput
  isChecked: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationStatusUpsertWithoutFriendRequestInput {
  create: NotificationStatusCreateWithoutFriendRequestInput!
  update: NotificationStatusUpdateWithoutFriendRequestInput!
}

input NotificationStatusWhereInput {
  AND: [NotificationStatusWhereInput!]
  createdAt: DateTimeFilter
  FriendRequest: FriendRequestWhereInput
  id: StringFilter
  isAccepted: BoolFilter
  isAnswered: BoolFilter
  isCanceled: BoolFilter
  isChecked: BoolFilter
  NOT: [NotificationStatusWhereInput!]
  OR: [NotificationStatusWhereInput!]
  updatedAt: DateTimeFilter
}

input NotificationStatusWhereUniqueInput {
  id: String
}

input NotificationsUpdateInput {
  FriendRequests: FriendRequestUpdateManyWithoutNotificationsNestedInput
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutNotificationsNestedInput
}

input NotificationsUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
}

input NotificationsUpdateManyWithoutFriendRequestsNestedInput {
  connect: [NotificationsWhereUniqueInput!]
  connectOrCreate: [NotificationsCreateOrConnectWithoutFriendRequestsInput!]
  create: NotificationsCreateWithoutFriendRequestsInput
  delete: [NotificationsWhereUniqueInput!]
  deleteMany: [NotificationsScalarWhereInput!]
  disconnect: [NotificationsWhereUniqueInput!]
  set: [NotificationsWhereUniqueInput!]
  update: [NotificationsUpdateWithWhereUniqueWithoutFriendRequestsInput!]
  updateMany: [NotificationsUpdateManyWithWhereWithoutFriendRequestsInput!]
  upsert: [NotificationsUpsertWithWhereUniqueWithoutFriendRequestsInput!]
}

input NotificationsUpdateManyWithWhereWithoutFriendRequestsInput {
  data: NotificationsUpdateManyMutationInput!
  where: NotificationsScalarWhereInput!
}

input NotificationsUpdateOneWithoutProfileNestedInput {
  connect: NotificationsWhereUniqueInput
  connectOrCreate: NotificationsCreateOrConnectWithoutProfileInput
  create: NotificationsCreateWithoutProfileInput
  delete: Boolean
  disconnect: Boolean
  update: NotificationsUpdateWithoutProfileInput
  upsert: NotificationsUpsertWithoutProfileInput
}

input NotificationsUpdateWithoutFriendRequestsInput {
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutNotificationsNestedInput
}

input NotificationsUpdateWithoutProfileInput {
  FriendRequests: FriendRequestUpdateManyWithoutNotificationsNestedInput
  id: StringFieldUpdateOperationsInput
}

input NotificationsUpdateWithWhereUniqueWithoutFriendRequestsInput {
  data: NotificationsUpdateWithoutFriendRequestsInput!
  where: NotificationsWhereUniqueInput!
}

input NotificationsUpsertWithoutProfileInput {
  create: NotificationsCreateWithoutProfileInput!
  update: NotificationsUpdateWithoutProfileInput!
}

input NotificationsUpsertWithWhereUniqueWithoutFriendRequestsInput {
  create: NotificationsCreateWithoutFriendRequestsInput!
  update: NotificationsUpdateWithoutFriendRequestsInput!
  where: NotificationsWhereUniqueInput!
}

input NotificationsWhereInput {
  AND: [NotificationsWhereInput!]
  FriendRequests: FriendRequestListRelationFilter
  id: StringFilter
  NOT: [NotificationsWhereInput!]
  OR: [NotificationsWhereInput!]
  Profile: ProfileWhereInput
  profileId: StringFilter
}

input NotificationsWhereUniqueInput {
  id: String
  profileId: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableEnumAppTypeFieldUpdateOperationsInput {
  set: AppType
}

input NullableEnumPhotoTypeFieldUpdateOperationsInput {
  set: PhotoType
}

input NullableEnumProfileTypeFieldUpdateOperationsInput {
  set: ProfileType
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Out {
  createdAt: DateTime!
  id: ID!
  leftAt: DateTime
  LiveOutPersonal: LiveOutPersonal
  liveOutPersonalId: String
  LiveOutVenue: LiveOutVenue
  liveOutVenueId: String
  personalProfileId: String!
  PersonalStats: PersonalStats
  personalStatsId: String
  type: OutType!
  updatedAt: DateTime!
  venueProfileId: String!
  VenueStats: VenueStats
  venueStatsId: String
}

input OutCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  leftAt: SortOrder
  liveOutPersonalId: SortOrder
  liveOutVenueId: SortOrder
  personalProfileId: SortOrder
  personalStatsId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  venueProfileId: SortOrder
  venueStatsId: SortOrder
}

input OutCreateInput {
  createdAt: DateTime
  id: String
  leftAt: DateTime
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutOutInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutOutInput
  personalProfileId: String!
  PersonalStats: PersonalStatsCreateNestedOneWithoutOutInput
  type: OutType!
  updatedAt: DateTime
  venueProfileId: String!
  VenueStats: VenueStatsCreateNestedOneWithoutOutInput
}

input OutCreateManyInput {
  createdAt: DateTime
  id: String
  leftAt: DateTime
  liveOutPersonalId: String
  liveOutVenueId: String
  personalProfileId: String!
  personalStatsId: String
  type: OutType!
  updatedAt: DateTime
  venueProfileId: String!
  venueStatsId: String
}

input OutCreateManyLiveOutPersonalInput {
  createdAt: DateTime
  id: String
  leftAt: DateTime
  liveOutVenueId: String
  personalProfileId: String!
  personalStatsId: String
  type: OutType!
  updatedAt: DateTime
  venueProfileId: String!
  venueStatsId: String
}

input OutCreateManyLiveOutPersonalInputEnvelope {
  data: [OutCreateManyLiveOutPersonalInput!]!
  skipDuplicates: Boolean
}

input OutCreateManyLiveOutVenueInput {
  createdAt: DateTime
  id: String
  leftAt: DateTime
  liveOutPersonalId: String
  personalProfileId: String!
  personalStatsId: String
  type: OutType!
  updatedAt: DateTime
  venueProfileId: String!
  venueStatsId: String
}

input OutCreateManyLiveOutVenueInputEnvelope {
  data: [OutCreateManyLiveOutVenueInput!]!
  skipDuplicates: Boolean
}

input OutCreateManyPersonalStatsInput {
  createdAt: DateTime
  id: String
  leftAt: DateTime
  liveOutPersonalId: String
  liveOutVenueId: String
  personalProfileId: String!
  type: OutType!
  updatedAt: DateTime
  venueProfileId: String!
  venueStatsId: String
}

input OutCreateManyPersonalStatsInputEnvelope {
  data: [OutCreateManyPersonalStatsInput!]!
  skipDuplicates: Boolean
}

input OutCreateManyVenueStatsInput {
  createdAt: DateTime
  id: String
  leftAt: DateTime
  liveOutPersonalId: String
  liveOutVenueId: String
  personalProfileId: String!
  personalStatsId: String
  type: OutType!
  updatedAt: DateTime
  venueProfileId: String!
}

input OutCreateManyVenueStatsInputEnvelope {
  data: [OutCreateManyVenueStatsInput!]!
  skipDuplicates: Boolean
}

input OutCreateNestedManyWithoutLiveOutPersonalInput {
  connect: [OutWhereUniqueInput!]
  connectOrCreate: [OutCreateOrConnectWithoutLiveOutPersonalInput!]
  create: OutCreateWithoutLiveOutPersonalInput
  createMany: OutCreateManyLiveOutPersonalInputEnvelope
}

input OutCreateNestedManyWithoutLiveOutVenueInput {
  connect: [OutWhereUniqueInput!]
  connectOrCreate: [OutCreateOrConnectWithoutLiveOutVenueInput!]
  create: OutCreateWithoutLiveOutVenueInput
  createMany: OutCreateManyLiveOutVenueInputEnvelope
}

input OutCreateNestedManyWithoutPersonalStatsInput {
  connect: [OutWhereUniqueInput!]
  connectOrCreate: [OutCreateOrConnectWithoutPersonalStatsInput!]
  create: OutCreateWithoutPersonalStatsInput
  createMany: OutCreateManyPersonalStatsInputEnvelope
}

input OutCreateNestedManyWithoutVenueStatsInput {
  connect: [OutWhereUniqueInput!]
  connectOrCreate: [OutCreateOrConnectWithoutVenueStatsInput!]
  create: OutCreateWithoutVenueStatsInput
  createMany: OutCreateManyVenueStatsInputEnvelope
}

input OutCreateOrConnectWithoutLiveOutPersonalInput {
  create: OutCreateWithoutLiveOutPersonalInput!
  where: OutWhereUniqueInput!
}

input OutCreateOrConnectWithoutLiveOutVenueInput {
  create: OutCreateWithoutLiveOutVenueInput!
  where: OutWhereUniqueInput!
}

input OutCreateOrConnectWithoutPersonalStatsInput {
  create: OutCreateWithoutPersonalStatsInput!
  where: OutWhereUniqueInput!
}

input OutCreateOrConnectWithoutVenueStatsInput {
  create: OutCreateWithoutVenueStatsInput!
  where: OutWhereUniqueInput!
}

input OutCreateWithoutLiveOutPersonalInput {
  createdAt: DateTime
  id: String
  leftAt: DateTime
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutOutInput
  personalProfileId: String!
  PersonalStats: PersonalStatsCreateNestedOneWithoutOutInput
  type: OutType!
  updatedAt: DateTime
  venueProfileId: String!
  VenueStats: VenueStatsCreateNestedOneWithoutOutInput
}

input OutCreateWithoutLiveOutVenueInput {
  createdAt: DateTime
  id: String
  leftAt: DateTime
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutOutInput
  personalProfileId: String!
  PersonalStats: PersonalStatsCreateNestedOneWithoutOutInput
  type: OutType!
  updatedAt: DateTime
  venueProfileId: String!
  VenueStats: VenueStatsCreateNestedOneWithoutOutInput
}

input OutCreateWithoutPersonalStatsInput {
  createdAt: DateTime
  id: String
  leftAt: DateTime
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutOutInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutOutInput
  personalProfileId: String!
  type: OutType!
  updatedAt: DateTime
  venueProfileId: String!
  VenueStats: VenueStatsCreateNestedOneWithoutOutInput
}

input OutCreateWithoutVenueStatsInput {
  createdAt: DateTime
  id: String
  leftAt: DateTime
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutOutInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutOutInput
  personalProfileId: String!
  PersonalStats: PersonalStatsCreateNestedOneWithoutOutInput
  type: OutType!
  updatedAt: DateTime
  venueProfileId: String!
}

input OutListRelationFilter {
  every: OutWhereInput
  none: OutWhereInput
  some: OutWhereInput
}

input OutMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  leftAt: SortOrder
  liveOutPersonalId: SortOrder
  liveOutVenueId: SortOrder
  personalProfileId: SortOrder
  personalStatsId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  venueProfileId: SortOrder
  venueStatsId: SortOrder
}

input OutMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  leftAt: SortOrder
  liveOutPersonalId: SortOrder
  liveOutVenueId: SortOrder
  personalProfileId: SortOrder
  personalStatsId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  venueProfileId: SortOrder
  venueStatsId: SortOrder
}

input OutOrderByRelationAggregateInput {
  _count: SortOrder
}

input OutOrderByWithAggregationInput {
  _count: OutCountOrderByAggregateInput
  _max: OutMaxOrderByAggregateInput
  _min: OutMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  leftAt: SortOrder
  liveOutPersonalId: SortOrder
  liveOutVenueId: SortOrder
  personalProfileId: SortOrder
  personalStatsId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  venueProfileId: SortOrder
  venueStatsId: SortOrder
}

input OutOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  leftAt: SortOrder
  LiveOutPersonal: LiveOutPersonalOrderByWithRelationInput
  liveOutPersonalId: SortOrder
  LiveOutVenue: LiveOutVenueOrderByWithRelationInput
  liveOutVenueId: SortOrder
  personalProfileId: SortOrder
  PersonalStats: PersonalStatsOrderByWithRelationInput
  personalStatsId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  venueProfileId: SortOrder
  VenueStats: VenueStatsOrderByWithRelationInput
  venueStatsId: SortOrder
}

enum OutScalarFieldEnum {
  createdAt
  id
  leftAt
  liveOutPersonalId
  liveOutVenueId
  personalProfileId
  personalStatsId
  type
  updatedAt
  venueProfileId
  venueStatsId
}

input OutScalarWhereInput {
  AND: [OutScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  leftAt: DateTimeNullableFilter
  liveOutPersonalId: StringNullableFilter
  liveOutVenueId: StringNullableFilter
  NOT: [OutScalarWhereInput!]
  OR: [OutScalarWhereInput!]
  personalProfileId: StringFilter
  personalStatsId: StringNullableFilter
  type: EnumOutTypeFilter
  updatedAt: DateTimeFilter
  venueProfileId: StringFilter
  venueStatsId: StringNullableFilter
}

input OutScalarWhereWithAggregatesInput {
  AND: [OutScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  leftAt: DateTimeNullableWithAggregatesFilter
  liveOutPersonalId: StringNullableWithAggregatesFilter
  liveOutVenueId: StringNullableWithAggregatesFilter
  NOT: [OutScalarWhereWithAggregatesInput!]
  OR: [OutScalarWhereWithAggregatesInput!]
  personalProfileId: StringWithAggregatesFilter
  personalStatsId: StringNullableWithAggregatesFilter
  type: EnumOutTypeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  venueProfileId: StringWithAggregatesFilter
  venueStatsId: StringNullableWithAggregatesFilter
}

enum OutType {
  JOIN
  TOTAL
}

input OutUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutOutNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutOutNestedInput
  personalProfileId: StringFieldUpdateOperationsInput
  PersonalStats: PersonalStatsUpdateOneWithoutOutNestedInput
  type: EnumOutTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutOutNestedInput
}

input OutUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  type: EnumOutTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
}

input OutUpdateManyWithoutLiveOutPersonalNestedInput {
  connect: [OutWhereUniqueInput!]
  connectOrCreate: [OutCreateOrConnectWithoutLiveOutPersonalInput!]
  create: OutCreateWithoutLiveOutPersonalInput
  createMany: OutCreateManyLiveOutPersonalInputEnvelope
  delete: [OutWhereUniqueInput!]
  deleteMany: [OutScalarWhereInput!]
  disconnect: [OutWhereUniqueInput!]
  set: [OutWhereUniqueInput!]
  update: [OutUpdateWithWhereUniqueWithoutLiveOutPersonalInput!]
  updateMany: [OutUpdateManyWithWhereWithoutLiveOutPersonalInput!]
  upsert: [OutUpsertWithWhereUniqueWithoutLiveOutPersonalInput!]
}

input OutUpdateManyWithoutLiveOutVenueNestedInput {
  connect: [OutWhereUniqueInput!]
  connectOrCreate: [OutCreateOrConnectWithoutLiveOutVenueInput!]
  create: OutCreateWithoutLiveOutVenueInput
  createMany: OutCreateManyLiveOutVenueInputEnvelope
  delete: [OutWhereUniqueInput!]
  deleteMany: [OutScalarWhereInput!]
  disconnect: [OutWhereUniqueInput!]
  set: [OutWhereUniqueInput!]
  update: [OutUpdateWithWhereUniqueWithoutLiveOutVenueInput!]
  updateMany: [OutUpdateManyWithWhereWithoutLiveOutVenueInput!]
  upsert: [OutUpsertWithWhereUniqueWithoutLiveOutVenueInput!]
}

input OutUpdateManyWithoutPersonalStatsNestedInput {
  connect: [OutWhereUniqueInput!]
  connectOrCreate: [OutCreateOrConnectWithoutPersonalStatsInput!]
  create: OutCreateWithoutPersonalStatsInput
  createMany: OutCreateManyPersonalStatsInputEnvelope
  delete: [OutWhereUniqueInput!]
  deleteMany: [OutScalarWhereInput!]
  disconnect: [OutWhereUniqueInput!]
  set: [OutWhereUniqueInput!]
  update: [OutUpdateWithWhereUniqueWithoutPersonalStatsInput!]
  updateMany: [OutUpdateManyWithWhereWithoutPersonalStatsInput!]
  upsert: [OutUpsertWithWhereUniqueWithoutPersonalStatsInput!]
}

input OutUpdateManyWithoutVenueStatsNestedInput {
  connect: [OutWhereUniqueInput!]
  connectOrCreate: [OutCreateOrConnectWithoutVenueStatsInput!]
  create: OutCreateWithoutVenueStatsInput
  createMany: OutCreateManyVenueStatsInputEnvelope
  delete: [OutWhereUniqueInput!]
  deleteMany: [OutScalarWhereInput!]
  disconnect: [OutWhereUniqueInput!]
  set: [OutWhereUniqueInput!]
  update: [OutUpdateWithWhereUniqueWithoutVenueStatsInput!]
  updateMany: [OutUpdateManyWithWhereWithoutVenueStatsInput!]
  upsert: [OutUpsertWithWhereUniqueWithoutVenueStatsInput!]
}

input OutUpdateManyWithWhereWithoutLiveOutPersonalInput {
  data: OutUpdateManyMutationInput!
  where: OutScalarWhereInput!
}

input OutUpdateManyWithWhereWithoutLiveOutVenueInput {
  data: OutUpdateManyMutationInput!
  where: OutScalarWhereInput!
}

input OutUpdateManyWithWhereWithoutPersonalStatsInput {
  data: OutUpdateManyMutationInput!
  where: OutScalarWhereInput!
}

input OutUpdateManyWithWhereWithoutVenueStatsInput {
  data: OutUpdateManyMutationInput!
  where: OutScalarWhereInput!
}

input OutUpdateWithoutLiveOutPersonalInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutOutNestedInput
  personalProfileId: StringFieldUpdateOperationsInput
  PersonalStats: PersonalStatsUpdateOneWithoutOutNestedInput
  type: EnumOutTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutOutNestedInput
}

input OutUpdateWithoutLiveOutVenueInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutOutNestedInput
  personalProfileId: StringFieldUpdateOperationsInput
  PersonalStats: PersonalStatsUpdateOneWithoutOutNestedInput
  type: EnumOutTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutOutNestedInput
}

input OutUpdateWithoutPersonalStatsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutOutNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutOutNestedInput
  personalProfileId: StringFieldUpdateOperationsInput
  type: EnumOutTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutOutNestedInput
}

input OutUpdateWithoutVenueStatsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutOutNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutOutNestedInput
  personalProfileId: StringFieldUpdateOperationsInput
  PersonalStats: PersonalStatsUpdateOneWithoutOutNestedInput
  type: EnumOutTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
}

input OutUpdateWithWhereUniqueWithoutLiveOutPersonalInput {
  data: OutUpdateWithoutLiveOutPersonalInput!
  where: OutWhereUniqueInput!
}

input OutUpdateWithWhereUniqueWithoutLiveOutVenueInput {
  data: OutUpdateWithoutLiveOutVenueInput!
  where: OutWhereUniqueInput!
}

input OutUpdateWithWhereUniqueWithoutPersonalStatsInput {
  data: OutUpdateWithoutPersonalStatsInput!
  where: OutWhereUniqueInput!
}

input OutUpdateWithWhereUniqueWithoutVenueStatsInput {
  data: OutUpdateWithoutVenueStatsInput!
  where: OutWhereUniqueInput!
}

input OutUpsertWithWhereUniqueWithoutLiveOutPersonalInput {
  create: OutCreateWithoutLiveOutPersonalInput!
  update: OutUpdateWithoutLiveOutPersonalInput!
  where: OutWhereUniqueInput!
}

input OutUpsertWithWhereUniqueWithoutLiveOutVenueInput {
  create: OutCreateWithoutLiveOutVenueInput!
  update: OutUpdateWithoutLiveOutVenueInput!
  where: OutWhereUniqueInput!
}

input OutUpsertWithWhereUniqueWithoutPersonalStatsInput {
  create: OutCreateWithoutPersonalStatsInput!
  update: OutUpdateWithoutPersonalStatsInput!
  where: OutWhereUniqueInput!
}

input OutUpsertWithWhereUniqueWithoutVenueStatsInput {
  create: OutCreateWithoutVenueStatsInput!
  update: OutUpdateWithoutVenueStatsInput!
  where: OutWhereUniqueInput!
}

input OutWhereInput {
  AND: [OutWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  leftAt: DateTimeNullableFilter
  LiveOutPersonal: LiveOutPersonalWhereInput
  liveOutPersonalId: StringNullableFilter
  LiveOutVenue: LiveOutVenueWhereInput
  liveOutVenueId: StringNullableFilter
  NOT: [OutWhereInput!]
  OR: [OutWhereInput!]
  personalProfileId: StringFilter
  PersonalStats: PersonalStatsWhereInput
  personalStatsId: StringNullableFilter
  type: EnumOutTypeFilter
  updatedAt: DateTimeFilter
  venueProfileId: StringFilter
  VenueStats: VenueStatsWhereInput
  venueStatsId: StringNullableFilter
}

input OutWhereUniqueInput {
  id: String
}

type Password {
  authenitcationProviderId: String!
  AuthenticationProvider: AuthenticationProvider!
  createdAt: DateTime!
  id: ID!
  password: String!
  updatedAt: DateTime!
}

input PasswordCountOrderByAggregateInput {
  authenitcationProviderId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  password: SortOrder
  updatedAt: SortOrder
}

input PasswordCreateInput {
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutPasswordInput!
  createdAt: DateTime
  id: String
  password: String!
  updatedAt: DateTime
}

input PasswordCreateManyInput {
  authenitcationProviderId: String!
  createdAt: DateTime
  id: String
  password: String!
  updatedAt: DateTime
}

input PasswordCreateNestedOneWithoutAuthenticationProviderInput {
  connect: PasswordWhereUniqueInput
  connectOrCreate: PasswordCreateOrConnectWithoutAuthenticationProviderInput
  create: PasswordCreateWithoutAuthenticationProviderInput
}

input PasswordCreateOrConnectWithoutAuthenticationProviderInput {
  create: PasswordCreateWithoutAuthenticationProviderInput!
  where: PasswordWhereUniqueInput!
}

input PasswordCreateWithoutAuthenticationProviderInput {
  createdAt: DateTime
  id: String
  password: String!
  updatedAt: DateTime
}

input PasswordMaxOrderByAggregateInput {
  authenitcationProviderId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  password: SortOrder
  updatedAt: SortOrder
}

input PasswordMinOrderByAggregateInput {
  authenitcationProviderId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  password: SortOrder
  updatedAt: SortOrder
}

input PasswordOrderByWithAggregationInput {
  _count: PasswordCountOrderByAggregateInput
  _max: PasswordMaxOrderByAggregateInput
  _min: PasswordMinOrderByAggregateInput
  authenitcationProviderId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  password: SortOrder
  updatedAt: SortOrder
}

input PasswordOrderByWithRelationInput {
  authenitcationProviderId: SortOrder
  AuthenticationProvider: AuthenticationProviderOrderByWithRelationInput
  createdAt: SortOrder
  id: SortOrder
  password: SortOrder
  updatedAt: SortOrder
}

input PasswordRelationFilter {
  is: PasswordWhereInput
  isNot: PasswordWhereInput
}

enum PasswordScalarFieldEnum {
  authenitcationProviderId
  createdAt
  id
  password
  updatedAt
}

input PasswordScalarWhereWithAggregatesInput {
  AND: [PasswordScalarWhereWithAggregatesInput!]
  authenitcationProviderId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [PasswordScalarWhereWithAggregatesInput!]
  OR: [PasswordScalarWhereWithAggregatesInput!]
  password: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PasswordUpdateInput {
  AuthenticationProvider: AuthenticationProviderUpdateOneRequiredWithoutPasswordNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PasswordUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PasswordUpdateOneWithoutAuthenticationProviderNestedInput {
  connect: PasswordWhereUniqueInput
  connectOrCreate: PasswordCreateOrConnectWithoutAuthenticationProviderInput
  create: PasswordCreateWithoutAuthenticationProviderInput
  delete: Boolean
  disconnect: Boolean
  update: PasswordUpdateWithoutAuthenticationProviderInput
  upsert: PasswordUpsertWithoutAuthenticationProviderInput
}

input PasswordUpdateWithoutAuthenticationProviderInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PasswordUpsertWithoutAuthenticationProviderInput {
  create: PasswordCreateWithoutAuthenticationProviderInput!
  update: PasswordUpdateWithoutAuthenticationProviderInput!
}

input PasswordWhereInput {
  AND: [PasswordWhereInput!]
  authenitcationProviderId: StringFilter
  AuthenticationProvider: AuthenticationProviderWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [PasswordWhereInput!]
  OR: [PasswordWhereInput!]
  password: StringFilter
  updatedAt: DateTimeFilter
}

input PasswordWhereUniqueInput {
  authenitcationProviderId: String
  id: String
}

input PathAvgOrderByAggregateInput {
  latitude: SortOrder
  longitude: SortOrder
}

input PathCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  TonightPathId: SortOrder
}

input PathCreateInput {
  createdAt: DateTime
  id: String
  latitude: Float!
  longitude: Float!
  TonightPath: TonightPathCreateNestedOneWithoutPathInput
}

input PathCreateManyInput {
  createdAt: DateTime
  id: String
  latitude: Float!
  longitude: Float!
  TonightPathId: String
}

input PathCreateManyTonightPathInput {
  createdAt: DateTime
  id: String
  latitude: Float!
  longitude: Float!
}

input PathCreateManyTonightPathInputEnvelope {
  data: [PathCreateManyTonightPathInput!]!
  skipDuplicates: Boolean
}

input PathCreateNestedManyWithoutTonightPathInput {
  connect: [PathWhereUniqueInput!]
  connectOrCreate: [PathCreateOrConnectWithoutTonightPathInput!]
  create: PathCreateWithoutTonightPathInput
  createMany: PathCreateManyTonightPathInputEnvelope
}

input PathCreateOrConnectWithoutTonightPathInput {
  create: PathCreateWithoutTonightPathInput!
  where: PathWhereUniqueInput!
}

input PathCreateWithoutTonightPathInput {
  createdAt: DateTime
  id: String
  latitude: Float!
  longitude: Float!
}

input PathListRelationFilter {
  every: PathWhereInput
  none: PathWhereInput
  some: PathWhereInput
}

input PathMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  TonightPathId: SortOrder
}

input PathMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  TonightPathId: SortOrder
}

input PathOrderByRelationAggregateInput {
  _count: SortOrder
}

input PathOrderByWithAggregationInput {
  _avg: PathAvgOrderByAggregateInput
  _count: PathCountOrderByAggregateInput
  _max: PathMaxOrderByAggregateInput
  _min: PathMinOrderByAggregateInput
  _sum: PathSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  TonightPathId: SortOrder
}

input PathOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  TonightPath: TonightPathOrderByWithRelationInput
  TonightPathId: SortOrder
}

enum PathScalarFieldEnum {
  createdAt
  id
  latitude
  longitude
  TonightPathId
}

input PathScalarWhereInput {
  AND: [PathScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  latitude: FloatFilter
  longitude: FloatFilter
  NOT: [PathScalarWhereInput!]
  OR: [PathScalarWhereInput!]
  TonightPathId: StringNullableFilter
}

input PathScalarWhereWithAggregatesInput {
  AND: [PathScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  latitude: FloatWithAggregatesFilter
  longitude: FloatWithAggregatesFilter
  NOT: [PathScalarWhereWithAggregatesInput!]
  OR: [PathScalarWhereWithAggregatesInput!]
  TonightPathId: StringNullableWithAggregatesFilter
}

input PathSumOrderByAggregateInput {
  latitude: SortOrder
  longitude: SortOrder
}

input PathUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  TonightPath: TonightPathUpdateOneWithoutPathNestedInput
}

input PathUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
}

input PathUpdateManyWithoutTonightPathNestedInput {
  connect: [PathWhereUniqueInput!]
  connectOrCreate: [PathCreateOrConnectWithoutTonightPathInput!]
  create: PathCreateWithoutTonightPathInput
  createMany: PathCreateManyTonightPathInputEnvelope
  delete: [PathWhereUniqueInput!]
  deleteMany: [PathScalarWhereInput!]
  disconnect: [PathWhereUniqueInput!]
  set: [PathWhereUniqueInput!]
  update: [PathUpdateWithWhereUniqueWithoutTonightPathInput!]
  updateMany: [PathUpdateManyWithWhereWithoutTonightPathInput!]
  upsert: [PathUpsertWithWhereUniqueWithoutTonightPathInput!]
}

input PathUpdateManyWithWhereWithoutTonightPathInput {
  data: PathUpdateManyMutationInput!
  where: PathScalarWhereInput!
}

input PathUpdateWithoutTonightPathInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
}

input PathUpdateWithWhereUniqueWithoutTonightPathInput {
  data: PathUpdateWithoutTonightPathInput!
  where: PathWhereUniqueInput!
}

input PathUpsertWithWhereUniqueWithoutTonightPathInput {
  create: PathCreateWithoutTonightPathInput!
  update: PathUpdateWithoutTonightPathInput!
  where: PathWhereUniqueInput!
}

input PathWhereInput {
  AND: [PathWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  latitude: FloatFilter
  longitude: FloatFilter
  NOT: [PathWhereInput!]
  OR: [PathWhereInput!]
  TonightPath: TonightPathWhereInput
  TonightPathId: StringNullableFilter
}

input PathWhereUniqueInput {
  id: String
}

enum Permission {
  ADMINISTATOR
  GENERAL
  OWNER
}

type Personal {
  createdAt: DateTime!
  id: ID!
  LiveOutPersonal: LiveOutPersonal
  PersonalStats: PersonalStats
  personalStatsId: String
  Profile: Profile!
  profileId: String!
  updatedAt: DateTime!
}

input PersonalCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  personalStatsId: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input PersonalCreateInput {
  createdAt: DateTime
  id: String
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutPersonalInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutPersonalInput
  Profile: ProfileCreateNestedOneWithoutPersonalInput!
  updatedAt: DateTime
}

input PersonalCreateManyInput {
  createdAt: DateTime
  id: String
  personalStatsId: String
  profileId: String!
  updatedAt: DateTime
}

input PersonalCreateNestedOneWithoutLiveOutPersonalInput {
  connect: PersonalWhereUniqueInput
  connectOrCreate: PersonalCreateOrConnectWithoutLiveOutPersonalInput
  create: PersonalCreateWithoutLiveOutPersonalInput
}

input PersonalCreateNestedOneWithoutPersonalStatsInput {
  connect: PersonalWhereUniqueInput
  connectOrCreate: PersonalCreateOrConnectWithoutPersonalStatsInput
  create: PersonalCreateWithoutPersonalStatsInput
}

input PersonalCreateNestedOneWithoutProfileInput {
  connect: PersonalWhereUniqueInput
  connectOrCreate: PersonalCreateOrConnectWithoutProfileInput
  create: PersonalCreateWithoutProfileInput
}

input PersonalCreateOrConnectWithoutLiveOutPersonalInput {
  create: PersonalCreateWithoutLiveOutPersonalInput!
  where: PersonalWhereUniqueInput!
}

input PersonalCreateOrConnectWithoutPersonalStatsInput {
  create: PersonalCreateWithoutPersonalStatsInput!
  where: PersonalWhereUniqueInput!
}

input PersonalCreateOrConnectWithoutProfileInput {
  create: PersonalCreateWithoutProfileInput!
  where: PersonalWhereUniqueInput!
}

input PersonalCreateWithoutLiveOutPersonalInput {
  createdAt: DateTime
  id: String
  PersonalStats: PersonalStatsCreateNestedOneWithoutPersonalInput
  Profile: ProfileCreateNestedOneWithoutPersonalInput!
  updatedAt: DateTime
}

input PersonalCreateWithoutPersonalStatsInput {
  createdAt: DateTime
  id: String
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutPersonalInput
  Profile: ProfileCreateNestedOneWithoutPersonalInput!
  updatedAt: DateTime
}

input PersonalCreateWithoutProfileInput {
  createdAt: DateTime
  id: String
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutPersonalInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutPersonalInput
  updatedAt: DateTime
}

input PersonalMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  personalStatsId: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input PersonalMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  personalStatsId: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input PersonalOrderByWithAggregationInput {
  _count: PersonalCountOrderByAggregateInput
  _max: PersonalMaxOrderByAggregateInput
  _min: PersonalMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  personalStatsId: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input PersonalOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  LiveOutPersonal: LiveOutPersonalOrderByWithRelationInput
  PersonalStats: PersonalStatsOrderByWithRelationInput
  personalStatsId: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  updatedAt: SortOrder
}

input PersonalRelationFilter {
  is: PersonalWhereInput
  isNot: PersonalWhereInput
}

enum PersonalScalarFieldEnum {
  createdAt
  id
  personalStatsId
  profileId
  updatedAt
}

input PersonalScalarWhereWithAggregatesInput {
  AND: [PersonalScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [PersonalScalarWhereWithAggregatesInput!]
  OR: [PersonalScalarWhereWithAggregatesInput!]
  personalStatsId: StringNullableWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type PersonalStats {
  createdAt: DateTime!
  id: ID!
  Out(cursor: OutWhereUniqueInput, distinct: [OutScalarFieldEnum!], orderBy: [OutOrderByWithRelationInput!], skip: Int, take: Int, where: OutWhereInput): [Out!]!
  Personal: Personal
  updatedAt: DateTime!
}

input PersonalStatsCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input PersonalStatsCreateInput {
  createdAt: DateTime
  id: String
  Out: OutCreateNestedManyWithoutPersonalStatsInput
  Personal: PersonalCreateNestedOneWithoutPersonalStatsInput
  updatedAt: DateTime
}

input PersonalStatsCreateManyInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input PersonalStatsCreateNestedOneWithoutOutInput {
  connect: PersonalStatsWhereUniqueInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutOutInput
  create: PersonalStatsCreateWithoutOutInput
}

input PersonalStatsCreateNestedOneWithoutPersonalInput {
  connect: PersonalStatsWhereUniqueInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutPersonalInput
  create: PersonalStatsCreateWithoutPersonalInput
}

input PersonalStatsCreateOrConnectWithoutOutInput {
  create: PersonalStatsCreateWithoutOutInput!
  where: PersonalStatsWhereUniqueInput!
}

input PersonalStatsCreateOrConnectWithoutPersonalInput {
  create: PersonalStatsCreateWithoutPersonalInput!
  where: PersonalStatsWhereUniqueInput!
}

input PersonalStatsCreateWithoutOutInput {
  createdAt: DateTime
  id: String
  Personal: PersonalCreateNestedOneWithoutPersonalStatsInput
  updatedAt: DateTime
}

input PersonalStatsCreateWithoutPersonalInput {
  createdAt: DateTime
  id: String
  Out: OutCreateNestedManyWithoutPersonalStatsInput
  updatedAt: DateTime
}

input PersonalStatsMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input PersonalStatsMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input PersonalStatsOrderByWithAggregationInput {
  _count: PersonalStatsCountOrderByAggregateInput
  _max: PersonalStatsMaxOrderByAggregateInput
  _min: PersonalStatsMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input PersonalStatsOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  Out: OutOrderByRelationAggregateInput
  Personal: PersonalOrderByWithRelationInput
  updatedAt: SortOrder
}

input PersonalStatsRelationFilter {
  is: PersonalStatsWhereInput
  isNot: PersonalStatsWhereInput
}

enum PersonalStatsScalarFieldEnum {
  createdAt
  id
  updatedAt
}

input PersonalStatsScalarWhereWithAggregatesInput {
  AND: [PersonalStatsScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [PersonalStatsScalarWhereWithAggregatesInput!]
  OR: [PersonalStatsScalarWhereWithAggregatesInput!]
  updatedAt: DateTimeWithAggregatesFilter
}

input PersonalStatsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Out: OutUpdateManyWithoutPersonalStatsNestedInput
  Personal: PersonalUpdateOneWithoutPersonalStatsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalStatsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalStatsUpdateOneWithoutOutNestedInput {
  connect: PersonalStatsWhereUniqueInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutOutInput
  create: PersonalStatsCreateWithoutOutInput
  delete: Boolean
  disconnect: Boolean
  update: PersonalStatsUpdateWithoutOutInput
  upsert: PersonalStatsUpsertWithoutOutInput
}

input PersonalStatsUpdateOneWithoutPersonalNestedInput {
  connect: PersonalStatsWhereUniqueInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutPersonalInput
  create: PersonalStatsCreateWithoutPersonalInput
  delete: Boolean
  disconnect: Boolean
  update: PersonalStatsUpdateWithoutPersonalInput
  upsert: PersonalStatsUpsertWithoutPersonalInput
}

input PersonalStatsUpdateWithoutOutInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutPersonalStatsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalStatsUpdateWithoutPersonalInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Out: OutUpdateManyWithoutPersonalStatsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalStatsUpsertWithoutOutInput {
  create: PersonalStatsCreateWithoutOutInput!
  update: PersonalStatsUpdateWithoutOutInput!
}

input PersonalStatsUpsertWithoutPersonalInput {
  create: PersonalStatsCreateWithoutPersonalInput!
  update: PersonalStatsUpdateWithoutPersonalInput!
}

input PersonalStatsWhereInput {
  AND: [PersonalStatsWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [PersonalStatsWhereInput!]
  OR: [PersonalStatsWhereInput!]
  Out: OutListRelationFilter
  Personal: PersonalWhereInput
  updatedAt: DateTimeFilter
}

input PersonalStatsWhereUniqueInput {
  id: String
}

input PersonalUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutPersonalNestedInput
  PersonalStats: PersonalStatsUpdateOneWithoutPersonalNestedInput
  Profile: ProfileUpdateOneRequiredWithoutPersonalNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalUpdateOneRequiredWithoutLiveOutPersonalNestedInput {
  connect: PersonalWhereUniqueInput
  connectOrCreate: PersonalCreateOrConnectWithoutLiveOutPersonalInput
  create: PersonalCreateWithoutLiveOutPersonalInput
  update: PersonalUpdateWithoutLiveOutPersonalInput
  upsert: PersonalUpsertWithoutLiveOutPersonalInput
}

input PersonalUpdateOneWithoutPersonalStatsNestedInput {
  connect: PersonalWhereUniqueInput
  connectOrCreate: PersonalCreateOrConnectWithoutPersonalStatsInput
  create: PersonalCreateWithoutPersonalStatsInput
  delete: Boolean
  disconnect: Boolean
  update: PersonalUpdateWithoutPersonalStatsInput
  upsert: PersonalUpsertWithoutPersonalStatsInput
}

input PersonalUpdateOneWithoutProfileNestedInput {
  connect: PersonalWhereUniqueInput
  connectOrCreate: PersonalCreateOrConnectWithoutProfileInput
  create: PersonalCreateWithoutProfileInput
  delete: Boolean
  disconnect: Boolean
  update: PersonalUpdateWithoutProfileInput
  upsert: PersonalUpsertWithoutProfileInput
}

input PersonalUpdateWithoutLiveOutPersonalInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  PersonalStats: PersonalStatsUpdateOneWithoutPersonalNestedInput
  Profile: ProfileUpdateOneRequiredWithoutPersonalNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalUpdateWithoutPersonalStatsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutPersonalNestedInput
  Profile: ProfileUpdateOneRequiredWithoutPersonalNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalUpdateWithoutProfileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutPersonalNestedInput
  PersonalStats: PersonalStatsUpdateOneWithoutPersonalNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalUpsertWithoutLiveOutPersonalInput {
  create: PersonalCreateWithoutLiveOutPersonalInput!
  update: PersonalUpdateWithoutLiveOutPersonalInput!
}

input PersonalUpsertWithoutPersonalStatsInput {
  create: PersonalCreateWithoutPersonalStatsInput!
  update: PersonalUpdateWithoutPersonalStatsInput!
}

input PersonalUpsertWithoutProfileInput {
  create: PersonalCreateWithoutProfileInput!
  update: PersonalUpdateWithoutProfileInput!
}

input PersonalWhereInput {
  AND: [PersonalWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  LiveOutPersonal: LiveOutPersonalWhereInput
  NOT: [PersonalWhereInput!]
  OR: [PersonalWhereInput!]
  PersonalStats: PersonalStatsWhereInput
  personalStatsId: StringNullableFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
  updatedAt: DateTimeFilter
}

input PersonalWhereUniqueInput {
  id: String
  personalStatsId: String
  profileId: String
}

type Phone {
  AuthenticationProvider(cursor: AuthenticationProviderWhereUniqueInput, distinct: [AuthenticationProviderScalarFieldEnum!], orderBy: [AuthenticationProviderOrderByWithRelationInput!], skip: Int, take: Int, where: AuthenticationProviderWhereInput): [AuthenticationProvider!]!
  canUseAsRecovery: Boolean
  completeNumber: String
  countryCallingCode: String
  countryCode: String
  createdAt: DateTime!
  id: ID!
  number: String!
  updatedAt: DateTime!
}

input PhoneAvgOrderByAggregateInput {
  id: SortOrder
}

input PhoneCountOrderByAggregateInput {
  canUseAsRecovery: SortOrder
  completeNumber: SortOrder
  countryCallingCode: SortOrder
  countryCode: SortOrder
  createdAt: SortOrder
  id: SortOrder
  number: SortOrder
  updatedAt: SortOrder
}

input PhoneCreateInput {
  AuthenticationProvider: AuthenticationProviderCreateNestedManyWithoutPhonesInput
  canUseAsRecovery: Boolean
  completeNumber: String
  countryCallingCode: String
  countryCode: String
  createdAt: DateTime
  number: String!
  updatedAt: DateTime
}

input PhoneCreateManyInput {
  canUseAsRecovery: Boolean
  completeNumber: String
  countryCallingCode: String
  countryCode: String
  createdAt: DateTime
  id: Int
  number: String!
  updatedAt: DateTime
}

input PhoneCreateNestedManyWithoutAuthenticationProviderInput {
  connect: [PhoneWhereUniqueInput!]
  connectOrCreate: [PhoneCreateOrConnectWithoutAuthenticationProviderInput!]
  create: PhoneCreateWithoutAuthenticationProviderInput
}

input PhoneCreateOrConnectWithoutAuthenticationProviderInput {
  create: PhoneCreateWithoutAuthenticationProviderInput!
  where: PhoneWhereUniqueInput!
}

input PhoneCreateWithoutAuthenticationProviderInput {
  canUseAsRecovery: Boolean
  completeNumber: String
  countryCallingCode: String
  countryCode: String
  createdAt: DateTime
  number: String!
  updatedAt: DateTime
}

input PhoneInput {
  completeNumber: String
  countryCallingCode: String
  countryCode: String

  """Accepted phone formats: 5193334444 or +15193334444"""
  number: String
}

input PhoneListRelationFilter {
  every: PhoneWhereInput
  none: PhoneWhereInput
  some: PhoneWhereInput
}

input PhoneMaxOrderByAggregateInput {
  canUseAsRecovery: SortOrder
  completeNumber: SortOrder
  countryCallingCode: SortOrder
  countryCode: SortOrder
  createdAt: SortOrder
  id: SortOrder
  number: SortOrder
  updatedAt: SortOrder
}

input PhoneMinOrderByAggregateInput {
  canUseAsRecovery: SortOrder
  completeNumber: SortOrder
  countryCallingCode: SortOrder
  countryCode: SortOrder
  createdAt: SortOrder
  id: SortOrder
  number: SortOrder
  updatedAt: SortOrder
}

input PhoneOrderByRelationAggregateInput {
  _count: SortOrder
}

input PhoneOrderByWithAggregationInput {
  _avg: PhoneAvgOrderByAggregateInput
  _count: PhoneCountOrderByAggregateInput
  _max: PhoneMaxOrderByAggregateInput
  _min: PhoneMinOrderByAggregateInput
  _sum: PhoneSumOrderByAggregateInput
  canUseAsRecovery: SortOrder
  completeNumber: SortOrder
  countryCallingCode: SortOrder
  countryCode: SortOrder
  createdAt: SortOrder
  id: SortOrder
  number: SortOrder
  updatedAt: SortOrder
}

input PhoneOrderByWithRelationInput {
  AuthenticationProvider: AuthenticationProviderOrderByRelationAggregateInput
  canUseAsRecovery: SortOrder
  completeNumber: SortOrder
  countryCallingCode: SortOrder
  countryCode: SortOrder
  createdAt: SortOrder
  id: SortOrder
  number: SortOrder
  updatedAt: SortOrder
}

enum PhoneScalarFieldEnum {
  canUseAsRecovery
  completeNumber
  countryCallingCode
  countryCode
  createdAt
  id
  number
  updatedAt
}

input PhoneScalarWhereInput {
  AND: [PhoneScalarWhereInput!]
  canUseAsRecovery: BoolNullableFilter
  completeNumber: StringNullableFilter
  countryCallingCode: StringNullableFilter
  countryCode: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [PhoneScalarWhereInput!]
  number: StringFilter
  OR: [PhoneScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input PhoneScalarWhereWithAggregatesInput {
  AND: [PhoneScalarWhereWithAggregatesInput!]
  canUseAsRecovery: BoolNullableWithAggregatesFilter
  completeNumber: StringNullableWithAggregatesFilter
  countryCallingCode: StringNullableWithAggregatesFilter
  countryCode: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  NOT: [PhoneScalarWhereWithAggregatesInput!]
  number: StringWithAggregatesFilter
  OR: [PhoneScalarWhereWithAggregatesInput!]
  updatedAt: DateTimeWithAggregatesFilter
}

input PhoneSumOrderByAggregateInput {
  id: SortOrder
}

input PhoneUpdateInput {
  AuthenticationProvider: AuthenticationProviderUpdateManyWithoutPhonesNestedInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  completeNumber: NullableStringFieldUpdateOperationsInput
  countryCallingCode: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  number: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhoneUpdateManyMutationInput {
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  completeNumber: NullableStringFieldUpdateOperationsInput
  countryCallingCode: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  number: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhoneUpdateManyWithoutAuthenticationProviderNestedInput {
  connect: [PhoneWhereUniqueInput!]
  connectOrCreate: [PhoneCreateOrConnectWithoutAuthenticationProviderInput!]
  create: PhoneCreateWithoutAuthenticationProviderInput
  delete: [PhoneWhereUniqueInput!]
  deleteMany: [PhoneScalarWhereInput!]
  disconnect: [PhoneWhereUniqueInput!]
  set: [PhoneWhereUniqueInput!]
  update: [PhoneUpdateWithWhereUniqueWithoutAuthenticationProviderInput!]
  updateMany: [PhoneUpdateManyWithWhereWithoutAuthenticationProviderInput!]
  upsert: [PhoneUpsertWithWhereUniqueWithoutAuthenticationProviderInput!]
}

input PhoneUpdateManyWithWhereWithoutAuthenticationProviderInput {
  data: PhoneUpdateManyMutationInput!
  where: PhoneScalarWhereInput!
}

input PhoneUpdateWithoutAuthenticationProviderInput {
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  completeNumber: NullableStringFieldUpdateOperationsInput
  countryCallingCode: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  number: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhoneUpdateWithWhereUniqueWithoutAuthenticationProviderInput {
  data: PhoneUpdateWithoutAuthenticationProviderInput!
  where: PhoneWhereUniqueInput!
}

input PhoneUpsertWithWhereUniqueWithoutAuthenticationProviderInput {
  create: PhoneCreateWithoutAuthenticationProviderInput!
  update: PhoneUpdateWithoutAuthenticationProviderInput!
  where: PhoneWhereUniqueInput!
}

input PhoneWhereInput {
  AND: [PhoneWhereInput!]
  AuthenticationProvider: AuthenticationProviderListRelationFilter
  canUseAsRecovery: BoolNullableFilter
  completeNumber: StringNullableFilter
  countryCallingCode: StringNullableFilter
  countryCode: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [PhoneWhereInput!]
  number: StringFilter
  OR: [PhoneWhereInput!]
  updatedAt: DateTimeFilter
}

input PhoneWhereUniqueInput {
  id: Int
}

type Photo {
  active: Boolean!
  blurhash: String
  createdAt: DateTime!
  Group: Group
  groupId: String
  height: Int
  id: ID!
  position: Int
  Profile: Profile
  profileId: String
  ratio: String
  Story: Story
  storyId: String
  type: PhotoType
  updatedAt: DateTime!
  url: String!
  width: Int
}

input PhotoAvgOrderByAggregateInput {
  height: SortOrder
  position: SortOrder
  width: SortOrder
}

input PhotoCountOrderByAggregateInput {
  active: SortOrder
  blurhash: SortOrder
  createdAt: SortOrder
  groupId: SortOrder
  height: SortOrder
  id: SortOrder
  position: SortOrder
  profileId: SortOrder
  ratio: SortOrder
  storyId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  url: SortOrder
  width: SortOrder
}

input PhotoCreateInput {
  active: Boolean
  blurhash: String
  createdAt: DateTime
  Group: GroupCreateNestedOneWithoutPhotosInput
  height: Int
  id: String
  position: Int
  Profile: ProfileCreateNestedOneWithoutPhotosInput
  ratio: String
  Story: StoryCreateNestedOneWithoutPhotosInput
  type: PhotoType
  updatedAt: DateTime
  url: String!
  width: Int
}

input PhotoCreateManyGroupInput {
  active: Boolean
  blurhash: String
  createdAt: DateTime
  height: Int
  id: String
  position: Int
  profileId: String
  ratio: String
  storyId: String
  type: PhotoType
  updatedAt: DateTime
  url: String!
  width: Int
}

input PhotoCreateManyGroupInputEnvelope {
  data: [PhotoCreateManyGroupInput!]!
  skipDuplicates: Boolean
}

input PhotoCreateManyInput {
  active: Boolean
  blurhash: String
  createdAt: DateTime
  groupId: String
  height: Int
  id: String
  position: Int
  profileId: String
  ratio: String
  storyId: String
  type: PhotoType
  updatedAt: DateTime
  url: String!
  width: Int
}

input PhotoCreateManyProfileInput {
  active: Boolean
  blurhash: String
  createdAt: DateTime
  groupId: String
  height: Int
  id: String
  position: Int
  ratio: String
  storyId: String
  type: PhotoType
  updatedAt: DateTime
  url: String!
  width: Int
}

input PhotoCreateManyProfileInputEnvelope {
  data: [PhotoCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input PhotoCreateManyStoryInput {
  active: Boolean
  blurhash: String
  createdAt: DateTime
  groupId: String
  height: Int
  id: String
  position: Int
  profileId: String
  ratio: String
  type: PhotoType
  updatedAt: DateTime
  url: String!
  width: Int
}

input PhotoCreateManyStoryInputEnvelope {
  data: [PhotoCreateManyStoryInput!]!
  skipDuplicates: Boolean
}

input PhotoCreateNestedManyWithoutGroupInput {
  connect: [PhotoWhereUniqueInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutGroupInput!]
  create: PhotoCreateWithoutGroupInput
  createMany: PhotoCreateManyGroupInputEnvelope
}

input PhotoCreateNestedManyWithoutProfileInput {
  connect: [PhotoWhereUniqueInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutProfileInput!]
  create: PhotoCreateWithoutProfileInput
  createMany: PhotoCreateManyProfileInputEnvelope
}

input PhotoCreateNestedManyWithoutStoryInput {
  connect: [PhotoWhereUniqueInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutStoryInput!]
  create: PhotoCreateWithoutStoryInput
  createMany: PhotoCreateManyStoryInputEnvelope
}

input PhotoCreateOrConnectWithoutGroupInput {
  create: PhotoCreateWithoutGroupInput!
  where: PhotoWhereUniqueInput!
}

input PhotoCreateOrConnectWithoutProfileInput {
  create: PhotoCreateWithoutProfileInput!
  where: PhotoWhereUniqueInput!
}

input PhotoCreateOrConnectWithoutStoryInput {
  create: PhotoCreateWithoutStoryInput!
  where: PhotoWhereUniqueInput!
}

input PhotoCreateWithoutGroupInput {
  active: Boolean
  blurhash: String
  createdAt: DateTime
  height: Int
  id: String
  position: Int
  Profile: ProfileCreateNestedOneWithoutPhotosInput
  ratio: String
  Story: StoryCreateNestedOneWithoutPhotosInput
  type: PhotoType
  updatedAt: DateTime
  url: String!
  width: Int
}

input PhotoCreateWithoutProfileInput {
  active: Boolean
  blurhash: String
  createdAt: DateTime
  Group: GroupCreateNestedOneWithoutPhotosInput
  height: Int
  id: String
  position: Int
  ratio: String
  Story: StoryCreateNestedOneWithoutPhotosInput
  type: PhotoType
  updatedAt: DateTime
  url: String!
  width: Int
}

input PhotoCreateWithoutStoryInput {
  active: Boolean
  blurhash: String
  createdAt: DateTime
  Group: GroupCreateNestedOneWithoutPhotosInput
  height: Int
  id: String
  position: Int
  Profile: ProfileCreateNestedOneWithoutPhotosInput
  ratio: String
  type: PhotoType
  updatedAt: DateTime
  url: String!
  width: Int
}

input PhotoListRelationFilter {
  every: PhotoWhereInput
  none: PhotoWhereInput
  some: PhotoWhereInput
}

input PhotoMaxOrderByAggregateInput {
  active: SortOrder
  blurhash: SortOrder
  createdAt: SortOrder
  groupId: SortOrder
  height: SortOrder
  id: SortOrder
  position: SortOrder
  profileId: SortOrder
  ratio: SortOrder
  storyId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  url: SortOrder
  width: SortOrder
}

input PhotoMinOrderByAggregateInput {
  active: SortOrder
  blurhash: SortOrder
  createdAt: SortOrder
  groupId: SortOrder
  height: SortOrder
  id: SortOrder
  position: SortOrder
  profileId: SortOrder
  ratio: SortOrder
  storyId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  url: SortOrder
  width: SortOrder
}

input PhotoOrderByRelationAggregateInput {
  _count: SortOrder
}

input PhotoOrderByWithAggregationInput {
  _avg: PhotoAvgOrderByAggregateInput
  _count: PhotoCountOrderByAggregateInput
  _max: PhotoMaxOrderByAggregateInput
  _min: PhotoMinOrderByAggregateInput
  _sum: PhotoSumOrderByAggregateInput
  active: SortOrder
  blurhash: SortOrder
  createdAt: SortOrder
  groupId: SortOrder
  height: SortOrder
  id: SortOrder
  position: SortOrder
  profileId: SortOrder
  ratio: SortOrder
  storyId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  url: SortOrder
  width: SortOrder
}

input PhotoOrderByWithRelationInput {
  active: SortOrder
  blurhash: SortOrder
  createdAt: SortOrder
  Group: GroupOrderByWithRelationInput
  groupId: SortOrder
  height: SortOrder
  id: SortOrder
  position: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  ratio: SortOrder
  Story: StoryOrderByWithRelationInput
  storyId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  url: SortOrder
  width: SortOrder
}

enum PhotoScalarFieldEnum {
  active
  blurhash
  createdAt
  groupId
  height
  id
  position
  profileId
  ratio
  storyId
  type
  updatedAt
  url
  width
}

input PhotoScalarWhereInput {
  active: BoolFilter
  AND: [PhotoScalarWhereInput!]
  blurhash: StringNullableFilter
  createdAt: DateTimeFilter
  groupId: StringNullableFilter
  height: IntNullableFilter
  id: StringFilter
  NOT: [PhotoScalarWhereInput!]
  OR: [PhotoScalarWhereInput!]
  position: IntNullableFilter
  profileId: StringNullableFilter
  ratio: StringNullableFilter
  storyId: StringNullableFilter
  type: EnumPhotoTypeNullableFilter
  updatedAt: DateTimeFilter
  url: StringFilter
  width: IntNullableFilter
}

input PhotoScalarWhereWithAggregatesInput {
  active: BoolWithAggregatesFilter
  AND: [PhotoScalarWhereWithAggregatesInput!]
  blurhash: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  groupId: StringNullableWithAggregatesFilter
  height: IntNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [PhotoScalarWhereWithAggregatesInput!]
  OR: [PhotoScalarWhereWithAggregatesInput!]
  position: IntNullableWithAggregatesFilter
  profileId: StringNullableWithAggregatesFilter
  ratio: StringNullableWithAggregatesFilter
  storyId: StringNullableWithAggregatesFilter
  type: EnumPhotoTypeNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  url: StringWithAggregatesFilter
  width: IntNullableWithAggregatesFilter
}

input PhotoSumOrderByAggregateInput {
  height: SortOrder
  position: SortOrder
  width: SortOrder
}

enum PhotoType {
  BANNER
  LOGO
}

input PhotoUpdateInput {
  active: BoolFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Group: GroupUpdateOneWithoutPhotosNestedInput
  height: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  position: NullableIntFieldUpdateOperationsInput
  Profile: ProfileUpdateOneWithoutPhotosNestedInput
  ratio: NullableStringFieldUpdateOperationsInput
  Story: StoryUpdateOneWithoutPhotosNestedInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
}

input PhotoUpdateManyMutationInput {
  active: BoolFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  position: NullableIntFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
}

input PhotoUpdateManyWithoutGroupNestedInput {
  connect: [PhotoWhereUniqueInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutGroupInput!]
  create: PhotoCreateWithoutGroupInput
  createMany: PhotoCreateManyGroupInputEnvelope
  delete: [PhotoWhereUniqueInput!]
  deleteMany: [PhotoScalarWhereInput!]
  disconnect: [PhotoWhereUniqueInput!]
  set: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [PhotoUpdateManyWithWhereWithoutGroupInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutGroupInput!]
}

input PhotoUpdateManyWithoutProfileNestedInput {
  connect: [PhotoWhereUniqueInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutProfileInput!]
  create: PhotoCreateWithoutProfileInput
  createMany: PhotoCreateManyProfileInputEnvelope
  delete: [PhotoWhereUniqueInput!]
  deleteMany: [PhotoScalarWhereInput!]
  disconnect: [PhotoWhereUniqueInput!]
  set: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [PhotoUpdateManyWithWhereWithoutProfileInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutProfileInput!]
}

input PhotoUpdateManyWithoutStoryNestedInput {
  connect: [PhotoWhereUniqueInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutStoryInput!]
  create: PhotoCreateWithoutStoryInput
  createMany: PhotoCreateManyStoryInputEnvelope
  delete: [PhotoWhereUniqueInput!]
  deleteMany: [PhotoScalarWhereInput!]
  disconnect: [PhotoWhereUniqueInput!]
  set: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutStoryInput!]
  updateMany: [PhotoUpdateManyWithWhereWithoutStoryInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutStoryInput!]
}

input PhotoUpdateManyWithWhereWithoutGroupInput {
  data: PhotoUpdateManyMutationInput!
  where: PhotoScalarWhereInput!
}

input PhotoUpdateManyWithWhereWithoutProfileInput {
  data: PhotoUpdateManyMutationInput!
  where: PhotoScalarWhereInput!
}

input PhotoUpdateManyWithWhereWithoutStoryInput {
  data: PhotoUpdateManyMutationInput!
  where: PhotoScalarWhereInput!
}

input PhotoUpdateWithoutGroupInput {
  active: BoolFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  position: NullableIntFieldUpdateOperationsInput
  Profile: ProfileUpdateOneWithoutPhotosNestedInput
  ratio: NullableStringFieldUpdateOperationsInput
  Story: StoryUpdateOneWithoutPhotosNestedInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
}

input PhotoUpdateWithoutProfileInput {
  active: BoolFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Group: GroupUpdateOneWithoutPhotosNestedInput
  height: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  position: NullableIntFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  Story: StoryUpdateOneWithoutPhotosNestedInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
}

input PhotoUpdateWithoutStoryInput {
  active: BoolFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Group: GroupUpdateOneWithoutPhotosNestedInput
  height: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  position: NullableIntFieldUpdateOperationsInput
  Profile: ProfileUpdateOneWithoutPhotosNestedInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
}

input PhotoUpdateWithWhereUniqueWithoutGroupInput {
  data: PhotoUpdateWithoutGroupInput!
  where: PhotoWhereUniqueInput!
}

input PhotoUpdateWithWhereUniqueWithoutProfileInput {
  data: PhotoUpdateWithoutProfileInput!
  where: PhotoWhereUniqueInput!
}

input PhotoUpdateWithWhereUniqueWithoutStoryInput {
  data: PhotoUpdateWithoutStoryInput!
  where: PhotoWhereUniqueInput!
}

input PhotoUpsertWithWhereUniqueWithoutGroupInput {
  create: PhotoCreateWithoutGroupInput!
  update: PhotoUpdateWithoutGroupInput!
  where: PhotoWhereUniqueInput!
}

input PhotoUpsertWithWhereUniqueWithoutProfileInput {
  create: PhotoCreateWithoutProfileInput!
  update: PhotoUpdateWithoutProfileInput!
  where: PhotoWhereUniqueInput!
}

input PhotoUpsertWithWhereUniqueWithoutStoryInput {
  create: PhotoCreateWithoutStoryInput!
  update: PhotoUpdateWithoutStoryInput!
  where: PhotoWhereUniqueInput!
}

input PhotoWhereInput {
  active: BoolFilter
  AND: [PhotoWhereInput!]
  blurhash: StringNullableFilter
  createdAt: DateTimeFilter
  Group: GroupWhereInput
  groupId: StringNullableFilter
  height: IntNullableFilter
  id: StringFilter
  NOT: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  position: IntNullableFilter
  Profile: ProfileWhereInput
  profileId: StringNullableFilter
  ratio: StringNullableFilter
  Story: StoryWhereInput
  storyId: StringNullableFilter
  type: EnumPhotoTypeNullableFilter
  updatedAt: DateTimeFilter
  url: StringFilter
  width: IntNullableFilter
}

input PhotoWhereUniqueInput {
  id: String
}

type PlaceType {
  coords: Coords!
  isoCode: String!
  name: String!
}

type PluseCode {
  compoundCode: String
  globalCode: String!
  id: ID!
  Location: Location
}

input PluseCodeCountOrderByAggregateInput {
  compoundCode: SortOrder
  globalCode: SortOrder
  id: SortOrder
}

input PluseCodeCreateInput {
  compoundCode: String
  globalCode: String!
  id: String
  Location: LocationCreateNestedOneWithoutPlusCodeInput
}

input PluseCodeCreateManyInput {
  compoundCode: String
  globalCode: String!
  id: String
}

input PluseCodeCreateNestedOneWithoutLocationInput {
  connect: PluseCodeWhereUniqueInput
  connectOrCreate: PluseCodeCreateOrConnectWithoutLocationInput
  create: PluseCodeCreateWithoutLocationInput
}

input PluseCodeCreateOrConnectWithoutLocationInput {
  create: PluseCodeCreateWithoutLocationInput!
  where: PluseCodeWhereUniqueInput!
}

input PluseCodeCreateWithoutLocationInput {
  compoundCode: String
  globalCode: String!
  id: String
}

input PluseCodeMaxOrderByAggregateInput {
  compoundCode: SortOrder
  globalCode: SortOrder
  id: SortOrder
}

input PluseCodeMinOrderByAggregateInput {
  compoundCode: SortOrder
  globalCode: SortOrder
  id: SortOrder
}

input PluseCodeOrderByWithAggregationInput {
  _count: PluseCodeCountOrderByAggregateInput
  _max: PluseCodeMaxOrderByAggregateInput
  _min: PluseCodeMinOrderByAggregateInput
  compoundCode: SortOrder
  globalCode: SortOrder
  id: SortOrder
}

input PluseCodeOrderByWithRelationInput {
  compoundCode: SortOrder
  globalCode: SortOrder
  id: SortOrder
  Location: LocationOrderByWithRelationInput
}

input PluseCodeRelationFilter {
  is: PluseCodeWhereInput
  isNot: PluseCodeWhereInput
}

enum PluseCodeScalarFieldEnum {
  compoundCode
  globalCode
  id
}

input PluseCodeScalarWhereWithAggregatesInput {
  AND: [PluseCodeScalarWhereWithAggregatesInput!]
  compoundCode: StringNullableWithAggregatesFilter
  globalCode: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [PluseCodeScalarWhereWithAggregatesInput!]
  OR: [PluseCodeScalarWhereWithAggregatesInput!]
}

input PluseCodeUpdateInput {
  compoundCode: NullableStringFieldUpdateOperationsInput
  globalCode: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutPlusCodeNestedInput
}

input PluseCodeUpdateManyMutationInput {
  compoundCode: NullableStringFieldUpdateOperationsInput
  globalCode: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input PluseCodeUpdateOneWithoutLocationNestedInput {
  connect: PluseCodeWhereUniqueInput
  connectOrCreate: PluseCodeCreateOrConnectWithoutLocationInput
  create: PluseCodeCreateWithoutLocationInput
  delete: Boolean
  disconnect: Boolean
  update: PluseCodeUpdateWithoutLocationInput
  upsert: PluseCodeUpsertWithoutLocationInput
}

input PluseCodeUpdateWithoutLocationInput {
  compoundCode: NullableStringFieldUpdateOperationsInput
  globalCode: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input PluseCodeUpsertWithoutLocationInput {
  create: PluseCodeCreateWithoutLocationInput!
  update: PluseCodeUpdateWithoutLocationInput!
}

input PluseCodeWhereInput {
  AND: [PluseCodeWhereInput!]
  compoundCode: StringNullableFilter
  globalCode: StringFilter
  id: StringFilter
  Location: LocationWhereInput
  NOT: [PluseCodeWhereInput!]
  OR: [PluseCodeWhereInput!]
}

input PluseCodeWhereUniqueInput {
  id: String
}

input PopularSearchServiceCountOrderByAggregateInput {
  id: SortOrder
  popularPersonals: SortOrder
  popularVenues: SortOrder
}

input PopularSearchServiceCreateInput {
  id: String
  popularPersonals: [Json!]
  popularVenues: [Json!]
}

input PopularSearchServiceCreateManyInput {
  id: String
  popularPersonals: [Json!]
  popularVenues: [Json!]
}

input PopularSearchServiceCreatepopularPersonalsInput {
  set: [Json!]!
}

input PopularSearchServiceCreatepopularVenuesInput {
  set: [Json!]!
}

input PopularSearchServiceMaxOrderByAggregateInput {
  id: SortOrder
}

input PopularSearchServiceMinOrderByAggregateInput {
  id: SortOrder
}

input PopularSearchServiceOrderByWithAggregationInput {
  _count: PopularSearchServiceCountOrderByAggregateInput
  _max: PopularSearchServiceMaxOrderByAggregateInput
  _min: PopularSearchServiceMinOrderByAggregateInput
  id: SortOrder
  popularPersonals: SortOrder
  popularVenues: SortOrder
}

input PopularSearchServiceOrderByWithRelationInput {
  id: SortOrder
  popularPersonals: SortOrder
  popularVenues: SortOrder
}

enum PopularSearchServiceScalarFieldEnum {
  id
  popularPersonals
  popularVenues
}

input PopularSearchServiceScalarWhereWithAggregatesInput {
  AND: [PopularSearchServiceScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  NOT: [PopularSearchServiceScalarWhereWithAggregatesInput!]
  OR: [PopularSearchServiceScalarWhereWithAggregatesInput!]
  popularPersonals: JsonNullableListFilter
  popularVenues: JsonNullableListFilter
}

input PopularSearchServiceUpdateInput {
  id: StringFieldUpdateOperationsInput
  popularPersonals: [Json!]
  popularVenues: [Json!]
}

input PopularSearchServiceUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  popularPersonals: [Json!]
  popularVenues: [Json!]
}

input PopularSearchServiceUpdatepopularPersonalsInput {
  push: Json
  set: [Json!]
}

input PopularSearchServiceUpdatepopularVenuesInput {
  push: Json
  set: [Json!]
}

input PopularSearchServiceWhereInput {
  AND: [PopularSearchServiceWhereInput!]
  id: StringFilter
  NOT: [PopularSearchServiceWhereInput!]
  OR: [PopularSearchServiceWhereInput!]
  popularPersonals: JsonNullableListFilter
  popularVenues: JsonNullableListFilter
}

input PopularSearchServiceWhereUniqueInput {
  id: String
}

"""
Returns the Profile latest Privacy and Terms of Service documents to the client.
"""
type PrivacyAndTermsDocumentResponse {
  privacy: Document!
  termsofservice: Document!
}

type Profile {
  bfsprofileid: String!
  createdAt: DateTime!
  Credentials: Credentials!
  DetailInformation: DetailInformation
  id: String
  IdentifiableInformation: IdentifiableInformation
  Personal: Personal
  photos: [Photo!]
  profilePhoto: Photo
  ProfileType: ProfileType!
  Relationships: [Relationship!]!
  ThemeManager: ThemeManager
  tonightStory: Story
  updatedAt: DateTime!
  Venue: Venue
}

input ProfileCountOrderByAggregateInput {
  bfsprofileid: SortOrder
  createdAt: SortOrder
  DeviceManager: SortOrder
  id: SortOrder
  ProfileType: SortOrder
  updatedAt: SortOrder
}

input ProfileCreateDeviceManagerInput {
  set: [String!]!
}

input ProfileCreateInput {
  bfsprofileid: String
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  Groups: GroupCreateNestedManyWithoutProfileInput
  id: String
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
}

input ProfileCreateManyInput {
  bfsprofileid: String
  createdAt: DateTime
  DeviceManager: [String!]
  id: String
  ProfileType: ProfileType
  updatedAt: DateTime
}

input ProfileCreateNestedManyWithoutChatroomInput {
  connect: [ProfileWhereUniqueInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutChatroomInput!]
  create: ProfileCreateWithoutChatroomInput
}

input ProfileCreateNestedManyWithoutGroupsInput {
  connect: [ProfileWhereUniqueInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutGroupsInput!]
  create: ProfileCreateWithoutGroupsInput
}

input ProfileCreateNestedOneWithoutCredentialsInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutCredentialsInput
  create: ProfileCreateWithoutCredentialsInput
}

input ProfileCreateNestedOneWithoutDetailInformationInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutDetailInformationInput
  create: ProfileCreateWithoutDetailInformationInput
}

input ProfileCreateNestedOneWithoutIdentifiableInformationInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutIdentifiableInformationInput
  create: ProfileCreateWithoutIdentifiableInformationInput
}

input ProfileCreateNestedOneWithoutNotificationsInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutNotificationsInput
  create: ProfileCreateWithoutNotificationsInput
}

input ProfileCreateNestedOneWithoutPersonalInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutPersonalInput
  create: ProfileCreateWithoutPersonalInput
}

input ProfileCreateNestedOneWithoutPhotosInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutPhotosInput
  create: ProfileCreateWithoutPhotosInput
}

input ProfileCreateNestedOneWithoutProfileSearchesServiceInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutProfileSearchesServiceInput
  create: ProfileCreateWithoutProfileSearchesServiceInput
}

input ProfileCreateNestedOneWithoutRelationshipsInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutRelationshipsInput
  create: ProfileCreateWithoutRelationshipsInput
}

input ProfileCreateNestedOneWithoutSecuredDataKeysInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutSecuredDataKeysInput
  create: ProfileCreateWithoutSecuredDataKeysInput
}

input ProfileCreateNestedOneWithoutSettingsInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutSettingsInput
  create: ProfileCreateWithoutSettingsInput
}

input ProfileCreateNestedOneWithoutStorysInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutStorysInput
  create: ProfileCreateWithoutStorysInput
}

input ProfileCreateNestedOneWithoutThemeManagerInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutThemeManagerInput
  create: ProfileCreateWithoutThemeManagerInput
}

input ProfileCreateNestedOneWithoutVenueInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutVenueInput
  create: ProfileCreateWithoutVenueInput
}

input ProfileCreateOrConnectWithoutChatroomInput {
  create: ProfileCreateWithoutChatroomInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutCredentialsInput {
  create: ProfileCreateWithoutCredentialsInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutDetailInformationInput {
  create: ProfileCreateWithoutDetailInformationInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutGroupsInput {
  create: ProfileCreateWithoutGroupsInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutIdentifiableInformationInput {
  create: ProfileCreateWithoutIdentifiableInformationInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutNotificationsInput {
  create: ProfileCreateWithoutNotificationsInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutPersonalInput {
  create: ProfileCreateWithoutPersonalInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutPhotosInput {
  create: ProfileCreateWithoutPhotosInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutProfileSearchesServiceInput {
  create: ProfileCreateWithoutProfileSearchesServiceInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutRelationshipsInput {
  create: ProfileCreateWithoutRelationshipsInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutSecuredDataKeysInput {
  create: ProfileCreateWithoutSecuredDataKeysInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutSettingsInput {
  create: ProfileCreateWithoutSettingsInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutStorysInput {
  create: ProfileCreateWithoutStorysInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutThemeManagerInput {
  create: ProfileCreateWithoutThemeManagerInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutVenueInput {
  create: ProfileCreateWithoutVenueInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutChatroomInput {
  bfsprofileid: String
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  Groups: GroupCreateNestedManyWithoutProfileInput
  id: String
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutCredentialsInput {
  bfsprofileid: String
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  Groups: GroupCreateNestedManyWithoutProfileInput
  id: String
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutDetailInformationInput {
  bfsprofileid: String
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  Groups: GroupCreateNestedManyWithoutProfileInput
  id: String
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutGroupsInput {
  bfsprofileid: String
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  id: String
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutIdentifiableInformationInput {
  bfsprofileid: String
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  Groups: GroupCreateNestedManyWithoutProfileInput
  id: String
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutNotificationsInput {
  bfsprofileid: String
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  Groups: GroupCreateNestedManyWithoutProfileInput
  id: String
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutPersonalInput {
  bfsprofileid: String
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  Groups: GroupCreateNestedManyWithoutProfileInput
  id: String
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutPhotosInput {
  bfsprofileid: String
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  Groups: GroupCreateNestedManyWithoutProfileInput
  id: String
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutProfileSearchesServiceInput {
  bfsprofileid: String
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  Groups: GroupCreateNestedManyWithoutProfileInput
  id: String
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  ProfileType: ProfileType
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutRelationshipsInput {
  bfsprofileid: String
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  Groups: GroupCreateNestedManyWithoutProfileInput
  id: String
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutSecuredDataKeysInput {
  bfsprofileid: String
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  Groups: GroupCreateNestedManyWithoutProfileInput
  id: String
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutSettingsInput {
  bfsprofileid: String
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  Groups: GroupCreateNestedManyWithoutProfileInput
  id: String
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutStorysInput {
  bfsprofileid: String
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  Groups: GroupCreateNestedManyWithoutProfileInput
  id: String
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutThemeManagerInput {
  bfsprofileid: String
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  Groups: GroupCreateNestedManyWithoutProfileInput
  id: String
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutVenueInput {
  bfsprofileid: String
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  DeviceManager: [String!]
  Groups: GroupCreateNestedManyWithoutProfileInput
  id: String
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  updatedAt: DateTime
}

input ProfileListRelationFilter {
  every: ProfileWhereInput
  none: ProfileWhereInput
  some: ProfileWhereInput
}

input ProfileMaxOrderByAggregateInput {
  bfsprofileid: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ProfileType: SortOrder
  updatedAt: SortOrder
}

input ProfileMinOrderByAggregateInput {
  bfsprofileid: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ProfileType: SortOrder
  updatedAt: SortOrder
}

input ProfileOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProfileOrderByWithAggregationInput {
  _count: ProfileCountOrderByAggregateInput
  _max: ProfileMaxOrderByAggregateInput
  _min: ProfileMinOrderByAggregateInput
  bfsprofileid: SortOrder
  createdAt: SortOrder
  DeviceManager: SortOrder
  id: SortOrder
  ProfileType: SortOrder
  updatedAt: SortOrder
}

input ProfileOrderByWithRelationInput {
  bfsprofileid: SortOrder
  Chatroom: ChatroomOrderByRelationAggregateInput
  createdAt: SortOrder
  Credentials: CredentialsOrderByWithRelationInput
  DetailInformation: DetailInformationOrderByWithRelationInput
  DeviceManager: SortOrder
  Groups: GroupOrderByRelationAggregateInput
  id: SortOrder
  IdentifiableInformation: IdentifiableInformationOrderByWithRelationInput
  Notifications: NotificationsOrderByWithRelationInput
  Personal: PersonalOrderByWithRelationInput
  photos: PhotoOrderByRelationAggregateInput
  ProfileSearchesService: ProfileSearchesServiceOrderByWithRelationInput
  ProfileType: SortOrder
  Relationships: RelationshipOrderByRelationAggregateInput
  SecuredDataKeys: SecuredDataKeysOrderByRelationAggregateInput
  Settings: SettingsOrderByWithRelationInput
  Storys: StoryOrderByRelationAggregateInput
  ThemeManager: ThemeManagerOrderByWithRelationInput
  updatedAt: SortOrder
  Venue: VenueOrderByWithRelationInput
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

union ProfileResponseUnion = ErrorProfiling | Profile

enum ProfileScalarFieldEnum {
  bfsprofileid
  createdAt
  DeviceManager
  id
  ProfileType
  updatedAt
}

input ProfileScalarWhereInput {
  AND: [ProfileScalarWhereInput!]
  bfsprofileid: StringFilter
  createdAt: DateTimeFilter
  DeviceManager: StringNullableListFilter
  id: StringFilter
  NOT: [ProfileScalarWhereInput!]
  OR: [ProfileScalarWhereInput!]
  ProfileType: EnumProfileTypeFilter
  updatedAt: DateTimeFilter
}

input ProfileScalarWhereWithAggregatesInput {
  AND: [ProfileScalarWhereWithAggregatesInput!]
  bfsprofileid: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  DeviceManager: StringNullableListFilter
  id: StringWithAggregatesFilter
  NOT: [ProfileScalarWhereWithAggregatesInput!]
  OR: [ProfileScalarWhereWithAggregatesInput!]
  ProfileType: EnumProfileTypeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ProfileSearchesServiceCountOrderByAggregateInput {
  id: SortOrder
  profileId: SortOrder
  searches: SortOrder
}

input ProfileSearchesServiceCreateInput {
  id: String
  Profile: ProfileCreateNestedOneWithoutProfileSearchesServiceInput!
  searches: [Json!]
}

input ProfileSearchesServiceCreateManyInput {
  id: String
  profileId: String!
  searches: [Json!]
}

input ProfileSearchesServiceCreateNestedOneWithoutProfileInput {
  connect: ProfileSearchesServiceWhereUniqueInput
  connectOrCreate: ProfileSearchesServiceCreateOrConnectWithoutProfileInput
  create: ProfileSearchesServiceCreateWithoutProfileInput
}

input ProfileSearchesServiceCreateOrConnectWithoutProfileInput {
  create: ProfileSearchesServiceCreateWithoutProfileInput!
  where: ProfileSearchesServiceWhereUniqueInput!
}

input ProfileSearchesServiceCreatesearchesInput {
  set: [Json!]!
}

input ProfileSearchesServiceCreateWithoutProfileInput {
  id: String
  searches: [Json!]
}

input ProfileSearchesServiceMaxOrderByAggregateInput {
  id: SortOrder
  profileId: SortOrder
}

input ProfileSearchesServiceMinOrderByAggregateInput {
  id: SortOrder
  profileId: SortOrder
}

input ProfileSearchesServiceOrderByWithAggregationInput {
  _count: ProfileSearchesServiceCountOrderByAggregateInput
  _max: ProfileSearchesServiceMaxOrderByAggregateInput
  _min: ProfileSearchesServiceMinOrderByAggregateInput
  id: SortOrder
  profileId: SortOrder
  searches: SortOrder
}

input ProfileSearchesServiceOrderByWithRelationInput {
  id: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  searches: SortOrder
}

input ProfileSearchesServiceRelationFilter {
  is: ProfileSearchesServiceWhereInput
  isNot: ProfileSearchesServiceWhereInput
}

enum ProfileSearchesServiceScalarFieldEnum {
  id
  profileId
  searches
}

input ProfileSearchesServiceScalarWhereWithAggregatesInput {
  AND: [ProfileSearchesServiceScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  NOT: [ProfileSearchesServiceScalarWhereWithAggregatesInput!]
  OR: [ProfileSearchesServiceScalarWhereWithAggregatesInput!]
  profileId: StringWithAggregatesFilter
  searches: JsonNullableListFilter
}

input ProfileSearchesServiceUpdateInput {
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutProfileSearchesServiceNestedInput
  searches: [Json!]
}

input ProfileSearchesServiceUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  searches: [Json!]
}

input ProfileSearchesServiceUpdateOneWithoutProfileNestedInput {
  connect: ProfileSearchesServiceWhereUniqueInput
  connectOrCreate: ProfileSearchesServiceCreateOrConnectWithoutProfileInput
  create: ProfileSearchesServiceCreateWithoutProfileInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileSearchesServiceUpdateWithoutProfileInput
  upsert: ProfileSearchesServiceUpsertWithoutProfileInput
}

input ProfileSearchesServiceUpdatesearchesInput {
  push: Json
  set: [Json!]
}

input ProfileSearchesServiceUpdateWithoutProfileInput {
  id: StringFieldUpdateOperationsInput
  searches: [Json!]
}

input ProfileSearchesServiceUpsertWithoutProfileInput {
  create: ProfileSearchesServiceCreateWithoutProfileInput!
  update: ProfileSearchesServiceUpdateWithoutProfileInput!
}

input ProfileSearchesServiceWhereInput {
  AND: [ProfileSearchesServiceWhereInput!]
  id: StringFilter
  NOT: [ProfileSearchesServiceWhereInput!]
  OR: [ProfileSearchesServiceWhereInput!]
  Profile: ProfileWhereInput
  profileId: StringFilter
  searches: JsonNullableListFilter
}

input ProfileSearchesServiceWhereUniqueInput {
  id: String
  profileId: String
}

type ProfilesResponse {
  email: [Profile!]!
  phone: [Profile!]!
  username: [Profile!]!
}

type ProfileTheme {
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  Theme: Theme!
  themeId: String!
  ThemeManager: ThemeManager!
  themeManagerId: String
  updatedAt: DateTime!
}

input ProfileThemeCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  themeId: SortOrder
  themeManagerId: SortOrder
  updatedAt: SortOrder
}

input ProfileThemeCreateInput {
  createdAt: DateTime
  id: String
  isActive: Boolean!
  Theme: ThemeCreateNestedOneWithoutProfileThemeInput!
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileThemeInput
  updatedAt: DateTime
}

input ProfileThemeCreateManyInput {
  createdAt: DateTime
  id: String
  isActive: Boolean!
  themeId: String!
  themeManagerId: String
  updatedAt: DateTime
}

input ProfileThemeCreateManyThemeInput {
  createdAt: DateTime
  id: String
  isActive: Boolean!
  themeManagerId: String
  updatedAt: DateTime
}

input ProfileThemeCreateManyThemeInputEnvelope {
  data: [ProfileThemeCreateManyThemeInput!]!
  skipDuplicates: Boolean
}

input ProfileThemeCreateManyThemeManagerInput {
  createdAt: DateTime
  id: String
  isActive: Boolean!
  themeId: String!
  updatedAt: DateTime
}

input ProfileThemeCreateManyThemeManagerInputEnvelope {
  data: [ProfileThemeCreateManyThemeManagerInput!]!
  skipDuplicates: Boolean
}

input ProfileThemeCreateNestedManyWithoutThemeInput {
  connect: [ProfileThemeWhereUniqueInput!]
  connectOrCreate: [ProfileThemeCreateOrConnectWithoutThemeInput!]
  create: ProfileThemeCreateWithoutThemeInput
  createMany: ProfileThemeCreateManyThemeInputEnvelope
}

input ProfileThemeCreateNestedManyWithoutThemeManagerInput {
  connect: [ProfileThemeWhereUniqueInput!]
  connectOrCreate: [ProfileThemeCreateOrConnectWithoutThemeManagerInput!]
  create: ProfileThemeCreateWithoutThemeManagerInput
  createMany: ProfileThemeCreateManyThemeManagerInputEnvelope
}

input ProfileThemeCreateOrConnectWithoutThemeInput {
  create: ProfileThemeCreateWithoutThemeInput!
  where: ProfileThemeWhereUniqueInput!
}

input ProfileThemeCreateOrConnectWithoutThemeManagerInput {
  create: ProfileThemeCreateWithoutThemeManagerInput!
  where: ProfileThemeWhereUniqueInput!
}

input ProfileThemeCreateWithoutThemeInput {
  createdAt: DateTime
  id: String
  isActive: Boolean!
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileThemeInput
  updatedAt: DateTime
}

input ProfileThemeCreateWithoutThemeManagerInput {
  createdAt: DateTime
  id: String
  isActive: Boolean!
  Theme: ThemeCreateNestedOneWithoutProfileThemeInput!
  updatedAt: DateTime
}

input ProfileThemeListRelationFilter {
  every: ProfileThemeWhereInput
  none: ProfileThemeWhereInput
  some: ProfileThemeWhereInput
}

input ProfileThemeMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  themeId: SortOrder
  themeManagerId: SortOrder
  updatedAt: SortOrder
}

input ProfileThemeMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  themeId: SortOrder
  themeManagerId: SortOrder
  updatedAt: SortOrder
}

input ProfileThemeOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProfileThemeOrderByWithAggregationInput {
  _count: ProfileThemeCountOrderByAggregateInput
  _max: ProfileThemeMaxOrderByAggregateInput
  _min: ProfileThemeMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  themeId: SortOrder
  themeManagerId: SortOrder
  updatedAt: SortOrder
}

input ProfileThemeOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  Theme: ThemeOrderByWithRelationInput
  themeId: SortOrder
  ThemeManager: ThemeManagerOrderByWithRelationInput
  themeManagerId: SortOrder
  updatedAt: SortOrder
}

enum ProfileThemeScalarFieldEnum {
  createdAt
  id
  isActive
  themeId
  themeManagerId
  updatedAt
}

input ProfileThemeScalarWhereInput {
  AND: [ProfileThemeScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  isActive: BoolFilter
  NOT: [ProfileThemeScalarWhereInput!]
  OR: [ProfileThemeScalarWhereInput!]
  themeId: StringFilter
  themeManagerId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ProfileThemeScalarWhereWithAggregatesInput {
  AND: [ProfileThemeScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  isActive: BoolWithAggregatesFilter
  NOT: [ProfileThemeScalarWhereWithAggregatesInput!]
  OR: [ProfileThemeScalarWhereWithAggregatesInput!]
  themeId: StringWithAggregatesFilter
  themeManagerId: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ProfileThemeUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  Theme: ThemeUpdateOneRequiredWithoutProfileThemeNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileThemeNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfileThemeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfileThemeUpdateManyWithoutThemeManagerNestedInput {
  connect: [ProfileThemeWhereUniqueInput!]
  connectOrCreate: [ProfileThemeCreateOrConnectWithoutThemeManagerInput!]
  create: ProfileThemeCreateWithoutThemeManagerInput
  createMany: ProfileThemeCreateManyThemeManagerInputEnvelope
  delete: [ProfileThemeWhereUniqueInput!]
  deleteMany: [ProfileThemeScalarWhereInput!]
  disconnect: [ProfileThemeWhereUniqueInput!]
  set: [ProfileThemeWhereUniqueInput!]
  update: [ProfileThemeUpdateWithWhereUniqueWithoutThemeManagerInput!]
  updateMany: [ProfileThemeUpdateManyWithWhereWithoutThemeManagerInput!]
  upsert: [ProfileThemeUpsertWithWhereUniqueWithoutThemeManagerInput!]
}

input ProfileThemeUpdateManyWithoutThemeNestedInput {
  connect: [ProfileThemeWhereUniqueInput!]
  connectOrCreate: [ProfileThemeCreateOrConnectWithoutThemeInput!]
  create: ProfileThemeCreateWithoutThemeInput
  createMany: ProfileThemeCreateManyThemeInputEnvelope
  delete: [ProfileThemeWhereUniqueInput!]
  deleteMany: [ProfileThemeScalarWhereInput!]
  disconnect: [ProfileThemeWhereUniqueInput!]
  set: [ProfileThemeWhereUniqueInput!]
  update: [ProfileThemeUpdateWithWhereUniqueWithoutThemeInput!]
  updateMany: [ProfileThemeUpdateManyWithWhereWithoutThemeInput!]
  upsert: [ProfileThemeUpsertWithWhereUniqueWithoutThemeInput!]
}

input ProfileThemeUpdateManyWithWhereWithoutThemeInput {
  data: ProfileThemeUpdateManyMutationInput!
  where: ProfileThemeScalarWhereInput!
}

input ProfileThemeUpdateManyWithWhereWithoutThemeManagerInput {
  data: ProfileThemeUpdateManyMutationInput!
  where: ProfileThemeScalarWhereInput!
}

input ProfileThemeUpdateWithoutThemeInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileThemeNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfileThemeUpdateWithoutThemeManagerInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  Theme: ThemeUpdateOneRequiredWithoutProfileThemeNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfileThemeUpdateWithWhereUniqueWithoutThemeInput {
  data: ProfileThemeUpdateWithoutThemeInput!
  where: ProfileThemeWhereUniqueInput!
}

input ProfileThemeUpdateWithWhereUniqueWithoutThemeManagerInput {
  data: ProfileThemeUpdateWithoutThemeManagerInput!
  where: ProfileThemeWhereUniqueInput!
}

input ProfileThemeUpsertWithWhereUniqueWithoutThemeInput {
  create: ProfileThemeCreateWithoutThemeInput!
  update: ProfileThemeUpdateWithoutThemeInput!
  where: ProfileThemeWhereUniqueInput!
}

input ProfileThemeUpsertWithWhereUniqueWithoutThemeManagerInput {
  create: ProfileThemeCreateWithoutThemeManagerInput!
  update: ProfileThemeUpdateWithoutThemeManagerInput!
  where: ProfileThemeWhereUniqueInput!
}

input ProfileThemeWhereInput {
  AND: [ProfileThemeWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  isActive: BoolFilter
  NOT: [ProfileThemeWhereInput!]
  OR: [ProfileThemeWhereInput!]
  Theme: ThemeWhereInput
  themeId: StringFilter
  ThemeManager: ThemeManagerWhereInput
  themeManagerId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ProfileThemeWhereUniqueInput {
  id: String
}

enum ProfileType {
  GUEST
  PERSONAL
  VENUE
}

input ProfileUpdateDeviceManagerInput {
  push: [String!]
  set: [String!]
}

input ProfileUpdateInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  Groups: GroupUpdateManyWithoutProfileNestedInput
  id: StringFieldUpdateOperationsInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateManyMutationInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  DeviceManager: [String!]
  id: StringFieldUpdateOperationsInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfileUpdateManyWithoutChatroomNestedInput {
  connect: [ProfileWhereUniqueInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutChatroomInput!]
  create: ProfileCreateWithoutChatroomInput
  delete: [ProfileWhereUniqueInput!]
  deleteMany: [ProfileScalarWhereInput!]
  disconnect: [ProfileWhereUniqueInput!]
  set: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutChatroomInput!]
  updateMany: [ProfileUpdateManyWithWhereWithoutChatroomInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutChatroomInput!]
}

input ProfileUpdateManyWithoutGroupsNestedInput {
  connect: [ProfileWhereUniqueInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutGroupsInput!]
  create: ProfileCreateWithoutGroupsInput
  delete: [ProfileWhereUniqueInput!]
  deleteMany: [ProfileScalarWhereInput!]
  disconnect: [ProfileWhereUniqueInput!]
  set: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutGroupsInput!]
  updateMany: [ProfileUpdateManyWithWhereWithoutGroupsInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutGroupsInput!]
}

input ProfileUpdateManyWithWhereWithoutChatroomInput {
  data: ProfileUpdateManyMutationInput!
  where: ProfileScalarWhereInput!
}

input ProfileUpdateManyWithWhereWithoutGroupsInput {
  data: ProfileUpdateManyMutationInput!
  where: ProfileScalarWhereInput!
}

input ProfileUpdateOneRequiredWithoutCredentialsNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutCredentialsInput
  create: ProfileCreateWithoutCredentialsInput
  update: ProfileUpdateWithoutCredentialsInput
  upsert: ProfileUpsertWithoutCredentialsInput
}

input ProfileUpdateOneRequiredWithoutDetailInformationNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutDetailInformationInput
  create: ProfileCreateWithoutDetailInformationInput
  update: ProfileUpdateWithoutDetailInformationInput
  upsert: ProfileUpsertWithoutDetailInformationInput
}

input ProfileUpdateOneRequiredWithoutIdentifiableInformationNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutIdentifiableInformationInput
  create: ProfileCreateWithoutIdentifiableInformationInput
  update: ProfileUpdateWithoutIdentifiableInformationInput
  upsert: ProfileUpsertWithoutIdentifiableInformationInput
}

input ProfileUpdateOneRequiredWithoutNotificationsNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutNotificationsInput
  create: ProfileCreateWithoutNotificationsInput
  update: ProfileUpdateWithoutNotificationsInput
  upsert: ProfileUpsertWithoutNotificationsInput
}

input ProfileUpdateOneRequiredWithoutPersonalNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutPersonalInput
  create: ProfileCreateWithoutPersonalInput
  update: ProfileUpdateWithoutPersonalInput
  upsert: ProfileUpsertWithoutPersonalInput
}

input ProfileUpdateOneRequiredWithoutProfileSearchesServiceNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutProfileSearchesServiceInput
  create: ProfileCreateWithoutProfileSearchesServiceInput
  update: ProfileUpdateWithoutProfileSearchesServiceInput
  upsert: ProfileUpsertWithoutProfileSearchesServiceInput
}

input ProfileUpdateOneRequiredWithoutSecuredDataKeysNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutSecuredDataKeysInput
  create: ProfileCreateWithoutSecuredDataKeysInput
  update: ProfileUpdateWithoutSecuredDataKeysInput
  upsert: ProfileUpsertWithoutSecuredDataKeysInput
}

input ProfileUpdateOneRequiredWithoutSettingsNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutSettingsInput
  create: ProfileCreateWithoutSettingsInput
  update: ProfileUpdateWithoutSettingsInput
  upsert: ProfileUpsertWithoutSettingsInput
}

input ProfileUpdateOneRequiredWithoutThemeManagerNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutThemeManagerInput
  create: ProfileCreateWithoutThemeManagerInput
  update: ProfileUpdateWithoutThemeManagerInput
  upsert: ProfileUpsertWithoutThemeManagerInput
}

input ProfileUpdateOneRequiredWithoutVenueNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutVenueInput
  create: ProfileCreateWithoutVenueInput
  update: ProfileUpdateWithoutVenueInput
  upsert: ProfileUpsertWithoutVenueInput
}

input ProfileUpdateOneWithoutPhotosNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutPhotosInput
  create: ProfileCreateWithoutPhotosInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUpdateWithoutPhotosInput
  upsert: ProfileUpsertWithoutPhotosInput
}

input ProfileUpdateOneWithoutRelationshipsNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutRelationshipsInput
  create: ProfileCreateWithoutRelationshipsInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUpdateWithoutRelationshipsInput
  upsert: ProfileUpsertWithoutRelationshipsInput
}

input ProfileUpdateOneWithoutStorysNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutStorysInput
  create: ProfileCreateWithoutStorysInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUpdateWithoutStorysInput
  upsert: ProfileUpsertWithoutStorysInput
}

input ProfileUpdateWithoutChatroomInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  Groups: GroupUpdateManyWithoutProfileNestedInput
  id: StringFieldUpdateOperationsInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutCredentialsInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  Groups: GroupUpdateManyWithoutProfileNestedInput
  id: StringFieldUpdateOperationsInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutDetailInformationInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  Groups: GroupUpdateManyWithoutProfileNestedInput
  id: StringFieldUpdateOperationsInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutGroupsInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  id: StringFieldUpdateOperationsInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutIdentifiableInformationInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  Groups: GroupUpdateManyWithoutProfileNestedInput
  id: StringFieldUpdateOperationsInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutNotificationsInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  Groups: GroupUpdateManyWithoutProfileNestedInput
  id: StringFieldUpdateOperationsInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutPersonalInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  Groups: GroupUpdateManyWithoutProfileNestedInput
  id: StringFieldUpdateOperationsInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutPhotosInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  Groups: GroupUpdateManyWithoutProfileNestedInput
  id: StringFieldUpdateOperationsInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutProfileSearchesServiceInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  Groups: GroupUpdateManyWithoutProfileNestedInput
  id: StringFieldUpdateOperationsInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutRelationshipsInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  Groups: GroupUpdateManyWithoutProfileNestedInput
  id: StringFieldUpdateOperationsInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutSecuredDataKeysInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  Groups: GroupUpdateManyWithoutProfileNestedInput
  id: StringFieldUpdateOperationsInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutSettingsInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  Groups: GroupUpdateManyWithoutProfileNestedInput
  id: StringFieldUpdateOperationsInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutStorysInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  Groups: GroupUpdateManyWithoutProfileNestedInput
  id: StringFieldUpdateOperationsInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutThemeManagerInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  Groups: GroupUpdateManyWithoutProfileNestedInput
  id: StringFieldUpdateOperationsInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutVenueInput {
  bfsprofileid: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  DeviceManager: [String!]
  Groups: GroupUpdateManyWithoutProfileNestedInput
  id: StringFieldUpdateOperationsInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfileUpdateWithWhereUniqueWithoutChatroomInput {
  data: ProfileUpdateWithoutChatroomInput!
  where: ProfileWhereUniqueInput!
}

input ProfileUpdateWithWhereUniqueWithoutGroupsInput {
  data: ProfileUpdateWithoutGroupsInput!
  where: ProfileWhereUniqueInput!
}

input ProfileUpsertWithoutCredentialsInput {
  create: ProfileCreateWithoutCredentialsInput!
  update: ProfileUpdateWithoutCredentialsInput!
}

input ProfileUpsertWithoutDetailInformationInput {
  create: ProfileCreateWithoutDetailInformationInput!
  update: ProfileUpdateWithoutDetailInformationInput!
}

input ProfileUpsertWithoutIdentifiableInformationInput {
  create: ProfileCreateWithoutIdentifiableInformationInput!
  update: ProfileUpdateWithoutIdentifiableInformationInput!
}

input ProfileUpsertWithoutNotificationsInput {
  create: ProfileCreateWithoutNotificationsInput!
  update: ProfileUpdateWithoutNotificationsInput!
}

input ProfileUpsertWithoutPersonalInput {
  create: ProfileCreateWithoutPersonalInput!
  update: ProfileUpdateWithoutPersonalInput!
}

input ProfileUpsertWithoutPhotosInput {
  create: ProfileCreateWithoutPhotosInput!
  update: ProfileUpdateWithoutPhotosInput!
}

input ProfileUpsertWithoutProfileSearchesServiceInput {
  create: ProfileCreateWithoutProfileSearchesServiceInput!
  update: ProfileUpdateWithoutProfileSearchesServiceInput!
}

input ProfileUpsertWithoutRelationshipsInput {
  create: ProfileCreateWithoutRelationshipsInput!
  update: ProfileUpdateWithoutRelationshipsInput!
}

input ProfileUpsertWithoutSecuredDataKeysInput {
  create: ProfileCreateWithoutSecuredDataKeysInput!
  update: ProfileUpdateWithoutSecuredDataKeysInput!
}

input ProfileUpsertWithoutSettingsInput {
  create: ProfileCreateWithoutSettingsInput!
  update: ProfileUpdateWithoutSettingsInput!
}

input ProfileUpsertWithoutStorysInput {
  create: ProfileCreateWithoutStorysInput!
  update: ProfileUpdateWithoutStorysInput!
}

input ProfileUpsertWithoutThemeManagerInput {
  create: ProfileCreateWithoutThemeManagerInput!
  update: ProfileUpdateWithoutThemeManagerInput!
}

input ProfileUpsertWithoutVenueInput {
  create: ProfileCreateWithoutVenueInput!
  update: ProfileUpdateWithoutVenueInput!
}

input ProfileUpsertWithWhereUniqueWithoutChatroomInput {
  create: ProfileCreateWithoutChatroomInput!
  update: ProfileUpdateWithoutChatroomInput!
  where: ProfileWhereUniqueInput!
}

input ProfileUpsertWithWhereUniqueWithoutGroupsInput {
  create: ProfileCreateWithoutGroupsInput!
  update: ProfileUpdateWithoutGroupsInput!
  where: ProfileWhereUniqueInput!
}

type ProfileVenue {
  bfsprofileid: String!
  createdAt: DateTime!
  Credentials: Credentials!
  DetailInformation: DetailInformation
  distanceInM: Int
  id: String!
  IdentifiableInformation: IdentifiableInformation
  photos: [Photo!]!
  profilePhoto: Photo
  ProfileType: ProfileType!
  Relationships: [Relationship!]!
  ThemeManager: ThemeManager
  tonightStory: Story
  updatedAt: DateTime!
  Venue: Venue
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  bfsprofileid: StringFilter
  Chatroom: ChatroomListRelationFilter
  createdAt: DateTimeFilter
  Credentials: CredentialsWhereInput
  DetailInformation: DetailInformationWhereInput
  DeviceManager: StringNullableListFilter
  Groups: GroupListRelationFilter
  id: StringFilter
  IdentifiableInformation: IdentifiableInformationWhereInput
  NOT: [ProfileWhereInput!]
  Notifications: NotificationsWhereInput
  OR: [ProfileWhereInput!]
  Personal: PersonalWhereInput
  photos: PhotoListRelationFilter
  ProfileSearchesService: ProfileSearchesServiceWhereInput
  ProfileType: EnumProfileTypeFilter
  Relationships: RelationshipListRelationFilter
  SecuredDataKeys: SecuredDataKeysListRelationFilter
  Settings: SettingsWhereInput
  Storys: StoryListRelationFilter
  ThemeManager: ThemeManagerWhereInput
  updatedAt: DateTimeFilter
  Venue: VenueWhereInput
}

input ProfileWhereUniqueInput {
  bfsprofileid: String
  id: String
}

type PushToken {
  androidToken: String
  appleToken: String
  createdAt: DateTime
  Device: Device
  expoToken: String
  id: ID!
  isExpired: Boolean!
  receipts: [Json!]!
  updatedAt: DateTime
}

input PushTokenCountOrderByAggregateInput {
  androidToken: SortOrder
  appleToken: SortOrder
  createdAt: SortOrder
  expoToken: SortOrder
  id: SortOrder
  isExpired: SortOrder
  receipts: SortOrder
  updatedAt: SortOrder
}

input PushTokenCreateInput {
  androidToken: String
  appleToken: String
  createdAt: DateTime
  Device: DeviceCreateNestedOneWithoutPushTokenInput
  expoToken: String
  id: String
  isExpired: Boolean
  receipts: [Json!]
  updatedAt: DateTime
}

input PushTokenCreateManyInput {
  androidToken: String
  appleToken: String
  createdAt: DateTime
  expoToken: String
  id: String
  isExpired: Boolean
  receipts: [Json!]
  updatedAt: DateTime
}

input PushTokenCreateNestedOneWithoutDeviceInput {
  connect: PushTokenWhereUniqueInput
  connectOrCreate: PushTokenCreateOrConnectWithoutDeviceInput
  create: PushTokenCreateWithoutDeviceInput
}

input PushTokenCreateOrConnectWithoutDeviceInput {
  create: PushTokenCreateWithoutDeviceInput!
  where: PushTokenWhereUniqueInput!
}

input PushTokenCreatereceiptsInput {
  set: [Json!]!
}

input PushTokenCreateWithoutDeviceInput {
  androidToken: String
  appleToken: String
  createdAt: DateTime
  expoToken: String
  id: String
  isExpired: Boolean
  receipts: [Json!]
  updatedAt: DateTime
}

input PushTokenMaxOrderByAggregateInput {
  androidToken: SortOrder
  appleToken: SortOrder
  createdAt: SortOrder
  expoToken: SortOrder
  id: SortOrder
  isExpired: SortOrder
  updatedAt: SortOrder
}

input PushTokenMinOrderByAggregateInput {
  androidToken: SortOrder
  appleToken: SortOrder
  createdAt: SortOrder
  expoToken: SortOrder
  id: SortOrder
  isExpired: SortOrder
  updatedAt: SortOrder
}

input PushTokenOrderByWithAggregationInput {
  _count: PushTokenCountOrderByAggregateInput
  _max: PushTokenMaxOrderByAggregateInput
  _min: PushTokenMinOrderByAggregateInput
  androidToken: SortOrder
  appleToken: SortOrder
  createdAt: SortOrder
  expoToken: SortOrder
  id: SortOrder
  isExpired: SortOrder
  receipts: SortOrder
  updatedAt: SortOrder
}

input PushTokenOrderByWithRelationInput {
  androidToken: SortOrder
  appleToken: SortOrder
  createdAt: SortOrder
  Device: DeviceOrderByWithRelationInput
  expoToken: SortOrder
  id: SortOrder
  isExpired: SortOrder
  receipts: SortOrder
  updatedAt: SortOrder
}

input PushTokenRelationFilter {
  is: PushTokenWhereInput
  isNot: PushTokenWhereInput
}

enum PushTokenScalarFieldEnum {
  androidToken
  appleToken
  createdAt
  expoToken
  id
  isExpired
  receipts
  updatedAt
}

input PushTokenScalarWhereWithAggregatesInput {
  AND: [PushTokenScalarWhereWithAggregatesInput!]
  androidToken: StringNullableWithAggregatesFilter
  appleToken: StringNullableWithAggregatesFilter
  createdAt: DateTimeNullableWithAggregatesFilter
  expoToken: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  isExpired: BoolWithAggregatesFilter
  NOT: [PushTokenScalarWhereWithAggregatesInput!]
  OR: [PushTokenScalarWhereWithAggregatesInput!]
  receipts: JsonNullableListFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input PushTokenUpdateInput {
  androidToken: NullableStringFieldUpdateOperationsInput
  appleToken: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateOneWithoutPushTokenNestedInput
  expoToken: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isExpired: BoolFieldUpdateOperationsInput
  receipts: [Json!]
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input PushTokenUpdateManyMutationInput {
  androidToken: NullableStringFieldUpdateOperationsInput
  appleToken: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isExpired: BoolFieldUpdateOperationsInput
  receipts: [Json!]
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input PushTokenUpdateOneWithoutDeviceNestedInput {
  connect: PushTokenWhereUniqueInput
  connectOrCreate: PushTokenCreateOrConnectWithoutDeviceInput
  create: PushTokenCreateWithoutDeviceInput
  delete: Boolean
  disconnect: Boolean
  update: PushTokenUpdateWithoutDeviceInput
  upsert: PushTokenUpsertWithoutDeviceInput
}

input PushTokenUpdatereceiptsInput {
  push: Json
  set: [Json!]
}

input PushTokenUpdateWithoutDeviceInput {
  androidToken: NullableStringFieldUpdateOperationsInput
  appleToken: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isExpired: BoolFieldUpdateOperationsInput
  receipts: [Json!]
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input PushTokenUpsertWithoutDeviceInput {
  create: PushTokenCreateWithoutDeviceInput!
  update: PushTokenUpdateWithoutDeviceInput!
}

input PushTokenWhereInput {
  AND: [PushTokenWhereInput!]
  androidToken: StringNullableFilter
  appleToken: StringNullableFilter
  createdAt: DateTimeNullableFilter
  Device: DeviceWhereInput
  expoToken: StringNullableFilter
  id: StringFilter
  isExpired: BoolFilter
  NOT: [PushTokenWhereInput!]
  OR: [PushTokenWhereInput!]
  receipts: JsonNullableListFilter
  updatedAt: DateTimeNullableFilter
}

input PushTokenWhereUniqueInput {
  id: String
}

type Query {
  authorizedProfiles(where: AuthorizedProfilesWhereInput!): AuthorizedProfilesResponseUnion
  checkUsername(username: String!): Boolean!
  currentVenue(currentLocationCoords: CoordsInput, cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): ProfileVenue
  emojimood(where: EmojimoodWhereUniqueInput!): Emojimood
  emojimoods(cursor: EmojimoodWhereUniqueInput, distinct: [EmojimoodScalarFieldEnum!], orderBy: [EmojimoodOrderByWithRelationInput!], skip: Int, take: Int, where: EmojimoodWhereInput): [Emojimood!]!
  exploreSearch(search: String!): ExploreResponse!
  friendsFromContacts(contact: [ContactInput!]!): String!
  getADeviceManager: DeviceManagerDeviceProfilesResponseUnion!
  getAllCitiesByState(countryIsoCode: String!, stateIsoCode: String!): [CityResponseObject!]!
  getAllCountries: [CountryResponseObject!]!
  getAllInterrests: [Json!]!
  getAllStatesByCountry(countryIsoCode: String!): [StateResponseObject!]!
  getAllThemes: [Theme!]!
  getLiveVenueTotals(profileIdVenue: String): LiveVenueTotals!
  getNotifications: NotificationResponse!
  getRelationshipFriendRequestStatus(profileId: String!): NotificationFriendRequestStatusResponse!
  getSecureFriendQRCodeData: String!
  H3IndexGrid(cell: String!, ringSize: Int!): [String!]!
  H3IndexLatLng(cell: String!): [Float!]!
  loginPassword(password: String!, username: String!): Boolean!
  privacyTermsDocuments: PrivacyAndTermsDocumentResponse!
  profile(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): Profile
  profiles(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): [Profile!]!
  sendAuthenticatorDeviceOwnerCode: Boolean!
  venue(cursor: VenueWhereUniqueInput, distinct: [VenueScalarFieldEnum!], orderBy: [VenueOrderByWithRelationInput!], skip: Int, take: Int, where: VenueWhereInput): Venue
  venues(cursor: VenueWhereUniqueInput, distinct: [VenueScalarFieldEnum!], orderBy: [VenueOrderByWithRelationInput!], skip: Int, take: Int, where: VenueWhereInput): [Venue!]!
  venuesNearby(countryIsoCode: String!, currentLocationCoords: CoordsInput, kRing: Int, searchAreaCoords: CoordsInput!, stateIsoCode: String!): VenuesNearbyResponse!
}

enum QueryMode {
  default
  insensitive
}

union RefreshDeviceManagerDeviceManagerResponseUnion = ClientDeviceManager | ErrorManaging

type RefreshToken {
  createdAt: DateTime!
  DeviceProfile: ClientDeviceProfile
  DeviceProfileId: String
  id: ID!
  token: String!
  updatedAt: DateTime!
}

input RefreshTokenAvgOrderByAggregateInput {
  id: SortOrder
}

input RefreshTokenCountOrderByAggregateInput {
  createdAt: SortOrder
  DeviceProfileId: SortOrder
  id: SortOrder
  token: SortOrder
  updatedAt: SortOrder
}

input RefreshTokenCreateInput {
  createdAt: DateTime
  DeviceProfile: DeviceProfileCreateNestedOneWithoutRefreshTokenInput
  token: String!
  updatedAt: DateTime
}

input RefreshTokenCreateManyInput {
  createdAt: DateTime
  DeviceProfileId: String
  id: Int
  token: String!
  updatedAt: DateTime
}

input RefreshTokenCreateNestedOneWithoutDeviceProfileInput {
  connect: RefreshTokenWhereUniqueInput
  connectOrCreate: RefreshTokenCreateOrConnectWithoutDeviceProfileInput
  create: RefreshTokenCreateWithoutDeviceProfileInput
}

input RefreshTokenCreateOrConnectWithoutDeviceProfileInput {
  create: RefreshTokenCreateWithoutDeviceProfileInput!
  where: RefreshTokenWhereUniqueInput!
}

input RefreshTokenCreateWithoutDeviceProfileInput {
  createdAt: DateTime
  token: String!
  updatedAt: DateTime
}

input RefreshTokenMaxOrderByAggregateInput {
  createdAt: SortOrder
  DeviceProfileId: SortOrder
  id: SortOrder
  token: SortOrder
  updatedAt: SortOrder
}

input RefreshTokenMinOrderByAggregateInput {
  createdAt: SortOrder
  DeviceProfileId: SortOrder
  id: SortOrder
  token: SortOrder
  updatedAt: SortOrder
}

input RefreshTokenOrderByWithAggregationInput {
  _avg: RefreshTokenAvgOrderByAggregateInput
  _count: RefreshTokenCountOrderByAggregateInput
  _max: RefreshTokenMaxOrderByAggregateInput
  _min: RefreshTokenMinOrderByAggregateInput
  _sum: RefreshTokenSumOrderByAggregateInput
  createdAt: SortOrder
  DeviceProfileId: SortOrder
  id: SortOrder
  token: SortOrder
  updatedAt: SortOrder
}

input RefreshTokenOrderByWithRelationInput {
  createdAt: SortOrder
  DeviceProfile: DeviceProfileOrderByWithRelationInput
  DeviceProfileId: SortOrder
  id: SortOrder
  token: SortOrder
  updatedAt: SortOrder
}

input RefreshTokenRelationFilter {
  is: RefreshTokenWhereInput
  isNot: RefreshTokenWhereInput
}

enum RefreshTokenScalarFieldEnum {
  createdAt
  DeviceProfileId
  id
  token
  updatedAt
}

input RefreshTokenScalarWhereWithAggregatesInput {
  AND: [RefreshTokenScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  DeviceProfileId: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  NOT: [RefreshTokenScalarWhereWithAggregatesInput!]
  OR: [RefreshTokenScalarWhereWithAggregatesInput!]
  token: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input RefreshTokenSumOrderByAggregateInput {
  id: SortOrder
}

input RefreshTokenUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  DeviceProfile: DeviceProfileUpdateOneWithoutRefreshTokenNestedInput
  token: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefreshTokenUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefreshTokenUpdateOneWithoutDeviceProfileNestedInput {
  connect: RefreshTokenWhereUniqueInput
  connectOrCreate: RefreshTokenCreateOrConnectWithoutDeviceProfileInput
  create: RefreshTokenCreateWithoutDeviceProfileInput
  delete: Boolean
  disconnect: Boolean
  update: RefreshTokenUpdateWithoutDeviceProfileInput
  upsert: RefreshTokenUpsertWithoutDeviceProfileInput
}

input RefreshTokenUpdateWithoutDeviceProfileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefreshTokenUpsertWithoutDeviceProfileInput {
  create: RefreshTokenCreateWithoutDeviceProfileInput!
  update: RefreshTokenUpdateWithoutDeviceProfileInput!
}

input RefreshTokenWhereInput {
  AND: [RefreshTokenWhereInput!]
  createdAt: DateTimeFilter
  DeviceProfile: DeviceProfileWhereInput
  DeviceProfileId: StringNullableFilter
  id: IntFilter
  NOT: [RefreshTokenWhereInput!]
  OR: [RefreshTokenWhereInput!]
  token: StringFilter
  updatedAt: DateTimeFilter
}

input RefreshTokenWhereUniqueInput {
  DeviceProfileId: String
  id: Int
  token: String
}

type RejectedFriendsResponse {
  friends: Boolean!
}

type Relationship {
  createdAt: DateTime!
  friendProfile: Profile!
  friendProfileId: String!
  id: ID!
  Profile: Profile
  profileId: String
  RelationshipStatus: [RelationshipStatus!]!
  updatedAt: DateTime!
  venueMetAt: String
}

input RelationshipCountOrderByAggregateInput {
  createdAt: SortOrder
  friendProfileId: SortOrder
  id: SortOrder
  profileId: SortOrder
  RelationshipStatus: SortOrder
  updatedAt: SortOrder
  venueMetAt: SortOrder
}

input RelationshipCreateInput {
  createdAt: DateTime
  friendProfileId: String!
  id: String
  Profile: ProfileCreateNestedOneWithoutRelationshipsInput
  RelationshipStatus: [RelationshipStatus!]
  updatedAt: DateTime
  venueMetAt: String
}

input RelationshipCreateManyInput {
  createdAt: DateTime
  friendProfileId: String!
  id: String
  profileId: String
  RelationshipStatus: [RelationshipStatus!]
  updatedAt: DateTime
  venueMetAt: String
}

input RelationshipCreateManyProfileInput {
  createdAt: DateTime
  friendProfileId: String!
  id: String
  RelationshipStatus: [RelationshipStatus!]
  updatedAt: DateTime
  venueMetAt: String
}

input RelationshipCreateManyProfileInputEnvelope {
  data: [RelationshipCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input RelationshipCreateNestedManyWithoutProfileInput {
  connect: [RelationshipWhereUniqueInput!]
  connectOrCreate: [RelationshipCreateOrConnectWithoutProfileInput!]
  create: RelationshipCreateWithoutProfileInput
  createMany: RelationshipCreateManyProfileInputEnvelope
}

input RelationshipCreateOrConnectWithoutProfileInput {
  create: RelationshipCreateWithoutProfileInput!
  where: RelationshipWhereUniqueInput!
}

input RelationshipCreateRelationshipStatusInput {
  set: [RelationshipStatus!]!
}

input RelationshipCreateWithoutProfileInput {
  createdAt: DateTime
  friendProfileId: String!
  id: String
  RelationshipStatus: [RelationshipStatus!]
  updatedAt: DateTime
  venueMetAt: String
}

input RelationshipListRelationFilter {
  every: RelationshipWhereInput
  none: RelationshipWhereInput
  some: RelationshipWhereInput
}

input RelationshipMaxOrderByAggregateInput {
  createdAt: SortOrder
  friendProfileId: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
  venueMetAt: SortOrder
}

input RelationshipMinOrderByAggregateInput {
  createdAt: SortOrder
  friendProfileId: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
  venueMetAt: SortOrder
}

input RelationshipOrderByRelationAggregateInput {
  _count: SortOrder
}

input RelationshipOrderByWithAggregationInput {
  _count: RelationshipCountOrderByAggregateInput
  _max: RelationshipMaxOrderByAggregateInput
  _min: RelationshipMinOrderByAggregateInput
  createdAt: SortOrder
  friendProfileId: SortOrder
  id: SortOrder
  profileId: SortOrder
  RelationshipStatus: SortOrder
  updatedAt: SortOrder
  venueMetAt: SortOrder
}

input RelationshipOrderByWithRelationInput {
  createdAt: SortOrder
  friendProfileId: SortOrder
  id: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  RelationshipStatus: SortOrder
  updatedAt: SortOrder
  venueMetAt: SortOrder
}

enum RelationshipScalarFieldEnum {
  createdAt
  friendProfileId
  id
  profileId
  RelationshipStatus
  updatedAt
  venueMetAt
}

input RelationshipScalarWhereInput {
  AND: [RelationshipScalarWhereInput!]
  createdAt: DateTimeFilter
  friendProfileId: StringFilter
  id: StringFilter
  NOT: [RelationshipScalarWhereInput!]
  OR: [RelationshipScalarWhereInput!]
  profileId: StringNullableFilter
  RelationshipStatus: EnumRelationshipStatusNullableListFilter
  updatedAt: DateTimeFilter
  venueMetAt: StringNullableFilter
}

input RelationshipScalarWhereWithAggregatesInput {
  AND: [RelationshipScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  friendProfileId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [RelationshipScalarWhereWithAggregatesInput!]
  OR: [RelationshipScalarWhereWithAggregatesInput!]
  profileId: StringNullableWithAggregatesFilter
  RelationshipStatus: EnumRelationshipStatusNullableListFilter
  updatedAt: DateTimeWithAggregatesFilter
  venueMetAt: StringNullableWithAggregatesFilter
}

enum RelationshipStatus {
  DATING
  FRIENDS
}

input RelationshipUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  friendProfileId: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneWithoutRelationshipsNestedInput
  RelationshipStatus: [RelationshipStatus!]
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueMetAt: NullableStringFieldUpdateOperationsInput
}

input RelationshipUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  friendProfileId: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  RelationshipStatus: [RelationshipStatus!]
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueMetAt: NullableStringFieldUpdateOperationsInput
}

input RelationshipUpdateManyWithoutProfileNestedInput {
  connect: [RelationshipWhereUniqueInput!]
  connectOrCreate: [RelationshipCreateOrConnectWithoutProfileInput!]
  create: RelationshipCreateWithoutProfileInput
  createMany: RelationshipCreateManyProfileInputEnvelope
  delete: [RelationshipWhereUniqueInput!]
  deleteMany: [RelationshipScalarWhereInput!]
  disconnect: [RelationshipWhereUniqueInput!]
  set: [RelationshipWhereUniqueInput!]
  update: [RelationshipUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [RelationshipUpdateManyWithWhereWithoutProfileInput!]
  upsert: [RelationshipUpsertWithWhereUniqueWithoutProfileInput!]
}

input RelationshipUpdateManyWithWhereWithoutProfileInput {
  data: RelationshipUpdateManyMutationInput!
  where: RelationshipScalarWhereInput!
}

input RelationshipUpdateRelationshipStatusInput {
  push: [RelationshipStatus!]
  set: [RelationshipStatus!]
}

input RelationshipUpdateWithoutProfileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  friendProfileId: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  RelationshipStatus: [RelationshipStatus!]
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueMetAt: NullableStringFieldUpdateOperationsInput
}

input RelationshipUpdateWithWhereUniqueWithoutProfileInput {
  data: RelationshipUpdateWithoutProfileInput!
  where: RelationshipWhereUniqueInput!
}

input RelationshipUpsertWithWhereUniqueWithoutProfileInput {
  create: RelationshipCreateWithoutProfileInput!
  update: RelationshipUpdateWithoutProfileInput!
  where: RelationshipWhereUniqueInput!
}

input RelationshipWhereInput {
  AND: [RelationshipWhereInput!]
  createdAt: DateTimeFilter
  friendProfileId: StringFilter
  id: StringFilter
  NOT: [RelationshipWhereInput!]
  OR: [RelationshipWhereInput!]
  Profile: ProfileWhereInput
  profileId: StringNullableFilter
  RelationshipStatus: EnumRelationshipStatusNullableListFilter
  updatedAt: DateTimeFilter
  venueMetAt: StringNullableFilter
}

input RelationshipWhereUniqueInput {
  id: String
}

type SearchAreaResponse {
  city: PlaceType!
  coords: Coords!
  country: PlaceType!
  state: PlaceType!
}

enum SecureDataType {
  FRIENDING
  JOINING
}

input SecuredDataKeysAvgOrderByAggregateInput {
  used: SortOrder
}

input SecuredDataKeysCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  key: SortOrder
  profileId: SortOrder
  SecureDataType: SortOrder
  updatedAt: SortOrder
  used: SortOrder
}

input SecuredDataKeysCreateInput {
  createdAt: DateTime
  id: String
  key: String!
  Profile: ProfileCreateNestedOneWithoutSecuredDataKeysInput!
  SecureDataType: SecureDataType!
  updatedAt: DateTime
  used: Int
}

input SecuredDataKeysCreateManyInput {
  createdAt: DateTime
  id: String
  key: String!
  profileId: String!
  SecureDataType: SecureDataType!
  updatedAt: DateTime
  used: Int
}

input SecuredDataKeysCreateManyProfileInput {
  createdAt: DateTime
  id: String
  key: String!
  SecureDataType: SecureDataType!
  updatedAt: DateTime
  used: Int
}

input SecuredDataKeysCreateManyProfileInputEnvelope {
  data: [SecuredDataKeysCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input SecuredDataKeysCreateNestedManyWithoutProfileInput {
  connect: [SecuredDataKeysWhereUniqueInput!]
  connectOrCreate: [SecuredDataKeysCreateOrConnectWithoutProfileInput!]
  create: SecuredDataKeysCreateWithoutProfileInput
  createMany: SecuredDataKeysCreateManyProfileInputEnvelope
}

input SecuredDataKeysCreateOrConnectWithoutProfileInput {
  create: SecuredDataKeysCreateWithoutProfileInput!
  where: SecuredDataKeysWhereUniqueInput!
}

input SecuredDataKeysCreateWithoutProfileInput {
  createdAt: DateTime
  id: String
  key: String!
  SecureDataType: SecureDataType!
  updatedAt: DateTime
  used: Int
}

input SecuredDataKeysListRelationFilter {
  every: SecuredDataKeysWhereInput
  none: SecuredDataKeysWhereInput
  some: SecuredDataKeysWhereInput
}

input SecuredDataKeysMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  key: SortOrder
  profileId: SortOrder
  SecureDataType: SortOrder
  updatedAt: SortOrder
  used: SortOrder
}

input SecuredDataKeysMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  key: SortOrder
  profileId: SortOrder
  SecureDataType: SortOrder
  updatedAt: SortOrder
  used: SortOrder
}

input SecuredDataKeysOrderByRelationAggregateInput {
  _count: SortOrder
}

input SecuredDataKeysOrderByWithAggregationInput {
  _avg: SecuredDataKeysAvgOrderByAggregateInput
  _count: SecuredDataKeysCountOrderByAggregateInput
  _max: SecuredDataKeysMaxOrderByAggregateInput
  _min: SecuredDataKeysMinOrderByAggregateInput
  _sum: SecuredDataKeysSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  key: SortOrder
  profileId: SortOrder
  SecureDataType: SortOrder
  updatedAt: SortOrder
  used: SortOrder
}

input SecuredDataKeysOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  key: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  SecureDataType: SortOrder
  updatedAt: SortOrder
  used: SortOrder
}

enum SecuredDataKeysScalarFieldEnum {
  createdAt
  id
  key
  profileId
  SecureDataType
  updatedAt
  used
}

input SecuredDataKeysScalarWhereInput {
  AND: [SecuredDataKeysScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  key: StringFilter
  NOT: [SecuredDataKeysScalarWhereInput!]
  OR: [SecuredDataKeysScalarWhereInput!]
  profileId: StringFilter
  SecureDataType: EnumSecureDataTypeFilter
  updatedAt: DateTimeFilter
  used: IntFilter
}

input SecuredDataKeysScalarWhereWithAggregatesInput {
  AND: [SecuredDataKeysScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  key: StringWithAggregatesFilter
  NOT: [SecuredDataKeysScalarWhereWithAggregatesInput!]
  OR: [SecuredDataKeysScalarWhereWithAggregatesInput!]
  profileId: StringWithAggregatesFilter
  SecureDataType: EnumSecureDataTypeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  used: IntWithAggregatesFilter
}

input SecuredDataKeysSumOrderByAggregateInput {
  used: SortOrder
}

input SecuredDataKeysUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutSecuredDataKeysNestedInput
  SecureDataType: EnumSecureDataTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  used: IntFieldUpdateOperationsInput
}

input SecuredDataKeysUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  SecureDataType: EnumSecureDataTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  used: IntFieldUpdateOperationsInput
}

input SecuredDataKeysUpdateManyWithoutProfileNestedInput {
  connect: [SecuredDataKeysWhereUniqueInput!]
  connectOrCreate: [SecuredDataKeysCreateOrConnectWithoutProfileInput!]
  create: SecuredDataKeysCreateWithoutProfileInput
  createMany: SecuredDataKeysCreateManyProfileInputEnvelope
  delete: [SecuredDataKeysWhereUniqueInput!]
  deleteMany: [SecuredDataKeysScalarWhereInput!]
  disconnect: [SecuredDataKeysWhereUniqueInput!]
  set: [SecuredDataKeysWhereUniqueInput!]
  update: [SecuredDataKeysUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [SecuredDataKeysUpdateManyWithWhereWithoutProfileInput!]
  upsert: [SecuredDataKeysUpsertWithWhereUniqueWithoutProfileInput!]
}

input SecuredDataKeysUpdateManyWithWhereWithoutProfileInput {
  data: SecuredDataKeysUpdateManyMutationInput!
  where: SecuredDataKeysScalarWhereInput!
}

input SecuredDataKeysUpdateWithoutProfileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  SecureDataType: EnumSecureDataTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  used: IntFieldUpdateOperationsInput
}

input SecuredDataKeysUpdateWithWhereUniqueWithoutProfileInput {
  data: SecuredDataKeysUpdateWithoutProfileInput!
  where: SecuredDataKeysWhereUniqueInput!
}

input SecuredDataKeysUpsertWithWhereUniqueWithoutProfileInput {
  create: SecuredDataKeysCreateWithoutProfileInput!
  update: SecuredDataKeysUpdateWithoutProfileInput!
  where: SecuredDataKeysWhereUniqueInput!
}

input SecuredDataKeysWhereInput {
  AND: [SecuredDataKeysWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  key: StringFilter
  NOT: [SecuredDataKeysWhereInput!]
  OR: [SecuredDataKeysWhereInput!]
  Profile: ProfileWhereInput
  profileId: StringFilter
  SecureDataType: EnumSecureDataTypeFilter
  updatedAt: DateTimeFilter
  used: IntFilter
}

input SecuredDataKeysWhereUniqueInput {
  id: String
  key: String
}

input SettingsCountOrderByAggregateInput {
  eventPushNotifications: SortOrder
  id: SortOrder
  messagePushNotifications: SortOrder
  profileId: SortOrder
  PushNotifications: SortOrder
}

input SettingsCreateInput {
  eventPushNotifications: Boolean!
  id: String
  messagePushNotifications: Boolean!
  Profile: ProfileCreateNestedOneWithoutSettingsInput!
  PushNotifications: Boolean!
}

input SettingsCreateManyInput {
  eventPushNotifications: Boolean!
  id: String
  messagePushNotifications: Boolean!
  profileId: String!
  PushNotifications: Boolean!
}

input SettingsCreateNestedOneWithoutProfileInput {
  connect: SettingsWhereUniqueInput
  connectOrCreate: SettingsCreateOrConnectWithoutProfileInput
  create: SettingsCreateWithoutProfileInput
}

input SettingsCreateOrConnectWithoutProfileInput {
  create: SettingsCreateWithoutProfileInput!
  where: SettingsWhereUniqueInput!
}

input SettingsCreateWithoutProfileInput {
  eventPushNotifications: Boolean!
  id: String
  messagePushNotifications: Boolean!
  PushNotifications: Boolean!
}

input SettingsMaxOrderByAggregateInput {
  eventPushNotifications: SortOrder
  id: SortOrder
  messagePushNotifications: SortOrder
  profileId: SortOrder
  PushNotifications: SortOrder
}

input SettingsMinOrderByAggregateInput {
  eventPushNotifications: SortOrder
  id: SortOrder
  messagePushNotifications: SortOrder
  profileId: SortOrder
  PushNotifications: SortOrder
}

input SettingsOrderByWithAggregationInput {
  _count: SettingsCountOrderByAggregateInput
  _max: SettingsMaxOrderByAggregateInput
  _min: SettingsMinOrderByAggregateInput
  eventPushNotifications: SortOrder
  id: SortOrder
  messagePushNotifications: SortOrder
  profileId: SortOrder
  PushNotifications: SortOrder
}

input SettingsOrderByWithRelationInput {
  eventPushNotifications: SortOrder
  id: SortOrder
  messagePushNotifications: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  PushNotifications: SortOrder
}

input SettingsRelationFilter {
  is: SettingsWhereInput
  isNot: SettingsWhereInput
}

enum SettingsScalarFieldEnum {
  eventPushNotifications
  id
  messagePushNotifications
  profileId
  PushNotifications
}

input SettingsScalarWhereWithAggregatesInput {
  AND: [SettingsScalarWhereWithAggregatesInput!]
  eventPushNotifications: BoolWithAggregatesFilter
  id: StringWithAggregatesFilter
  messagePushNotifications: BoolWithAggregatesFilter
  NOT: [SettingsScalarWhereWithAggregatesInput!]
  OR: [SettingsScalarWhereWithAggregatesInput!]
  profileId: StringWithAggregatesFilter
  PushNotifications: BoolWithAggregatesFilter
}

input SettingsUpdateInput {
  eventPushNotifications: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  messagePushNotifications: BoolFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutSettingsNestedInput
  PushNotifications: BoolFieldUpdateOperationsInput
}

input SettingsUpdateManyMutationInput {
  eventPushNotifications: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  messagePushNotifications: BoolFieldUpdateOperationsInput
  PushNotifications: BoolFieldUpdateOperationsInput
}

input SettingsUpdateOneWithoutProfileNestedInput {
  connect: SettingsWhereUniqueInput
  connectOrCreate: SettingsCreateOrConnectWithoutProfileInput
  create: SettingsCreateWithoutProfileInput
  delete: Boolean
  disconnect: Boolean
  update: SettingsUpdateWithoutProfileInput
  upsert: SettingsUpsertWithoutProfileInput
}

input SettingsUpdateWithoutProfileInput {
  eventPushNotifications: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  messagePushNotifications: BoolFieldUpdateOperationsInput
  PushNotifications: BoolFieldUpdateOperationsInput
}

input SettingsUpsertWithoutProfileInput {
  create: SettingsCreateWithoutProfileInput!
  update: SettingsUpdateWithoutProfileInput!
}

input SettingsWhereInput {
  AND: [SettingsWhereInput!]
  eventPushNotifications: BoolFilter
  id: StringFilter
  messagePushNotifications: BoolFilter
  NOT: [SettingsWhereInput!]
  OR: [SettingsWhereInput!]
  Profile: ProfileWhereInput
  profileId: StringFilter
  PushNotifications: BoolFilter
}

input SettingsWhereUniqueInput {
  id: String
  profileId: String
}

enum SortOrder {
  asc
  desc
}

type StateResponseObject {
  countryCode: String!
  isoCode: String!
  latitude: String
  longitude: String
  name: String!
}

type Story {
  createdAt: DateTime!
  date: DateTime!
  emojimood: [Emojimood!]!
  id: ID!
  photos: [Photo!]!
  Profile: Profile!
  startDate: DateTime!
  updatedAt: DateTime
}

input StoryCountOrderByAggregateInput {
  createdAt: SortOrder
  date: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input StoryCreateInput {
  createdAt: DateTime
  date: DateTime!
  emojimood: EmojimoodCreateNestedManyWithoutStoryInput
  id: String
  photos: PhotoCreateNestedManyWithoutStoryInput
  Profile: ProfileCreateNestedOneWithoutStorysInput
  updatedAt: DateTime
}

input StoryCreateManyInput {
  createdAt: DateTime
  date: DateTime!
  id: String
  profileId: String
  updatedAt: DateTime
}

input StoryCreateManyProfileInput {
  createdAt: DateTime
  date: DateTime!
  id: String
  updatedAt: DateTime
}

input StoryCreateManyProfileInputEnvelope {
  data: [StoryCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input StoryCreateNestedManyWithoutEmojimoodInput {
  connect: [StoryWhereUniqueInput!]
  connectOrCreate: [StoryCreateOrConnectWithoutEmojimoodInput!]
  create: StoryCreateWithoutEmojimoodInput
}

input StoryCreateNestedManyWithoutProfileInput {
  connect: [StoryWhereUniqueInput!]
  connectOrCreate: [StoryCreateOrConnectWithoutProfileInput!]
  create: StoryCreateWithoutProfileInput
  createMany: StoryCreateManyProfileInputEnvelope
}

input StoryCreateNestedOneWithoutPhotosInput {
  connect: StoryWhereUniqueInput
  connectOrCreate: StoryCreateOrConnectWithoutPhotosInput
  create: StoryCreateWithoutPhotosInput
}

input StoryCreateOrConnectWithoutEmojimoodInput {
  create: StoryCreateWithoutEmojimoodInput!
  where: StoryWhereUniqueInput!
}

input StoryCreateOrConnectWithoutPhotosInput {
  create: StoryCreateWithoutPhotosInput!
  where: StoryWhereUniqueInput!
}

input StoryCreateOrConnectWithoutProfileInput {
  create: StoryCreateWithoutProfileInput!
  where: StoryWhereUniqueInput!
}

input StoryCreateWithoutEmojimoodInput {
  createdAt: DateTime
  date: DateTime!
  id: String
  photos: PhotoCreateNestedManyWithoutStoryInput
  Profile: ProfileCreateNestedOneWithoutStorysInput
  updatedAt: DateTime
}

input StoryCreateWithoutPhotosInput {
  createdAt: DateTime
  date: DateTime!
  emojimood: EmojimoodCreateNestedManyWithoutStoryInput
  id: String
  Profile: ProfileCreateNestedOneWithoutStorysInput
  updatedAt: DateTime
}

input StoryCreateWithoutProfileInput {
  createdAt: DateTime
  date: DateTime!
  emojimood: EmojimoodCreateNestedManyWithoutStoryInput
  id: String
  photos: PhotoCreateNestedManyWithoutStoryInput
  updatedAt: DateTime
}

input StoryListRelationFilter {
  every: StoryWhereInput
  none: StoryWhereInput
  some: StoryWhereInput
}

input StoryMaxOrderByAggregateInput {
  createdAt: SortOrder
  date: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input StoryMinOrderByAggregateInput {
  createdAt: SortOrder
  date: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input StoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input StoryOrderByWithAggregationInput {
  _count: StoryCountOrderByAggregateInput
  _max: StoryMaxOrderByAggregateInput
  _min: StoryMinOrderByAggregateInput
  createdAt: SortOrder
  date: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input StoryOrderByWithRelationInput {
  createdAt: SortOrder
  date: SortOrder
  emojimood: EmojimoodOrderByRelationAggregateInput
  id: SortOrder
  photos: PhotoOrderByRelationAggregateInput
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  updatedAt: SortOrder
}

input StoryRelationFilter {
  is: StoryWhereInput
  isNot: StoryWhereInput
}

enum StoryScalarFieldEnum {
  createdAt
  date
  id
  profileId
  updatedAt
}

input StoryScalarWhereInput {
  AND: [StoryScalarWhereInput!]
  createdAt: DateTimeFilter
  date: DateTimeFilter
  id: StringFilter
  NOT: [StoryScalarWhereInput!]
  OR: [StoryScalarWhereInput!]
  profileId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input StoryScalarWhereWithAggregatesInput {
  AND: [StoryScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  date: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [StoryScalarWhereWithAggregatesInput!]
  OR: [StoryScalarWhereWithAggregatesInput!]
  profileId: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input StoryUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  emojimood: EmojimoodUpdateManyWithoutStoryNestedInput
  id: StringFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutStoryNestedInput
  Profile: ProfileUpdateOneWithoutStorysNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateManyWithoutEmojimoodNestedInput {
  connect: [StoryWhereUniqueInput!]
  connectOrCreate: [StoryCreateOrConnectWithoutEmojimoodInput!]
  create: StoryCreateWithoutEmojimoodInput
  delete: [StoryWhereUniqueInput!]
  deleteMany: [StoryScalarWhereInput!]
  disconnect: [StoryWhereUniqueInput!]
  set: [StoryWhereUniqueInput!]
  update: [StoryUpdateWithWhereUniqueWithoutEmojimoodInput!]
  updateMany: [StoryUpdateManyWithWhereWithoutEmojimoodInput!]
  upsert: [StoryUpsertWithWhereUniqueWithoutEmojimoodInput!]
}

input StoryUpdateManyWithoutProfileNestedInput {
  connect: [StoryWhereUniqueInput!]
  connectOrCreate: [StoryCreateOrConnectWithoutProfileInput!]
  create: StoryCreateWithoutProfileInput
  createMany: StoryCreateManyProfileInputEnvelope
  delete: [StoryWhereUniqueInput!]
  deleteMany: [StoryScalarWhereInput!]
  disconnect: [StoryWhereUniqueInput!]
  set: [StoryWhereUniqueInput!]
  update: [StoryUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [StoryUpdateManyWithWhereWithoutProfileInput!]
  upsert: [StoryUpsertWithWhereUniqueWithoutProfileInput!]
}

input StoryUpdateManyWithWhereWithoutEmojimoodInput {
  data: StoryUpdateManyMutationInput!
  where: StoryScalarWhereInput!
}

input StoryUpdateManyWithWhereWithoutProfileInput {
  data: StoryUpdateManyMutationInput!
  where: StoryScalarWhereInput!
}

input StoryUpdateOneWithoutPhotosNestedInput {
  connect: StoryWhereUniqueInput
  connectOrCreate: StoryCreateOrConnectWithoutPhotosInput
  create: StoryCreateWithoutPhotosInput
  delete: Boolean
  disconnect: Boolean
  update: StoryUpdateWithoutPhotosInput
  upsert: StoryUpsertWithoutPhotosInput
}

input StoryUpdateWithoutEmojimoodInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutStoryNestedInput
  Profile: ProfileUpdateOneWithoutStorysNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateWithoutPhotosInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  emojimood: EmojimoodUpdateManyWithoutStoryNestedInput
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneWithoutStorysNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateWithoutProfileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  emojimood: EmojimoodUpdateManyWithoutStoryNestedInput
  id: StringFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutStoryNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateWithWhereUniqueWithoutEmojimoodInput {
  data: StoryUpdateWithoutEmojimoodInput!
  where: StoryWhereUniqueInput!
}

input StoryUpdateWithWhereUniqueWithoutProfileInput {
  data: StoryUpdateWithoutProfileInput!
  where: StoryWhereUniqueInput!
}

input StoryUpsertWithoutPhotosInput {
  create: StoryCreateWithoutPhotosInput!
  update: StoryUpdateWithoutPhotosInput!
}

input StoryUpsertWithWhereUniqueWithoutEmojimoodInput {
  create: StoryCreateWithoutEmojimoodInput!
  update: StoryUpdateWithoutEmojimoodInput!
  where: StoryWhereUniqueInput!
}

input StoryUpsertWithWhereUniqueWithoutProfileInput {
  create: StoryCreateWithoutProfileInput!
  update: StoryUpdateWithoutProfileInput!
  where: StoryWhereUniqueInput!
}

input StoryWhereInput {
  AND: [StoryWhereInput!]
  createdAt: DateTimeFilter
  date: DateTimeFilter
  emojimood: EmojimoodListRelationFilter
  id: StringFilter
  NOT: [StoryWhereInput!]
  OR: [StoryWhereInput!]
  photos: PhotoListRelationFilter
  Profile: ProfileWhereInput
  profileId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input StoryWhereUniqueInput {
  id: String
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Tag {
  Category: Category
  categoryId: String
  DetailInformation(cursor: DetailInformationWhereUniqueInput, distinct: [DetailInformationScalarFieldEnum!], orderBy: [DetailInformationOrderByWithRelationInput!], skip: Int, take: Int, where: DetailInformationWhereInput): [DetailInformation!]!
  emoji: String
  id: ID!
  name: String!
}

input TagAvgOrderByAggregateInput {
  id: SortOrder
}

input TagCountOrderByAggregateInput {
  categoryId: SortOrder
  emoji: SortOrder
  id: SortOrder
  name: SortOrder
}

input TagCreateInput {
  Category: CategoryCreateNestedOneWithoutTagsInput
  DetailInformation: DetailInformationCreateNestedManyWithoutTagsInput
  emoji: String
  name: String!
}

input TagCreateManyCategoryInput {
  emoji: String
  id: Int
  name: String!
}

input TagCreateManyCategoryInputEnvelope {
  data: [TagCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input TagCreateManyInput {
  categoryId: String
  emoji: String
  id: Int
  name: String!
}

input TagCreateNestedManyWithoutCategoryInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutCategoryInput!]
  create: TagCreateWithoutCategoryInput
  createMany: TagCreateManyCategoryInputEnvelope
}

input TagCreateNestedManyWithoutDetailInformationInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutDetailInformationInput!]
  create: TagCreateWithoutDetailInformationInput
}

input TagCreateOrConnectWithoutCategoryInput {
  create: TagCreateWithoutCategoryInput!
  where: TagWhereUniqueInput!
}

input TagCreateOrConnectWithoutDetailInformationInput {
  create: TagCreateWithoutDetailInformationInput!
  where: TagWhereUniqueInput!
}

input TagCreateWithoutCategoryInput {
  DetailInformation: DetailInformationCreateNestedManyWithoutTagsInput
  emoji: String
  name: String!
}

input TagCreateWithoutDetailInformationInput {
  Category: CategoryCreateNestedOneWithoutTagsInput
  emoji: String
  name: String!
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagMaxOrderByAggregateInput {
  categoryId: SortOrder
  emoji: SortOrder
  id: SortOrder
  name: SortOrder
}

input TagMinOrderByAggregateInput {
  categoryId: SortOrder
  emoji: SortOrder
  id: SortOrder
  name: SortOrder
}

input TagOrderByRelationAggregateInput {
  _count: SortOrder
}

input TagOrderByWithAggregationInput {
  _avg: TagAvgOrderByAggregateInput
  _count: TagCountOrderByAggregateInput
  _max: TagMaxOrderByAggregateInput
  _min: TagMinOrderByAggregateInput
  _sum: TagSumOrderByAggregateInput
  categoryId: SortOrder
  emoji: SortOrder
  id: SortOrder
  name: SortOrder
}

input TagOrderByWithRelationInput {
  Category: CategoryOrderByWithRelationInput
  categoryId: SortOrder
  DetailInformation: DetailInformationOrderByRelationAggregateInput
  emoji: SortOrder
  id: SortOrder
  name: SortOrder
}

enum TagScalarFieldEnum {
  categoryId
  emoji
  id
  name
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  categoryId: StringNullableFilter
  emoji: StringNullableFilter
  id: IntFilter
  name: StringFilter
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
}

input TagScalarWhereWithAggregatesInput {
  AND: [TagScalarWhereWithAggregatesInput!]
  categoryId: StringNullableWithAggregatesFilter
  emoji: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  NOT: [TagScalarWhereWithAggregatesInput!]
  OR: [TagScalarWhereWithAggregatesInput!]
}

input TagSumOrderByAggregateInput {
  id: SortOrder
}

input TagUpdateInput {
  Category: CategoryUpdateOneWithoutTagsNestedInput
  DetailInformation: DetailInformationUpdateManyWithoutTagsNestedInput
  emoji: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TagUpdateManyMutationInput {
  emoji: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TagUpdateManyWithoutCategoryNestedInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutCategoryInput!]
  create: TagCreateWithoutCategoryInput
  createMany: TagCreateManyCategoryInputEnvelope
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [TagUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutCategoryInput!]
}

input TagUpdateManyWithoutDetailInformationNestedInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutDetailInformationInput!]
  create: TagCreateWithoutDetailInformationInput
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutDetailInformationInput!]
  updateMany: [TagUpdateManyWithWhereWithoutDetailInformationInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutDetailInformationInput!]
}

input TagUpdateManyWithWhereWithoutCategoryInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateManyWithWhereWithoutDetailInformationInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateWithoutCategoryInput {
  DetailInformation: DetailInformationUpdateManyWithoutTagsNestedInput
  emoji: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TagUpdateWithoutDetailInformationInput {
  Category: CategoryUpdateOneWithoutTagsNestedInput
  emoji: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TagUpdateWithWhereUniqueWithoutCategoryInput {
  data: TagUpdateWithoutCategoryInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithWhereUniqueWithoutDetailInformationInput {
  data: TagUpdateWithoutDetailInformationInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutCategoryInput {
  create: TagCreateWithoutCategoryInput!
  update: TagUpdateWithoutCategoryInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutDetailInformationInput {
  create: TagCreateWithoutDetailInformationInput!
  update: TagUpdateWithoutDetailInformationInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  Category: CategoryWhereInput
  categoryId: StringNullableFilter
  DetailInformation: DetailInformationListRelationFilter
  emoji: StringNullableFilter
  id: IntFilter
  name: StringFilter
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: Int
}

type Theme {
  createdAt: DateTime!
  endDate: DateTime
  id: ID!
  mobile: Json!
  mobileVersions: [String!]!
  name: String!
  ProfileTheme: [ProfileTheme!]!
  startDate: DateTime
  updatedAt: DateTime!
  web: Json!
  webVersions: [String!]!
}

input ThemeCountOrderByAggregateInput {
  createdAt: SortOrder
  endDate: SortOrder
  id: SortOrder
  mobile: SortOrder
  mobileVersions: SortOrder
  name: SortOrder
  startDate: SortOrder
  updatedAt: SortOrder
  web: SortOrder
  webVersions: SortOrder
}

input ThemeCreateInput {
  createdAt: DateTime
  endDate: DateTime
  id: String
  mobile: [Json!]
  mobileVersions: [String!]
  name: String!
  ProfileTheme: ProfileThemeCreateNestedManyWithoutThemeInput
  startDate: DateTime
  updatedAt: DateTime
  web: [Json!]
  webVersions: [String!]
}

input ThemeCreateManyInput {
  createdAt: DateTime
  endDate: DateTime
  id: String
  mobile: [Json!]
  mobileVersions: [String!]
  name: String!
  startDate: DateTime
  updatedAt: DateTime
  web: [Json!]
  webVersions: [String!]
}

input ThemeCreatemobileInput {
  set: [Json!]!
}

input ThemeCreatemobileVersionsInput {
  set: [String!]!
}

input ThemeCreateNestedOneWithoutProfileThemeInput {
  connect: ThemeWhereUniqueInput
  connectOrCreate: ThemeCreateOrConnectWithoutProfileThemeInput
  create: ThemeCreateWithoutProfileThemeInput
}

input ThemeCreateOrConnectWithoutProfileThemeInput {
  create: ThemeCreateWithoutProfileThemeInput!
  where: ThemeWhereUniqueInput!
}

input ThemeCreatewebInput {
  set: [Json!]!
}

input ThemeCreatewebVersionsInput {
  set: [String!]!
}

input ThemeCreateWithoutProfileThemeInput {
  createdAt: DateTime
  endDate: DateTime
  id: String
  mobile: [Json!]
  mobileVersions: [String!]
  name: String!
  startDate: DateTime
  updatedAt: DateTime
  web: [Json!]
  webVersions: [String!]
}

type ThemeManager {
  id: ID!
  Profile: Profile!
  profileId: String!
  ProfileTheme: [ProfileTheme!]!
}

input ThemeManagerCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input ThemeManagerCreateInput {
  createdAt: DateTime
  id: String
  Profile: ProfileCreateNestedOneWithoutThemeManagerInput!
  ProfileTheme: ProfileThemeCreateNestedManyWithoutThemeManagerInput
  updatedAt: DateTime
}

input ThemeManagerCreateManyInput {
  createdAt: DateTime
  id: String
  profileId: String!
  updatedAt: DateTime
}

input ThemeManagerCreateNestedOneWithoutProfileInput {
  connect: ThemeManagerWhereUniqueInput
  connectOrCreate: ThemeManagerCreateOrConnectWithoutProfileInput
  create: ThemeManagerCreateWithoutProfileInput
}

input ThemeManagerCreateNestedOneWithoutProfileThemeInput {
  connect: ThemeManagerWhereUniqueInput
  connectOrCreate: ThemeManagerCreateOrConnectWithoutProfileThemeInput
  create: ThemeManagerCreateWithoutProfileThemeInput
}

input ThemeManagerCreateOrConnectWithoutProfileInput {
  create: ThemeManagerCreateWithoutProfileInput!
  where: ThemeManagerWhereUniqueInput!
}

input ThemeManagerCreateOrConnectWithoutProfileThemeInput {
  create: ThemeManagerCreateWithoutProfileThemeInput!
  where: ThemeManagerWhereUniqueInput!
}

input ThemeManagerCreateWithoutProfileInput {
  createdAt: DateTime
  id: String
  ProfileTheme: ProfileThemeCreateNestedManyWithoutThemeManagerInput
  updatedAt: DateTime
}

input ThemeManagerCreateWithoutProfileThemeInput {
  createdAt: DateTime
  id: String
  Profile: ProfileCreateNestedOneWithoutThemeManagerInput!
  updatedAt: DateTime
}

input ThemeManagerMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input ThemeManagerMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input ThemeManagerOrderByWithAggregationInput {
  _count: ThemeManagerCountOrderByAggregateInput
  _max: ThemeManagerMaxOrderByAggregateInput
  _min: ThemeManagerMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input ThemeManagerOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  ProfileTheme: ProfileThemeOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input ThemeManagerRelationFilter {
  is: ThemeManagerWhereInput
  isNot: ThemeManagerWhereInput
}

enum ThemeManagerScalarFieldEnum {
  createdAt
  id
  profileId
  updatedAt
}

input ThemeManagerScalarWhereWithAggregatesInput {
  AND: [ThemeManagerScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [ThemeManagerScalarWhereWithAggregatesInput!]
  OR: [ThemeManagerScalarWhereWithAggregatesInput!]
  profileId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ThemeManagerUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutThemeManagerNestedInput
  ProfileTheme: ProfileThemeUpdateManyWithoutThemeManagerNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ThemeManagerUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ThemeManagerUpdateOneWithoutProfileNestedInput {
  connect: ThemeManagerWhereUniqueInput
  connectOrCreate: ThemeManagerCreateOrConnectWithoutProfileInput
  create: ThemeManagerCreateWithoutProfileInput
  delete: Boolean
  disconnect: Boolean
  update: ThemeManagerUpdateWithoutProfileInput
  upsert: ThemeManagerUpsertWithoutProfileInput
}

input ThemeManagerUpdateOneWithoutProfileThemeNestedInput {
  connect: ThemeManagerWhereUniqueInput
  connectOrCreate: ThemeManagerCreateOrConnectWithoutProfileThemeInput
  create: ThemeManagerCreateWithoutProfileThemeInput
  delete: Boolean
  disconnect: Boolean
  update: ThemeManagerUpdateWithoutProfileThemeInput
  upsert: ThemeManagerUpsertWithoutProfileThemeInput
}

input ThemeManagerUpdateWithoutProfileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ProfileTheme: ProfileThemeUpdateManyWithoutThemeManagerNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ThemeManagerUpdateWithoutProfileThemeInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutThemeManagerNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ThemeManagerUpsertWithoutProfileInput {
  create: ThemeManagerCreateWithoutProfileInput!
  update: ThemeManagerUpdateWithoutProfileInput!
}

input ThemeManagerUpsertWithoutProfileThemeInput {
  create: ThemeManagerCreateWithoutProfileThemeInput!
  update: ThemeManagerUpdateWithoutProfileThemeInput!
}

input ThemeManagerWhereInput {
  AND: [ThemeManagerWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ThemeManagerWhereInput!]
  OR: [ThemeManagerWhereInput!]
  Profile: ProfileWhereInput
  profileId: StringFilter
  ProfileTheme: ProfileThemeListRelationFilter
  updatedAt: DateTimeFilter
}

input ThemeManagerWhereUniqueInput {
  id: String
  profileId: String
}

input ThemeMaxOrderByAggregateInput {
  createdAt: SortOrder
  endDate: SortOrder
  id: SortOrder
  name: SortOrder
  startDate: SortOrder
  updatedAt: SortOrder
}

input ThemeMinOrderByAggregateInput {
  createdAt: SortOrder
  endDate: SortOrder
  id: SortOrder
  name: SortOrder
  startDate: SortOrder
  updatedAt: SortOrder
}

input ThemeOrderByWithAggregationInput {
  _count: ThemeCountOrderByAggregateInput
  _max: ThemeMaxOrderByAggregateInput
  _min: ThemeMinOrderByAggregateInput
  createdAt: SortOrder
  endDate: SortOrder
  id: SortOrder
  mobile: SortOrder
  mobileVersions: SortOrder
  name: SortOrder
  startDate: SortOrder
  updatedAt: SortOrder
  web: SortOrder
  webVersions: SortOrder
}

input ThemeOrderByWithRelationInput {
  createdAt: SortOrder
  endDate: SortOrder
  id: SortOrder
  mobile: SortOrder
  mobileVersions: SortOrder
  name: SortOrder
  ProfileTheme: ProfileThemeOrderByRelationAggregateInput
  startDate: SortOrder
  updatedAt: SortOrder
  web: SortOrder
  webVersions: SortOrder
}

input ThemeRelationFilter {
  is: ThemeWhereInput
  isNot: ThemeWhereInput
}

enum ThemeScalarFieldEnum {
  createdAt
  endDate
  id
  mobile
  mobileVersions
  name
  startDate
  updatedAt
  web
  webVersions
}

input ThemeScalarWhereWithAggregatesInput {
  AND: [ThemeScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  endDate: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  mobile: JsonNullableListFilter
  mobileVersions: StringNullableListFilter
  name: StringWithAggregatesFilter
  NOT: [ThemeScalarWhereWithAggregatesInput!]
  OR: [ThemeScalarWhereWithAggregatesInput!]
  startDate: DateTimeNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  web: JsonNullableListFilter
  webVersions: StringNullableListFilter
}

input ThemeUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mobile: [Json!]
  mobileVersions: [String!]
  name: StringFieldUpdateOperationsInput
  ProfileTheme: ProfileThemeUpdateManyWithoutThemeNestedInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  web: [Json!]
  webVersions: [String!]
}

input ThemeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mobile: [Json!]
  mobileVersions: [String!]
  name: StringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  web: [Json!]
  webVersions: [String!]
}

input ThemeUpdatemobileInput {
  push: Json
  set: [Json!]
}

input ThemeUpdatemobileVersionsInput {
  push: [String!]
  set: [String!]
}

input ThemeUpdateOneRequiredWithoutProfileThemeNestedInput {
  connect: ThemeWhereUniqueInput
  connectOrCreate: ThemeCreateOrConnectWithoutProfileThemeInput
  create: ThemeCreateWithoutProfileThemeInput
  update: ThemeUpdateWithoutProfileThemeInput
  upsert: ThemeUpsertWithoutProfileThemeInput
}

input ThemeUpdatewebInput {
  push: Json
  set: [Json!]
}

input ThemeUpdatewebVersionsInput {
  push: [String!]
  set: [String!]
}

input ThemeUpdateWithoutProfileThemeInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mobile: [Json!]
  mobileVersions: [String!]
  name: StringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  web: [Json!]
  webVersions: [String!]
}

input ThemeUpsertWithoutProfileThemeInput {
  create: ThemeCreateWithoutProfileThemeInput!
  update: ThemeUpdateWithoutProfileThemeInput!
}

input ThemeWhereInput {
  AND: [ThemeWhereInput!]
  createdAt: DateTimeFilter
  endDate: DateTimeNullableFilter
  id: StringFilter
  mobile: JsonNullableListFilter
  mobileVersions: StringNullableListFilter
  name: StringFilter
  NOT: [ThemeWhereInput!]
  OR: [ThemeWhereInput!]
  ProfileTheme: ProfileThemeListRelationFilter
  startDate: DateTimeNullableFilter
  updatedAt: DateTimeFilter
  web: JsonNullableListFilter
  webVersions: StringNullableListFilter
}

input ThemeWhereUniqueInput {
  id: String
}

input TonightPathCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input TonightPathCreateInput {
  createdAt: DateTime
  id: String
  Path: PathCreateNestedManyWithoutTonightPathInput
  profileId: String!
  updatedAt: DateTime
}

input TonightPathCreateManyInput {
  createdAt: DateTime
  id: String
  profileId: String!
  updatedAt: DateTime
}

input TonightPathCreateNestedOneWithoutPathInput {
  connect: TonightPathWhereUniqueInput
  connectOrCreate: TonightPathCreateOrConnectWithoutPathInput
  create: TonightPathCreateWithoutPathInput
}

input TonightPathCreateOrConnectWithoutPathInput {
  create: TonightPathCreateWithoutPathInput!
  where: TonightPathWhereUniqueInput!
}

input TonightPathCreateWithoutPathInput {
  createdAt: DateTime
  id: String
  profileId: String!
  updatedAt: DateTime
}

input TonightPathMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input TonightPathMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input TonightPathOrderByWithAggregationInput {
  _count: TonightPathCountOrderByAggregateInput
  _max: TonightPathMaxOrderByAggregateInput
  _min: TonightPathMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
}

input TonightPathOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  Path: PathOrderByRelationAggregateInput
  profileId: SortOrder
  updatedAt: SortOrder
}

input TonightPathRelationFilter {
  is: TonightPathWhereInput
  isNot: TonightPathWhereInput
}

enum TonightPathScalarFieldEnum {
  createdAt
  id
  profileId
  updatedAt
}

input TonightPathScalarWhereWithAggregatesInput {
  AND: [TonightPathScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [TonightPathScalarWhereWithAggregatesInput!]
  OR: [TonightPathScalarWhereWithAggregatesInput!]
  profileId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input TonightPathUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Path: PathUpdateManyWithoutTonightPathNestedInput
  profileId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TonightPathUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  profileId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TonightPathUpdateOneWithoutPathNestedInput {
  connect: TonightPathWhereUniqueInput
  connectOrCreate: TonightPathCreateOrConnectWithoutPathInput
  create: TonightPathCreateWithoutPathInput
  delete: Boolean
  disconnect: Boolean
  update: TonightPathUpdateWithoutPathInput
  upsert: TonightPathUpsertWithoutPathInput
}

input TonightPathUpdateWithoutPathInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  profileId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TonightPathUpsertWithoutPathInput {
  create: TonightPathCreateWithoutPathInput!
  update: TonightPathUpdateWithoutPathInput!
}

input TonightPathWhereInput {
  AND: [TonightPathWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [TonightPathWhereInput!]
  OR: [TonightPathWhereInput!]
  Path: PathListRelationFilter
  profileId: StringFilter
  updatedAt: DateTimeFilter
}

input TonightPathWhereUniqueInput {
  id: String
}

enum TransactionIsolationLevel {
  ReadCommitted
  ReadUncommitted
  RepeatableRead
  Serializable
}

enum TypeOfDocument {
  PROFILE_PRIVACY_POLICY
  PROFILE_TERMS_OF_SERVICE
}

input UpdateManyNotificationStatusInput {
  """List of the NotificationStatus IDs to update"""
  notificationStatusIds: [UpdateNotificationStatusInput!]!
}

union UpdateManyNotificationStatusUnionResponse = ErrorProfiling | UpdateNotificationResponse

type UpdateNotificationResponse {
  count: Int!
}

input UpdateNotificationStatusInput {
  """A NotificationStatus ID"""
  id: String!
}

type Venue {
  createdAt: DateTime!
  id: ID!
  LiveOutVenue: LiveOutVenue
  Location: Location
  name: String
  Profile: Profile!
  profileId: String!
  updatedAt: DateTime!
  VenueStats: VenueStats!
  venueStatsId: String!
}

input VenueContactInput {
  type: String
  value: String!
}

input VenueCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
  venueStatsId: SortOrder
}

input VenueCreateInput {
  createdAt: DateTime
  id: String
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutVenueInput
  Location: LocationCreateNestedOneWithoutVenueInput
  name: String
  Profile: ProfileCreateNestedOneWithoutVenueInput!
  updatedAt: DateTime
  VenueStats: VenueStatsCreateNestedOneWithoutVenueInput!
}

input VenueCreateManyInput {
  createdAt: DateTime
  id: String
  name: String
  profileId: String!
  updatedAt: DateTime
  venueStatsId: String!
}

input VenueCreateNestedOneWithoutLiveOutVenueInput {
  connect: VenueWhereUniqueInput
  connectOrCreate: VenueCreateOrConnectWithoutLiveOutVenueInput
  create: VenueCreateWithoutLiveOutVenueInput
}

input VenueCreateNestedOneWithoutLocationInput {
  connect: VenueWhereUniqueInput
  connectOrCreate: VenueCreateOrConnectWithoutLocationInput
  create: VenueCreateWithoutLocationInput
}

input VenueCreateNestedOneWithoutProfileInput {
  connect: VenueWhereUniqueInput
  connectOrCreate: VenueCreateOrConnectWithoutProfileInput
  create: VenueCreateWithoutProfileInput
}

input VenueCreateNestedOneWithoutVenueStatsInput {
  connect: VenueWhereUniqueInput
  connectOrCreate: VenueCreateOrConnectWithoutVenueStatsInput
  create: VenueCreateWithoutVenueStatsInput
}

input VenueCreateOrConnectWithoutLiveOutVenueInput {
  create: VenueCreateWithoutLiveOutVenueInput!
  where: VenueWhereUniqueInput!
}

input VenueCreateOrConnectWithoutLocationInput {
  create: VenueCreateWithoutLocationInput!
  where: VenueWhereUniqueInput!
}

input VenueCreateOrConnectWithoutProfileInput {
  create: VenueCreateWithoutProfileInput!
  where: VenueWhereUniqueInput!
}

input VenueCreateOrConnectWithoutVenueStatsInput {
  create: VenueCreateWithoutVenueStatsInput!
  where: VenueWhereUniqueInput!
}

input VenueCreateWithoutLiveOutVenueInput {
  createdAt: DateTime
  id: String
  Location: LocationCreateNestedOneWithoutVenueInput
  name: String
  Profile: ProfileCreateNestedOneWithoutVenueInput!
  updatedAt: DateTime
  VenueStats: VenueStatsCreateNestedOneWithoutVenueInput!
}

input VenueCreateWithoutLocationInput {
  createdAt: DateTime
  id: String
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutVenueInput
  name: String
  Profile: ProfileCreateNestedOneWithoutVenueInput!
  updatedAt: DateTime
  VenueStats: VenueStatsCreateNestedOneWithoutVenueInput!
}

input VenueCreateWithoutProfileInput {
  createdAt: DateTime
  id: String
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutVenueInput
  Location: LocationCreateNestedOneWithoutVenueInput
  name: String
  updatedAt: DateTime
  VenueStats: VenueStatsCreateNestedOneWithoutVenueInput!
}

input VenueCreateWithoutVenueStatsInput {
  createdAt: DateTime
  id: String
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutVenueInput
  Location: LocationCreateNestedOneWithoutVenueInput
  name: String
  Profile: ProfileCreateNestedOneWithoutVenueInput!
  updatedAt: DateTime
}

input VenueMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
  venueStatsId: SortOrder
}

input VenueMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
  venueStatsId: SortOrder
}

input VenueOrderByWithAggregationInput {
  _count: VenueCountOrderByAggregateInput
  _max: VenueMaxOrderByAggregateInput
  _min: VenueMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
  venueStatsId: SortOrder
}

input VenueOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  LiveOutVenue: LiveOutVenueOrderByWithRelationInput
  Location: LocationOrderByWithRelationInput
  name: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  updatedAt: SortOrder
  VenueStats: VenueStatsOrderByWithRelationInput
  venueStatsId: SortOrder
}

input VenueRelationFilter {
  is: VenueWhereInput
  isNot: VenueWhereInput
}

enum VenueScalarFieldEnum {
  createdAt
  id
  name
  profileId
  updatedAt
  venueStatsId
}

input VenueScalarWhereWithAggregatesInput {
  AND: [VenueScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  NOT: [VenueScalarWhereWithAggregatesInput!]
  OR: [VenueScalarWhereWithAggregatesInput!]
  profileId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  venueStatsId: StringWithAggregatesFilter
}

type VenuesNearbyResponse {
  searchArea: SearchAreaResponse!
  venuesNearby: [ProfileVenue!]!
}

type VenueStats {
  createdAt: DateTime!
  id: ID!
  Out(cursor: OutWhereUniqueInput, distinct: [OutScalarFieldEnum!], orderBy: [OutOrderByWithRelationInput!], skip: Int, take: Int, where: OutWhereInput): [Out!]!
  updatedAt: DateTime!
  Venue: Venue
}

input VenueStatsCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input VenueStatsCreateInput {
  createdAt: DateTime
  id: String
  Out: OutCreateNestedManyWithoutVenueStatsInput
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutVenueStatsInput
}

input VenueStatsCreateManyInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input VenueStatsCreateNestedOneWithoutOutInput {
  connect: VenueStatsWhereUniqueInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutOutInput
  create: VenueStatsCreateWithoutOutInput
}

input VenueStatsCreateNestedOneWithoutVenueInput {
  connect: VenueStatsWhereUniqueInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutVenueInput
  create: VenueStatsCreateWithoutVenueInput
}

input VenueStatsCreateOrConnectWithoutOutInput {
  create: VenueStatsCreateWithoutOutInput!
  where: VenueStatsWhereUniqueInput!
}

input VenueStatsCreateOrConnectWithoutVenueInput {
  create: VenueStatsCreateWithoutVenueInput!
  where: VenueStatsWhereUniqueInput!
}

input VenueStatsCreateWithoutOutInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutVenueStatsInput
}

input VenueStatsCreateWithoutVenueInput {
  createdAt: DateTime
  id: String
  Out: OutCreateNestedManyWithoutVenueStatsInput
  updatedAt: DateTime
}

input VenueStatsMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input VenueStatsMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input VenueStatsOrderByWithAggregationInput {
  _count: VenueStatsCountOrderByAggregateInput
  _max: VenueStatsMaxOrderByAggregateInput
  _min: VenueStatsMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input VenueStatsOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  Out: OutOrderByRelationAggregateInput
  updatedAt: SortOrder
  Venue: VenueOrderByWithRelationInput
}

input VenueStatsRelationFilter {
  is: VenueStatsWhereInput
  isNot: VenueStatsWhereInput
}

enum VenueStatsScalarFieldEnum {
  createdAt
  id
  updatedAt
}

input VenueStatsScalarWhereWithAggregatesInput {
  AND: [VenueStatsScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  NOT: [VenueStatsScalarWhereWithAggregatesInput!]
  OR: [VenueStatsScalarWhereWithAggregatesInput!]
  updatedAt: DateTimeWithAggregatesFilter
}

input VenueStatsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Out: OutUpdateManyWithoutVenueStatsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutVenueStatsNestedInput
}

input VenueStatsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueStatsUpdateOneRequiredWithoutVenueNestedInput {
  connect: VenueStatsWhereUniqueInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutVenueInput
  create: VenueStatsCreateWithoutVenueInput
  update: VenueStatsUpdateWithoutVenueInput
  upsert: VenueStatsUpsertWithoutVenueInput
}

input VenueStatsUpdateOneWithoutOutNestedInput {
  connect: VenueStatsWhereUniqueInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutOutInput
  create: VenueStatsCreateWithoutOutInput
  delete: Boolean
  disconnect: Boolean
  update: VenueStatsUpdateWithoutOutInput
  upsert: VenueStatsUpsertWithoutOutInput
}

input VenueStatsUpdateWithoutOutInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutVenueStatsNestedInput
}

input VenueStatsUpdateWithoutVenueInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Out: OutUpdateManyWithoutVenueStatsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueStatsUpsertWithoutOutInput {
  create: VenueStatsCreateWithoutOutInput!
  update: VenueStatsUpdateWithoutOutInput!
}

input VenueStatsUpsertWithoutVenueInput {
  create: VenueStatsCreateWithoutVenueInput!
  update: VenueStatsUpdateWithoutVenueInput!
}

input VenueStatsWhereInput {
  AND: [VenueStatsWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [VenueStatsWhereInput!]
  OR: [VenueStatsWhereInput!]
  Out: OutListRelationFilter
  updatedAt: DateTimeFilter
  Venue: VenueWhereInput
}

input VenueStatsWhereUniqueInput {
  id: String
}

input VenueUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutVenueNestedInput
  Location: LocationUpdateOneWithoutVenueNestedInput
  name: NullableStringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVenueNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneRequiredWithoutVenueNestedInput
}

input VenueUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueUpdateOneRequiredWithoutLiveOutVenueNestedInput {
  connect: VenueWhereUniqueInput
  connectOrCreate: VenueCreateOrConnectWithoutLiveOutVenueInput
  create: VenueCreateWithoutLiveOutVenueInput
  update: VenueUpdateWithoutLiveOutVenueInput
  upsert: VenueUpsertWithoutLiveOutVenueInput
}

input VenueUpdateOneWithoutLocationNestedInput {
  connect: VenueWhereUniqueInput
  connectOrCreate: VenueCreateOrConnectWithoutLocationInput
  create: VenueCreateWithoutLocationInput
  delete: Boolean
  disconnect: Boolean
  update: VenueUpdateWithoutLocationInput
  upsert: VenueUpsertWithoutLocationInput
}

input VenueUpdateOneWithoutProfileNestedInput {
  connect: VenueWhereUniqueInput
  connectOrCreate: VenueCreateOrConnectWithoutProfileInput
  create: VenueCreateWithoutProfileInput
  delete: Boolean
  disconnect: Boolean
  update: VenueUpdateWithoutProfileInput
  upsert: VenueUpsertWithoutProfileInput
}

input VenueUpdateOneWithoutVenueStatsNestedInput {
  connect: VenueWhereUniqueInput
  connectOrCreate: VenueCreateOrConnectWithoutVenueStatsInput
  create: VenueCreateWithoutVenueStatsInput
  delete: Boolean
  disconnect: Boolean
  update: VenueUpdateWithoutVenueStatsInput
  upsert: VenueUpsertWithoutVenueStatsInput
}

input VenueUpdateWithoutLiveOutVenueInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutVenueNestedInput
  name: NullableStringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVenueNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneRequiredWithoutVenueNestedInput
}

input VenueUpdateWithoutLocationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutVenueNestedInput
  name: NullableStringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVenueNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneRequiredWithoutVenueNestedInput
}

input VenueUpdateWithoutProfileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutVenueNestedInput
  Location: LocationUpdateOneWithoutVenueNestedInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneRequiredWithoutVenueNestedInput
}

input VenueUpdateWithoutVenueStatsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutVenueNestedInput
  Location: LocationUpdateOneWithoutVenueNestedInput
  name: NullableStringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVenueNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueUpsertWithoutLiveOutVenueInput {
  create: VenueCreateWithoutLiveOutVenueInput!
  update: VenueUpdateWithoutLiveOutVenueInput!
}

input VenueUpsertWithoutLocationInput {
  create: VenueCreateWithoutLocationInput!
  update: VenueUpdateWithoutLocationInput!
}

input VenueUpsertWithoutProfileInput {
  create: VenueCreateWithoutProfileInput!
  update: VenueUpdateWithoutProfileInput!
}

input VenueUpsertWithoutVenueStatsInput {
  create: VenueCreateWithoutVenueStatsInput!
  update: VenueUpdateWithoutVenueStatsInput!
}

input VenueWhereInput {
  AND: [VenueWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  LiveOutVenue: LiveOutVenueWhereInput
  Location: LocationWhereInput
  name: StringNullableFilter
  NOT: [VenueWhereInput!]
  OR: [VenueWhereInput!]
  Profile: ProfileWhereInput
  profileId: StringFilter
  updatedAt: DateTimeFilter
  VenueStats: VenueStatsWhereInput
  venueStatsId: StringFilter
}

input VenueWhereUniqueInput {
  id: String
  profileId: String
  venueStatsId: String
}
